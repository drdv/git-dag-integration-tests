digraph {
	graph [bgcolor=white dpi=None rankdir=TB]
	node [fontname=Courier height=0.02 margin="0.01,0.01" shape=box style=filled width=0.02]
	edge [arrowsize=0.5 color=gray10]
	"0148fd836a9b1954833471f61b4d2e058797af55" [label="0148fd8" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 16 22:35:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:02 2025 -0800\n\nusage: add show_usage_if_asked()\n\nSome commands call usage() when they are asked to give the help\nmessage with \"git cmd -h\", but this has the same problem as we\nfixed with callers of usage_with_options() for the same purpose.\n\nIntroduce a helper function that captures the common pattern\n\nif (argc == 2 && !strcmp(argv[1], \"-h\"))\nusage(usage);\n\nand replaces it with\n\nshow_usage_if_asked(argc, argv, usage);\n\nto help correct these code paths.\n\nNote that this helper function still exits with status 129, and\nt0012 insists on it.  After converting all the mistaken callers of\nusage_with_options() to call this new helper, we may want to address\nit---the end user is asking us to give the help text, and we are\ndoing exactly as asked, so there is no reason to exit with non-zero\nstatus.\n\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"017bd8923986acd4992fd21f3451fdd15ec6edce" [label="017bd89" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nWed Jan 22 06:35:49 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 18:51:36 2025 -0800\n\nreftable: prevent 'update_index' changes after adding records\n\nThe function `reftable_writer_set_limits()` allows updating the\n'min_update_index' and 'max_update_index' of a reftable writer. These\nvalues are written to both the writer's header and footer.\n\nSince the header is written during the first block write, any subsequent\nchanges to the update index would create a mismatch between the header\nand footer values. The footer would contain the newer values while the\nheader retained the original ones.\n\nTo protect against this bug, prevent callers from updating these values\nafter any record is written. To do this, modify the function to return\nan error whenever the limits are modified after any record adds. Check\nfor record adds within `reftable_writer_set_limits()` by checking the\n`last_key` and `next` variable. The former is updated after each record\nadded, but is reset at certain points. The latter is set after writing\nthe first block.\n\nModify all callers of the function to anticipate a return type and\nhandle it accordingly. Add a unit test to also ensure the function\nreturns the error as expected.\n\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"01a587da8cf89f9d6c8c5b19ea3e109efb7c9b7c" [label="01a587d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:46 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:37 2025 -0800\n\nreftable/reader: stop using `ARRAY_SIZE()` macro\n\nWe have a single user of the `ARRAY_SIZE()` macro in the reftable\nreader. Drop its use to reduce our dependence on the Git codebase.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"01b9465440ef96427162197e6a284dbfdeae7428" [label="01b9465" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nWed Jan 15 21:23:46 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 23:43:36 2025 -0800\n\ndoc: make more direct explanations in git commit options\n\n- Use imperative mood\n- make use of the placeholder format to simplify style\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"01f2b845292a11ef1d0a77a705fb003137259cb0" [label="01f2b84" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:41 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:41 2025 -0800\n\nMerge branch 'ua/some-builtins-wo-the-repository' into next\n\nA handful of built-in command implementations have been rewritten\nto use the repository instance supplied by git.c:run_builtin(), its\ncaller.\n\n* ua/some-builtins-wo-the-repository:\nbuiltin/checkout-index: stop using `the_repository`\nbuiltin/for-each-ref: stop using `the_repository`\nbuiltin/ls-files: stop using `the_repository`\nbuiltin/pack-refs: stop using `the_repository`\nbuiltin/send-pack: stop using `the_repository`\nbuiltin/verify-commit: stop using `the_repository`\nbuiltin/verify-tag: stop using `the_repository`\nconfig: teach repo_config to allow `repo` to be NULL"]
	"028f618658e34230e1d65678f14b6876e0f9856d" [label="028f618" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\npath: adjust last remaining users of `the_repository`\n\nWith the preceding refactorings we now only have a couple of implicit\nusers of `the_repository` left in the \"path\" subsystem, all of which\ndepend on global state via `calc_shared_perm()`. Make the dependency on\n`the_repository` explicit by passing the repo as a parameter instead and\nadjust callers accordingly.\n\nNote that this change bubbles up into a couple of subsystems that were\npreviously declared as free from `the_repository`. Instead of marking\nall of them as `the_repository`-dependent again, we instead use the\nrepository that is available in the calling context. There are three\nexceptions though with \"copy.c\", \"pack-write.c\" and \"tempfile.c\".\nAdjusting these would require us to adapt callsites all over the place,\nso this is left for a future iteration.\n\nMark \"path.c\" as free from `the_repository`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"02b355f54658bbadc7cc82ebabab6bc78d5ff64a" [label="02b355f" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:35:49 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:35:49 2025 +0800\n\nMerge branch 'master' of github.com:nafmo/git-l10n-sv\n\n* 'master' of github.com:nafmo/git-l10n-sv:\nl10n: sv.po, fixed swedish typos\nl10n: sv.po: Update Swedish translation"]
	"02ed88f6a23d142f6e5c7e0b351704654796a6fe" [label="02ed88f" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:18 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:23 2025 -0800\n\nlist-objects-filter-options.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"03944513488db4a81fdb4c21c3b515e4cb260b05" [label=0394451 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:49 2025 -0800\n\nThe eleventh batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"03e7c454e9bc15f4fa046bd3a5f6147bbd0480e6" [label="03e7c45" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:29:00 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:54 2025 -0800\n\nunpack_loose_header(): simplify next_out assignment\n\nWhen using OBJECT_INFO_ALLOW_UNKNOWN_TYPE to unpack a header that\ndoesn\'t fit into our initial 32-byte buffer, we loop over calls\ngit_inflate(), feeding it our buffer to the \"next_out\" pointer each\ntime. As the code is written, we reset next_out after each inflate call\n(and after reading the output), ready for the next loop.\n\nThis isn\'t wrong, but there are a few advantages to setting up\n\"next_out\" right before each inflate call, rather than after:\n\n1. It drops a few duplicated lines of code.\n\n2. It makes it obvious that we always feed a fresh buffer on each call\n(and thus can never see Z_BUF_ERROR due to due to a lack of output\nspace).\n\n3. After we exit the loop, we\'ll leave stream->next_out pointing to\nthe end of the fetched data (this is how zlib callers find out how\nmuch data is in the buffer). This doesn\'t matter in practice, since\nnobody looks at it again. But it\'s probably the least-surprising\nthing to do, as it matches how next_out is left when the whole\nthing fits in the initial 32-byte buffer (and we don\'t enter the\nloop at all).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"04292c3796bb92664f6111326215d9c060ef71c8" [label="04292c3" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:42 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:17 2025 -0800\n\nhash.h: drop unsafe_ function variants\n\nNow that all callers have been converted from:\n\nthe_hash_algo->unsafe_init_fn();\n\nto\n\nunsafe_hash_algo(the_hash_algo)->init_fn();\n\nand similar, we can remove the scaffolding for the unsafe_ function\nvariants and force callers to use the new unsafe_hash_algo() mechanic\ninstead.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"044b6f04f23d6c7e3c3750c9829db96b71470874" [label="044b6f0" color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nSat Feb 15 09:45:39 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:44:27 2025 -0800\n\nrefspec: clarify function naming and documentation\n\nRename `match_name_with_pattern()` to `match_refname_with_pattern()` to\nbetter reflect its purpose and improve documentation comment clarity.\nThe previous function name and parameter names were inconsistent, making\nit harder to understand their roles in refspec matching.\n\n- Rename parameters:\n- `key` -> `pattern` (globbing pattern to match)\n- `name` -> `refname` (refname to check)\n- `value` -> `replacement` (replacement mapping pattern)\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0474e4a81581b20d3c2855b42bbc060c6b6568b5" [label="0474e4a" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:03 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: fix overwritten `git` variable\n\nWe\'re assigning the `git` variable in three places:\n\n- In \"meson.build\" to store the external Git executable.\n\n- In \"meson.build\" to store the compiled Git executable.\n\n- In \"Documentation/meson.build\" to store the external Git executable,\na second time.\n\nThe last case is only needed because we overwrite the original variable\nwith the built version. Rename the variable used for the built Git\nexecutable so that we don\'t have to resolve the external Git executable\nmultiple times.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"04aeeeaab1f02213703c4e1997b2c2f1ca0f8f96" [label="04aeeea" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:23 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:45 2024 -0800\n\ncommit-reach: fix type of `min_commit_date`\n\nThe `can_all_from_reach_with_flag()` function accepts a parameter that\nallows callers to cut off traversal at a specified commit date. This\nparameter is of type `time_t`, which is a signed type, while we end up\ncomparing it to a commit\'s `date` field, which is of the unsigned type\n`timestamp_t`.\n\nFix the parameter to be of type `timestamp_t`. There is only a single\ncaller in \"upload-pack.c\" that sets this parameter, and that caller\nknows to pass in a `timestamp_t` already.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"04c29bdea04e5af5193fd386b62a48c320351f19" [label="04c29bd" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 12:31:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:28:27 2025 -0800\n\nci: merge linux-gcc-default into linux-gcc\n\nThe \"linux-gcc-default\" job is mostly doing the same as the \"linux-gcc\"\njob, except for a couple of minor differences:\n\n- We use an explicit GCC version instead of the default version\nprovided by the distribution. We have other jobs that test with\n\"gcc-8\", making this distinction pointless.\n\n- We don\'t set up the Python version explicitly, and instead use the\ndefault Python version. Python 2 has been end-of-life for quite a\nwhile now though, making this distinction less interesting.\n\n- We set up the default branch name to be \"main\" in \"linux-gcc\". We\nhave other testcases that don\'t and also some that explicitly use\n\"master\".\n\n- We use \"ubuntu:20.04\" in one job and \"ubuntu:latest\" in another. We\nalready have a couple other jobs testing these respectively.\n\nSo overall, the job does not add much to our test coverage.\n\nDrop the \"linux-gcc-default\" job and adapt \"linux-gcc\" to start using\nthe default GCC compiler, effectively merging those two jobs into one.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0543300b594eb1337ce33415997b47594bf29056" [label=0543300 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:23 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:25 2025 -0800\n\nsetup.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0578f1e66aa381356bfe2f53decf3864d88d23d3" [label="0578f1e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 31 13:55:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:06:11 2025 -0800\n\nglobal: adapt callers to use generic hash context helpers\n\nAdapt callers to use generic hash context helpers instead of using the\nhash algorithm to update them. This makes the callsites easier to reason\nabout and removes the possibility that the wrong hash algorithm is used\nto update the hash context's state. And as a nice side effect this also\ngets rid of a bunch of users of `the_hash_algo`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0696ebe9ce533cf3c839c9eb2bd2331c8fa0f014" [label="0696ebe" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:32 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:10 2024 -0800\n\nmeson: generate HTML pages for all man page categories\n\nWhen generating HTML pages for our man pages we only generate them for\ncategory 1 in Meson, which are the pages corresponding to our built-in\ncommands. I cannot tell why I added this filter though: our Makefile\ninstalls all man pages, so a Meson-based build misses out on many of\nthem.\n\nFix this by removing the filter.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"06cd5a066d4063da529f6417cb6ca5678055a807" [label="06cd5a0" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:33 2025 -0800\n\npack-revindex: stop depending on `the_repository`\n\nThere are multiple sites in \"pack-revindex.c\" where we use the global\n`the_repository` variable, either explicitly or implicitly by using\n`the_hash_algo`. In all of those cases we already have a repository\navailable in the calling context though.\n\nRefactor the code to instead use the caller-provided repository and\nremove the `USE_THE_REPOSITORY_VARIABLE` define.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"06d9252bccc39c335fa5ab36adf724df4570248c" [label="06d9252" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:25:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:26:15 2025 -0800\n\ndoc: fix build-docdep.perl\n\nWe renamed from .txt to .adoc all the asciidoc source files and\nnecessary includes.  We also need to adjust the build-docdep tool to\nwork on files whose suffix is .adoc when computing the documentation\ndependencies.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"06e496e5d17b34836797d024be7da6afab914ce4" [label="06e496e" color=gold3 fillcolor=gold3 tooltip="author: Luke Shumaker <lukeshu@datawire.io>\nMon Feb 24 15:27:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:26 2025 -0800\n\nfast-export, fast-import: add support for signed-commits\n\nfast-export has a --signed-tags= option that controls how to handle tag\nsignatures.  However, there is no equivalent for commit signatures; it\njust silently strips the signature out of the commit (analogously to\n--signed-tags=strip).\n\nWhile signatures are generally problematic for fast-export/fast-import\n(because hashes are likely to change), if they're going to support tag\nsignatures, there's no reason to not also support commit signatures.\n\nSo, implement a --signed-commits= option that mirrors the --signed-tags=\noption.\n\nOn the fast-export side, try to be as much like signed-tags as possible,\nin both implementation and in user-interface.  This will change the\ndefault behavior to '--signed-commits=abort' from what is now\n'--signed-commits=strip'.  In order to provide an escape hatch for users\nof third-party tools that call fast-export and do not yet know of the\n--signed-commits= option, add an environment variable\n'FAST_EXPORT_SIGNED_COMMITS_NOABORT=1' that changes the default to\n'--signed-commits=warn-strip'.\n\nSigned-off-by: Luke Shumaker <lukeshu@datawire.io>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"07242c2a5afb2a633feb110b1aa74e2adcc37575" [label="07242c2" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:23 2025 -0800\n\npath: drop `git_common_path()` in favor of `repo_common_path()`\n\nRemove `git_common_path()` in favor of the `repo_common_path()` family\nof functions, which makes the implicit dependency on `the_repository` go\naway.\n\nNote that `git_common_path()` used to return a string allocated via\n`get_pathname()`, which uses a rotating set of statically allocated\nbuffers. Consequently, callers didn't have to free the returned string.\nThe same isn't true for `repo_common_path()`, so we also have to add\nlogic to free the returned strings.\n\nThis refactoring also allows us to remove `repo_common_pathv()` from the\npublic interface.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"072e3aa3a5c29ca1b68a7aaf570a0a8e7ab67127" [label="072e3aa" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:21 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:28 2025 -0800\n\nreftable/record: handle overflows when decoding varints\n\nThe logic to decode varints isn't able to detect integer overflows: as\nlong as the buffer still has more data available, and as long as the\ncurrent byte has its 0x80 bit set, we'll continue to add up these values\nto the result. This will eventually cause the `uint64_t` to overflow, at\nwhich point we'll return an invalid result.\n\nRefactor the function so that it is able to detect such overflows. The\nimplementation is basically copied from Git's own `decode_varint()`,\nwhich already knows to handle overflows. The only adjustment is that we\nalso take into account the string view's length in order to not overrun\nit. The reftable documentation explicitly notes that those two encoding\nschemas are supposed to be the same:\n\nVarint encoding\n^^^^^^^^^^^^^^^\n\nVarint encoding is identical to the ofs-delta encoding method used\nwithin pack files.\n\nDecoder works as follows:\n\n....\nval = buf[ptr] & 0x7f\nwhile (buf[ptr] & 0x80) {\nptr++\nval = ((val + 1) << 7) | (buf[ptr] & 0x7f)\n}\n....\n\nWhile at it, refactor `put_var_int()` in the same way by copying over\nthe implementation of `encode_varint()`. While `put_var_int()` doesn't\nhave an issue with overflows, it generates warnings with -Wsign-compare.\nThe implementation of `encode_varint()` doesn't, is battle-tested and at\nthe same time way simpler than what we currently have.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"07723ff28a6802dc6e9584e99bf362560f12a43f" [label="07723ff" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\n\nMerge branch \'tb/multi-cruft-pack-refresh-fix\' into jch\n\nCertain \"cruft\" objects would have never been refreshed when there\nare multiple cruft packs in the repository, which has been\ncorrected.\n\n* tb/multi-cruft-pack-refresh-fix:\nbuiltin/pack-objects.c: freshen objects from existing cruft packs"]
	"07892da045c51eb97ad77aabe1ae4c34170ab3b4" [label="07892da" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 17 10:56:06 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 18:56:38 2025 -0800\n\nmeson: introduce build option for contrib\n\nWe unconditionally wire up building command completion present in the\n\"contrib/\" directory. This may or may not be what users want, and we\ndon\'t provide a way to disable it.\n\nIntroduce a new \"contrib\" build option. This option is introduced as an\narray so that users can manually pick which exact features they want to\ninclude from the \"contrib\" directory. By default, we build and install\nshell completions, which is a commonly used feature and also the current\ndefault.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"079036d154c003431f45b7bf2341a84351f260f4" [label="079036d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\n\nMerge branch \'ps/reflog-migration-with-logall-fix\' into next\n\nThe \"git refs migrate\" command did not migrate the reflog for\nrefs/stash, which is the contents of the stashes, which has been\ncorrected.\n\n* ps/reflog-migration-with-logall-fix:\nrefs: fix migration of reflogs respecting \"core.logAllRefUpdates\""]
	"07a176cdab7a95f53f9df837b8f3a20583b3772d" [label="07a176c" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: test: Use --patch-{grep,modifies} over -G/-S\n\nLong argument names are easier to read, compared to short ones.  So\nwhile short arguments are great when you want to type a command quickly,\ntests are more readable if we use long argument names.\n\nThere are still test that verify that both short and long arguments work\ninterchangeably when parsing the arguments.\n\nTests where the focus is not on the argument names are updated to use\nlong argument names.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"07c401d3922920c8edb2a1060806f06d9c4850b4" [label="07c401d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:52 2025 -0800\n\nMerge branch \'ps/repack-keep-unreachable-in-unpacked-repo\'\n\n\"git repack --keep-unreachable\" to send unreachable objects to the\nmain pack \"git repack -ad\" produces did not work when there is no\nexisting packs, which has been corrected.\n\n* ps/repack-keep-unreachable-in-unpacked-repo:\nbuiltin/repack: fix `--keep-unreachable` when there are no packs"]
	"08032fa30fefa3101bec4b774e79f4d091b516a6" [label="08032fa" color=gold3 fillcolor=gold3 tooltip="author: ZheNing Hu <adlternative@gmail.com>\nFri Jan 24 08:49:14 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 23:32:28 2025 -0800\n\ngc: add `--expire-to` option\n\nThis commit extends the functionality of `git gc`\nby adding a new option, `--expire-to=<dir>`. Previously,\nthis feature was implemented in 91badeba32 (builtin/repack.c:\nimplement `--expire-to` for storing pruned objects, 2022-10-24),\nwhich allowing users to specify a directory where unreachable\nand expired cruft packs are stored during garbage collection.\nHowever, users had to run `git repack --cruft --expire-to=<dir>`\nfollowed by `git prune` to achieve similar results within `git gc`.\n\nBy introducing `--expire-to=<dir>` directly into `git gc`,\nwe simplify the process for users who wish to manage their\nrepository's cleanup more efficiently. This change involves\npassing the `--expire-to=<dir>` parameter through to `git repack`,\nmaking it easier for users to set up a backup location for cruft\npacks that will be pruned.\n\nDue to the original `git gc --prune=now` deleting all unreachable\nobjects by passing the `-a` parameter to git repack. With the\naddition of the `--cruft` and `--expire-to` options, it is necessary\nto modify this default behavior: instead of deleting these\nunreachable objects, they should be merged into a cruft pack and\ncollected in a specified directory. Therefore, we do not pass `-a`\nto the repack command but instead pass `--cruft`, `--expire-to`,\nand `--cruft-expiration=now` to repack.\n\nSigned-off-by: ZheNing Hu <adlternative@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"083a756ca5e325e15259616bf64e62b49bac6b63" [label="083a756" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\n\nMerge branch 'md/t1403-path-is-file' into jch\n\nTest tweak.\n\n* md/t1403-path-is-file:\nt1403: verify that path exists and is a file"]
	"087740d65a5d28756ecbe56fc3b10328b52e8d33" [label="087740d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 07:17:39 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 20:07:22 2025 -0800\n\nscalar: free result of `remote_default_branch()`\n\nWe don't free the result of `remote_default_branch()`, leading to a\nmemory leak. This leak is exposed by t9211, but only when run with Meson\nwith the `-Db_sanitize=leak` option:\n\nDirect leak of 5 byte(s) in 1 object(s) allocated from:\n#0 0x5555555cfb93 in malloc (scalar+0x7bb93)\n#1 0x5555556b05c2 in do_xmalloc ../wrapper.c:55:8\n#2 0x5555556b06c4 in do_xmallocz ../wrapper.c:89:8\n#3 0x5555556b0656 in xmallocz ../wrapper.c:97:9\n#4 0x5555556b0728 in xmemdupz ../wrapper.c:113:16\n#5 0x5555556b07a7 in xstrndup ../wrapper.c:119:9\n#6 0x5555555d3a4b in remote_default_branch ../scalar.c:338:14\n#7 0x5555555d20e6 in cmd_clone ../scalar.c:493:28\n#8 0x5555555d196b in cmd_main ../scalar.c:992:14\n#9 0x5555557c4059 in main ../common-main.c:64:11\n#10 0x7ffff7a2a1fb in __libc_start_call_main (/nix/store/h7zcxabfxa7v5xdna45y2hplj31ncf8a-glibc-2.40-36/lib/libc.so.6+0x2a1fb) (BuildId: 0a855678aa0cb573cecbb2bcc73ab8239ec472d0)\n#11 0x7ffff7a2a2b8 in __libc_start_main@GLIBC_2.2.5 (/nix/store/h7zcxabfxa7v5xdna45y2hplj31ncf8a-glibc-2.40-36/lib/libc.so.6+0x2a2b8) (BuildId: 0a855678aa0cb573cecbb2bcc73ab8239ec472d0)\n#12 0x555555592054 in _start (scalar+0x3e054)\n\nDEDUP_TOKEN: __interceptor_malloc--do_xmalloc--do_xmallocz--xmallocz--xmemdupz--xstrndup--remote_default_branch--cmd_clone--cmd_main--main--__libc_start_call_main--__libc_start_main@GLIBC_2.2.5--_start\nSUMMARY: LeakSanitizer: 5 byte(s) leaked in 1 allocation(s).\n\nAs the `branch` variable may contain a string constant obtained from\nparsing command line arguments we cannot free the leaking variable\ndirectly. Instead, introduce a new `branch_to_free` variable that only\never gets assigned the allocated string and free that one to plug the\nleak.\n\nIt is unclear why the leak isn't flagged when running the test via our\nMakefile.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"087ac486745129377a04d6921cddeac291c664aa" [label="087ac48" color=gold3 fillcolor=gold3 tooltip="author: Fredrik <fredrik.oljemark@helsinki.fi>\nSat Jan 04 19:29:05 2025 +0100\ncommitter: Peter Krefting <peter@softwolves.pp.se>\nSat Jan 04 22:56:39 2025 +0100\n\nl10n: sv.po, fixed swedish typos\n\nSigned-off-by: Peter Krefting <peter@softwolves.pp.se>"]
	"08bdfd453584e489d5a551aecbdcb77584e1b958" [label="08bdfd4" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:55:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:55:18 2025 -0800\n\nGit 2.49-rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"08ce333d361890714829897e9f3b9fc9ec06eb4f" [label="08ce333" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:11 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:22 2025 -0800\n\napply.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0905ed201a87bc97dc4d47c0cb8fd65316f33269" [label="0905ed2" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:26 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:46 2024 -0800\n\nbuiltin/log: use `size_t` to track indices\n\nSimilar as with the preceding commit, adapt \"builtin/log.c\" so that it\ntracks array indices via `size_t` instead of using signed integers. This\nfixes a couple of -Wsign-compare warnings and prepares the code for\na similar refactoring of `repo_get_merge_bases_many()` in a subsequent\ncommit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"090c455a1db7ab808fbbf172d104e871bf8cdf1c" [label="090c455" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 21:45:19 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 21:45:19 2024 -0800\n\nSync with master"]
	"092180990de06a9be1b3d662c7e46eccceb24bb1" [label=0921809 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\n\nMerge branch \'ad/set-default-target-in-makefiles\'\n\nCorrect the default target in Documentation/Makefile, and\nfuture-proof all Makefiles from similar breakages by declaring the\ndefault target (which happens to be \"all\") upfront.\n\n* ad/set-default-target-in-makefiles:\nMakefile: set default goals in makefiles"]
	"09cbf1597edde2b0200ecbf469c78689c4dcb12f" [label="09cbf15" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:07 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:02 2025 -0800\n\nbuiltin/checkout-index: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/checkout-index.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_checkout_index()` function with `repo`\nset to NULL and then early in the function, `show_usage_with_options_if_asked()`\ncall will give the options help and exit.\n\nPass an instance of \"struct index_state\" available in the calling\ncontext to both `checkout_all()` and `checkout_file()` to remove their\ndependency on the global `the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"09e74b06ea68d4cac8f08b51bf4db2daf1987ae2" [label="09e74b0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\n\nMerge branch \'op/worktree-is-main-bare-fix\'\n\nGoing into a secondary worktree and asking \"is the main worktree\nbare?\" did not work correctly when per-worktree configuration\noption was in use, which has been corrected.\n\n* op/worktree-is-main-bare-fix:\nworktree: detect from secondary worktree if main worktree is bare"]
	"0a78d61247922f30ebf2ce09025dcaa7bd7e3583" [label="0a78d61" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:49 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:05:12 2025 -0800\n\nversion: refactor get_uname_info()\n\nSome code from \"builtin/bugreport.c\" uses uname(2) to get system\ninformation.\n\nLet\'s refactor this code into a new get_uname_info() function, so\nthat we can reuse it in a following commit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0a99ffb4d6645142e68517c59db61b7e58a4f7cc" [label="0a99ffb" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\n\nMerge branch 'ms/remote-valid-remote-name'\n\nCode shuffling.\n\n* ms/remote-valid-remote-name:\nremote: relocate valid_remote_name"]
	"0ad3d656521aa16a6496aa855bbde97160a2b2bc" [label="0ad3d65" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 11:32:23 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:35:50 2024 -0800\n\nobject-file: fix race in object collision check\n\nOne of the tests in t5616 asserts that git-fetch(1) with `--refetch`\ntriggers repository maintenance with the correct set of arguments. This\ntest is flaky and causes us to fail sometimes:\n\n++ git -c protocol.version=0 -c gc.autoPackLimit=0 -c maintenance.incremental-repack.auto=1234 -C pc1 fetch --refetch origin\nerror: unable to open .git/objects/pack/pack-029d08823bd8a8eab510ad6ac75c823cfd3ed31e.pack: No such file or directory\nfatal: unable to rename temporary file to \'.git/objects/pack/pack-029d08823bd8a8eab510ad6ac75c823cfd3ed31e.pack\'\nfatal: could not finish pack-objects to repack local links\nfatal: index-pack failed\nerror: last command exited with $?=128\n\nThe error message is quite confusing as it talks about trying to rename\na temporary packfile. A first hunch would thus be that this packfile\ngets written by git-fetch(1), but removed by git-maintenance(1) while it\nhasn\'t yet been finalized, which shouldn\'t ever happen. And indeed, when\nlooking closer one notices that the file that is supposedly of temporary\nnature does not have the typical `tmp_pack_` prefix.\n\nAs it turns out, the \"unable to rename temporary file\" fatal error is a\nred herring and the real error is \"unable to open\". That error is raised\nby `check_collision()`, which is called by `finalize_object_file()` when\nmoving the new packfile into place. Because t5616 re-fetches objects, we\nend up with the exact same pack as we already have in the repository. So\nwhen the concurrent git-maintenance(1) process rewrites the preexisting\npack and unlinks it exactly at the point in time where git-fetch(1)\nwants to check the old and new packfiles for equality we will see ENOENT\nand thus `check_collision()` returns an error, which gets bubbled up by\n`finalize_object_file()` and is then handled by `rename_tmp_packfile()`.\nThat function does not know about the exact root cause of the error and\ninstead just claims that the rename has failed.\n\nThis race is thus caused by b1b8dfde69 (finalize_object_file():\nimplement collision check, 2024-09-26), where we have newly introduced\nthe collision check.\n\nBy definition, two files cannot collide with each other when one of them\nhas been removed. We can thus trivially fix the issue by ignoring ENOENT\nwhen opening either of the files we\'re about to check for collision.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0b1493c2d49222ce07b73016bb156fecb5999bb9" [label="0b1493c" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:30:26 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:55 2025 -0800\n\ngit_inflate(): skip zlib_post_call() sanity check on Z_NEED_DICT\n\nThis fixes a case where malformed object input can cause us to hit a\nBUG() call in the git-zlib.c code.\n\nThe zlib format allows the use of preset dictionaries to reduce the size\nof deflated data. The checksum of the dictionary is computed by the\ndeflate code and goes into the stream. On the inflating side, zlib sees\nthe dictionary checksum and returns Z_NEED_DICT, asking the caller to\nprovide the dictionary data via inflateSetDictionary().\n\nThis should never happen in Git, because we never provide a dictionary\nfor deflating (and if we get a stream that mentions a dictionary, we\nhave no idea how to provide it). So normally Z_NEED_DICT is a hard error\nfor us. But something interesting happens if we _do_ happen to see it\n(e.g., because of a corrupt or malicious input).\n\nIn git_inflate() as we loop over calls to zlib\'s inflate(), we translate\nbetween our large-integer git_zstream values and zlib\'s native z_stream\ntypes, copying in and out with zlib_pre_call() and zlib_post_call(). In\nzlib_post_call() we have a few sanity checks, including one that checks\nthat the number of bytes consumed by zlib (as measured by it moving the\n\"next_in\" pointer) is equal to the movement of its \"total_in\" count.\n\nBut these do not correspond when we see Z_NEED_DICT! Zlib consumes the\nbytes from the input buffer but it does not increment total_in. And so\nwe hit the BUG(\"total_in mismatch\") call.\n\nThere are a few options here:\n\n- We could ditch that BUG() check. It is making too many assumptions\nabout how zlib updates these values. But it does have value in most\ncases as a sanity check on the values we\'re copying.\n\n- We could skip the zlib_post_call() entirely when we see Z_NEED_DICT.\nWe know that it\'s hard error for us, so we should just send the\nstatus up the stack and let the caller bail.\n\nThe downside is that if we ever did want to support dictionaries,\nwe couldn\'t (the git_zstream will be out of sync, since we never\ncopied its values back from the z_stream).\n\n- We could continue to call zlib_post_call(), but skip just that BUG()\ncheck if the status is Z_NEED_DICT. This keeps git_inflate() as a\nthin wrapper around inflate(), and would let us later support\ndictionaries for some calls if we wanted to.\n\nThis patch uses the third approach. It seems like the least-surprising\nthing to keep git_inflate() a close to inflate() as possible. And while\nit makes the diff a bit larger (since we have to pass the status down to\nto the zlib_post_call() function), it\'s a static local function, and\nevery caller by definition will have just made a zlib call (and so will\nhave a status integer).\n\nCo-authored-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0b432748507a12b92677653104b18834d83cfb10" [label="0b43274" color=gold3 fillcolor=gold3 tooltip="author: M Hickford <mirth.hickford@gmail.com>\nThu Jan 09 23:45:20 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 00:04:15 2025 -0800\n\ncredential-cache: respect authtype capability\n\nPreviously, credential-cache populated authtype regardless whether\n\"get\" request had authtype capability. As documented in\ngit-credential.txt, authtype \"should not be sent unless the appropriate\ncapability ... is provided\".\n\nAdd test. Without this change, the test failed because \"credential fill\"\nprinted an incomplete credential with only protocol and host attributes\n(the unexpected authtype attribute was discarded by credential.c).\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0b4f8afef6b744d5aa92883c5a6c1985be67cc7c" [label="0b4f8af" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 07 16:27:00 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 18:04:18 2025 -0800\n\nreftable/stack: accept insecure random bytes\n\nThe reftable library uses randomness in two call paths:\n\n- When reading a stack in case some of the referenced tables\ndisappears. The randomness is used to delay the next read by a\ncouple of milliseconds.\n\n- When writing a new table, where the randomness gets appended to the\ntable name (e.g. \"0x000000000001-0x000000000002-0b1d8ddf.ref\").\n\nIn neither of these cases do we need strong randomness.\n\nUnfortunately though, we have observed test failures caused by the\nformer case. In t0610 we have a test that spawns a 100 processes at\nonce, all of which try to write a new table to the stack. And given that\nall of the processes will require randomness, it can happen that these\nprocesses make the entropy pool run dry, which will then cause us to\ndie:\n\n+ test_seq 100\n+ printf %s commit\\trefs/heads/branch-%s\\n\n68d032e9edd3481ac96382786ececc37ec28709e 1\n+ printf %s commit\\trefs/heads/branch-%s\\n\n68d032e9edd3481ac96382786ececc37ec28709e 2\n...\n+ git update-ref refs/heads/branch-98 HEAD\n+ git update-ref refs/heads/branch-97 HEAD\n+ git update-ref refs/heads/branch-99 HEAD\n+ git update-ref refs/heads/branch-100 HEAD\nfatal: unable to get random bytes\nfatal: unable to get random bytes\nfatal: unable to get random bytes\nfatal: unable to get random bytes\nfatal: unable to get random bytes\nfatal: unable to get random bytes\nfatal: unable to get random bytes\n\nThe report was for NonStop, which uses OpenSSL as the backend for\nrandomness. In the preceding commit we have adapted that backend to also\nreturn randomness in case the entropy pool is empty and the caller\npasses the `CSPRNG_BYTES_INSECURE` flag. Do so to fix the issue.\n\nReported-by: Randall S. Becker <rsbecker@nexbridge.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0b960a53daa1b336bcec5810f70d8af8ced86ca8" [label="0b960a5" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:51 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:39 2025 -0800\n\ncompat/mingw: split out POSIX-related bits\n\nSplit out POSIX-related bits from \"compat/mingw.h\" and \"compat/msvc.h\".\nThis is in preparation for splitting up \"git-compat-utils.h\" into a\nheader that provides POSIX-compatibility and a header that provides\ncommon wrappers used by the Git project.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0bf8d1b3954920eb6d9304d187af18fea5f318fd" [label="0bf8d1b" color=gold3 fillcolor=gold3 tooltip="author: Peter Oliver <p.d.oliver@mavit.org.uk>\nTue Feb 18 16:30:43 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 17:04:26 2025 -0800\n\nmeson: fix Perl version check for Meson versions before 1.7.0\n\nCommand `perl --version` says, e.g., “This is perl 5, version 26,\nsubversion 0 (v5.26.0)”, which older versions of Meson interpret as\nversion 26.\n\nThis will be fixed in Meson 1.7.0, but at the time of writing that isn’t\nyet released.\n\nIf we run `perl -V:version` we get the unambiguous response\n“version='5.26.0';”, but we need at least Meson 1.5.0 to be able to do that.\n\nNote that Perl are seriously considering dropping the leading 5 entirely\nin the near future (https://perl.github.io/PPCs/ppc0025-perl-version/),\nbut that shouldn’t affect us.\n\nSigned-off-by: Peter Oliver <git@mavit.org.uk>\nCo-authored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0c124cba5435c59591da7c91e16bbd901a518bd4" [label="0c124cb" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:47 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:05:12 2025 -0800\n\nversion: replace manual ASCII checks with isprint() for clarity\n\nSince the isprint() function checks for printable characters, let's\nreplace the existing hardcoded ASCII checks with it. However, since\nthe original checks also handled spaces, we need to account for spaces\nexplicitly in the new check.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0ca6b46d7ca17988da3b7292097e5608be81abad" [label="0ca6b46" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:30 2025 -0800\n\nMerge branch 'jt/gitlab-ci-base-fix'\n\nTwo CI tasks, whitespace check and style check, work on the\ndifference from the base version and the version being checked, but\nthe base was computed incorrectly in GitLab CI in some cases, which\nhas been corrected.\n\n* jt/gitlab-ci-base-fix:\nci: fix base commit fallback for check-whitespace and check-style"]
	"0cb454c0727efc1e7ef3ea23d7d6391a80769118" [label="0cb454c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:00:40 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:00:40 2025 -0800\n\nMerge branch 'ds/path-walk-1' into ds/backfill\n\n* ds/path-walk-1:\npath-walk: drop redundant parse_tree() call\npath-walk: reorder object visits\npath-walk: mark trees and blobs as UNINTERESTING\npath-walk: visit tags and cached objects\npath-walk: allow consumer to specify object types\nt6601: add helper for testing path-walk API\ntest-lib-functions: add test_cmp_sorted\npath-walk: introduce an object walk by path"]
	"0cbcba54550b1ea108e977c24b835e07b96b1c0e" [label="0cbcba5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:05:46 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:05:46 2025 -0800\n\nMerge branch 'tb/unsafe-hash-cleanup' into ps/hash-cleanup\n\n* tb/unsafe-hash-cleanup:\nhash.h: drop unsafe_ function variants\ncsum-file: introduce hashfile_checkpoint_init()\nt/helper/test-hash.c: use unsafe_hash_algo()\ncsum-file.c: use unsafe_hash_algo()\nhash.h: introduce `unsafe_hash_algo()`\ncsum-file.c: extract algop from hashfile_checksum_valid()\ncsum-file: store the hash algorithm as a struct field\nt/helper/test-tool: implement sha1-unsafe helper"]
	"0cc13007e5d50b096c95047680ace56749c18789" [label="0cc1300" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:47 2025 -0800\n\nMerge branch \'bc/doc-adoc-not-txt\'\n\nAll the documentation .txt files have been renamed to .adoc to help\ncontent aware editors.\n\n* bc/doc-adoc-not-txt:\nRemove obsolete \".txt\" extensions for AsciiDoc files\ndoc: use .adoc extension for AsciiDoc files\ngitattributes: mark AsciiDoc files as LF-only\neditorconfig: add .adoc extension\ndoc: update gitignore for .adoc extension"]
	"0d03fda6a5db0b56df7e629ce856d2d38c89a4de" [label="0d03fda" color=gold3 fillcolor=gold3 tooltip="author: Philippe Blain <levraiphilippeblain@gmail.com>\nFri Feb 14 18:36:18 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 14 23:09:36 2025 -0800\n\nconfig/remote.txt: improve wording for 'remote.<name>.followRemoteHEAD'\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0d31bab479820c1536893f6fbc0dbb1ef1637eb0" [label="0d31bab" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:16 2025 -0800\n\nxdiff: avoid signed vs. unsigned comparisons in xdiffi.c\n\nThe loop iteration variable is non-negative and only used in comparisons\nagainst other size_t values.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0d4fe3047f98eaab927964d84ec114bfd504ab0f" [label="0d4fe30" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 19 13:34:30 2025 +0100\ncommitter: Patrick Steinhardt <ps@pks.im>\nThu Feb 20 08:52:07 2025 +0100\n\ngitk: extract script to build executable\n\nExtract the scrip that \"builds\" Gitk from our Makefile so that we can\nreuse it in Meson.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>"]
	"0d6e6f6d2b6f7d3313f21adb477e10fa9578b10b" [label="0d6e6f6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\n\nMerge branch 'tb/refs-exclude-fixes' into jch\n\nThe refname exclusion logic in the packed-ref backend has been\nbroken for some time, which confused upload-pack to advertise\ndifferent set of refs.  This has been corrected.\n\n* tb/refs-exclude-fixes:\nrefs.c: stop matching non-directory prefixes in exclude patterns\nrefs.c: remove empty '--exclude' patterns"]
	"0d885f2101631a09ef10c11cdb9dc1227dfa96e6" [label="0d885f2" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:45 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:04 2025 -0800\n\nconfig: teach repo_config to allow `repo` to be NULL\n\nThe `repo` value can be NULL if a builtin command is run outside\nany repository. The current implementation of `repo_config()` will\nfail if `repo` is NULL.\n\nIf the `repo` is NULL the `repo_config()` can ignore the repository\nconfiguration but it should read the other configuration sources like\nthe system-side configuration instead of failing.\n\nTeach the `repo_config()` to allow `repo` to be NULL by calling the\n`read_very_early_config()` which read config but only enumerate system\nand global settings.\n\nThis will be useful in the following commits.\n\nSuggested-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"0d97b85b106a06c0c2838b62ae163ba389228703" [label="0d97b85" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:30 2025 -0800\n\nMerge branch \'jc/doc-attr-tree\' into seen\n\nMake sure that \"git --attr-source=X\", GIT_ATTR_SOURCE, and\nattr.tree configuration variables appear at the same places in the\ndocumentation.\n\n* jc/doc-attr-tree:\ndoc: give attr.tree a bit more visibility"]
	"0f3d8e2e46baf16358cd2989580ef708820a35f6" [label="0f3d8e2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Jan 18 00:42:58 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 18 00:42:58 2025 -0800\n\nMerge branch 'kn/reflog-migration-fix' into kn/reflog-migration-fix-followup\n\n* kn/reflog-migration-fix:\nreftable: write correct max_update_index to header"]
	"0fbe93b36c05bbf4156c157f27998938ce312265" [label="0fbe93b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\n\nMerge branch 'jc/doc-boolean-synonyms'\n\nDoc updates.\n\n* jc/doc-boolean-synonyms:\ndoc: centrally document various ways tospell `true` and `false`"]
	"106140a99fbdb7acf19723473621e0ccaa03c158" [label="106140a" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:02 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:46:30 2024 -0800\n\nbuiltin/fast-import: fix segfault with unsafe SHA1 backend\n\nSame as with the preceding commit, git-fast-import(1) is using the safe\nvariant to initialize a hashfile checkpoint. This leads to a segfault\nwhen passing the checkpoint into the hashfile subsystem because it would\nuse the unsafe variants instead:\n\n++ git --git-dir=R/.git fast-import --big-file-threshold=1\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==577126==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000040 (pc 0x7ffff7a01a99 bp 0x5070000009c0 sp 0x7fffffff5b30 T0)\n==577126==The signal is caused by a READ memory access.\n==577126==Hint: address points to the zero page.\n#0 0x7ffff7a01a99 in EVP_MD_CTX_copy_ex (/nix/store/h1ydpxkw9qhjdxjpic1pdc2nirggyy6f-openssl-3.3.2/lib/libcrypto.so.3+0x201a99) (BuildId: 41746a580d39075fc85e8c8065b6c07fb34e97d4)\n#1 0x555555ddde56 in openssl_SHA1_Clone ../sha1/openssl.h:40:2\n#2 0x555555dce2fc in git_hash_sha1_clone_unsafe ../object-file.c:123:2\n#3 0x555555c2d5f8 in hashfile_checkpoint ../csum-file.c:211:2\n#4 0x5555559647d1 in stream_blob ../builtin/fast-import.c:1110:2\n#5 0x55555596247b in parse_and_store_blob ../builtin/fast-import.c:2031:3\n#6 0x555555967f91 in file_change_m ../builtin/fast-import.c:2408:5\n#7 0x55555595d8a2 in parse_new_commit ../builtin/fast-import.c:2768:4\n#8 0x55555595bb7a in cmd_fast_import ../builtin/fast-import.c:3614:4\n#9 0x555555b1f493 in run_builtin ../git.c:480:11\n#10 0x555555b1bfef in handle_builtin ../git.c:740:9\n#11 0x555555b1e6f4 in run_argv ../git.c:807:4\n#12 0x555555b1b87a in cmd_main ../git.c:947:19\n#13 0x5555561649e6 in main ../common-main.c:64:11\n#14 0x7ffff742a1fb in __libc_start_call_main (/nix/store/65h17wjrrlsj2rj540igylrx7fqcd6vq-glibc-2.40-36/lib/libc.so.6+0x2a1fb) (BuildId: bf320110569c8ec2425e9a0c5e4eb7e97f1fb6e4)\n#15 0x7ffff742a2b8 in __libc_start_main@GLIBC_2.2.5 (/nix/store/65h17wjrrlsj2rj540igylrx7fqcd6vq-glibc-2.40-36/lib/libc.so.6+0x2a2b8) (BuildId: bf320110569c8ec2425e9a0c5e4eb7e97f1fb6e4)\n#16 0x555555772c84 in _start (git+0x21ec84)\n\n==577126==Register values:\nrax = 0x0000511000000cc0  rbx = 0x0000000000000000  rcx = 0x000000000000000c  rdx = 0x0000000000000000\nrdi = 0x0000000000000000  rsi = 0x00005070000009c0  rbp = 0x00005070000009c0  rsp = 0x00007fffffff5b30\nr8 = 0x0000000000000000   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x00007ffff7a01a30\nr12 = 0x0000000000000000  r13 = 0x00007fffffff6b60  r14 = 0x00007ffff7ffd000  r15 = 0x00005555563b9910\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/nix/store/h1ydpxkw9qhjdxjpic1pdc2nirggyy6f-openssl-3.3.2/lib/libcrypto.so.3+0x201a99) (BuildId: 41746a580d39075fc85e8c8065b6c07fb34e97d4) in EVP_MD_CTX_copy_ex\n==577126==ABORTING\n./test-lib.sh: line 1039: 577126 Aborted                 git --git-dir=R/.git fast-import --big-file-threshold=1 < input\nerror: last command exited with $?=134\nnot ok 167 - R: blob bigger than threshold\n\nThe segfault is only exposed in case the unsafe and safe backends are\ndifferent from one another.\n\nFix the issue by initializing the context with the unsafe SHA1 variant.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"107940684107a87d0ac58cf071fe1399621f30f3" [label=1079406 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:56 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:33 2025 -0800\n\npack-write: stop depending on `the_repository` and `the_hash_algo`\n\nThere are a couple of functions in \"pack-write.c\" that implicitly depend\non `the_repository` or `the_hash_algo`. Remove this dependency by\ninjecting the repository via a parameter and adapt callers accordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"107d8893032ef5b4e6216377752f0ac1d17a0615" [label="107d889" color=gold3 fillcolor=gold3 tooltip="author: Mahendra Dani <danimahendra0904@gmail.com>\nTue Mar 04 12:27:28 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:13:54 2025 -0800\n\nt1403: verify that path exists and is a file\n\nVerify that if the path exists then it is a file using test_path_is_file().\n\nSigned-off-by: Mahendra Dani <danimahendra0904@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"10b9e8227ba16077c96bdf1bca1d6d65e9eb7929" [label="10b9e82" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:20:27 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:20:27 2024 -0800\n\nMerge branch 'as/gitk-git-gui-repo-update' into next\n\n* as/gitk-git-gui-repo-update:\nUpdate the official repo of gitk"]
	"10e8a9352bcc7b21a64e0b321f302cf900ac8c77" [label="10e8a93" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Mar 06 16:34:53 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:11:05 2025 -0800\n\nrefs.c: stop matching non-directory prefixes in exclude patterns\n\nIn the packed-refs backend, our implementation of \'--exclude\' (dating\nback to 59c35fac54 (refs/packed-backend.c: implement jump lists to avoid\nexcluded pattern(s), 2023-07-10)) considers, for example:\n\n$ git for-each-ref --exclude=refs/heads/ba\n\nto exclude \"refs/heads/bar\", \"refs/heads/baz\", and so on.\n\nThe files backend, which does not implement \'--exclude\' (and relies on\nthe caller to cull out results that don\'t match) naturally will\nenumerate \"refs/heads/bar\" and so on.\n\nSo in the above example, \'for-each-ref\' will try and see if\n\"refs/heads/ba\" matches \"refs/heads/bar\" (since the files backend simply\nenumerated every loose reference), and, realizing that it does not\nmatch, output the reference as expected. (A caller that did want to\nexclude \"refs/heads/bar\" and \"refs/heads/baz\" might instead run \"git\nfor-each-ref --exclude=\'refs/heads/ba*\'\").\n\nThis can lead to strange behavior, like seeing a different set of\nreferences advertised via \'upload-pack\' depending on what set of\nreferences were loose versus packed.\n\nSo there is a subtle bug with \'--exclude\' which is that in the\npacked-refs backend we will consider \"refs/heads/bar\" to be a pattern\nmatch against \"refs/heads/ba\" when we shouldn\'t. Likewise, the reftable\nbackend (which in this case is bug-compatible with the packed backend)\nexhibits the same broken behavior.\n\nThere are a few ways to fix this. One is to tighten the rules in\ncmp_record_to_refname(), which is used to determine the start/end-points\nof the jump list used by the packed backend. In this new \"strict\" mode,\nthe comparison function would handle the case where we\'ve reached the\nend of the pattern by introducing a new check like so:\n\nwhile (1) {\nif (*r1 == \'\\n\')\nreturn *r2 ? -1 : 0;\nif (!*r2)\nif (strict && *r1 != \'/\')        /* <- here */\nreturn 1;\nreturn start ? 1 : -1;\nif (*r1 != *r2)\nreturn (unsigned char)*r1 < (unsigned char)*r2 ? -1 : +1;\nr1++;\nr2++;\n}\n\n(eliding out the rest of cmp_record_to_refname()). Equivalently, we\ncould teach refs/packed-backend::populate_excluded_jump_list() to append\na trailing \'/\' if one does not already exist, forcing an exclude pattern\nlike \"refs/heads/ba\" to only match \"refs/heads/ba/abc\" and so forth.\n\nBut since the same problem exists in reftable, we can fix both at once\nby performing this pre-processing step one layer up in refs.c at the\ncommon entrypoint for the two, which is \'refs_ref_iterator_begin()\'.\n\nSince that solution is both the simplest and only requires modification\nin one spot, let\'s normalize exclude patterns so that they end with a\ntrailing slash. This causes us to unify the behavior between all three\nbackends.\n\nThere is some minor test fallout in the \"overlapping excluded regions\"\ntest, which happens to use \'refs/ba\' as an exclude pattern, and expects\nreferences under the \"refs/heads/bar/*\" and \"refs/heads/baz/*\"\nhierarchies to be excluded from the results.\n\nBut that test fallout is expected, because the test was codifying the\nbuggy behavior to begin with, and should have never been written that\nway. Split that into its own test (since the range is no longer\noverlapping under the stricter interpretation of --exclude patterns\npresented here). Create a new test which does have overlapping\nregions by using a refs/heads/bar/4/... hierarchy and excluding both\n\"refs/heads/bar\" and \"refs/heads/bar/4\".\n\nReported-by: SURA <surak8806@gmail.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"10f2935c7f2070368dadde582f94c9c76e2fe991" [label="10f2935" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:48 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:38 2025 -0800\n\nreftable/stack: stop using `sleep_millisec()`\n\nRefactor our use of `sleep_millisec()` by open-coding it with poll(3p),\nwhich is the current implementation of this function. Ideally, we'd use\na more direct way to sleep, but there is no equivalent to sleep(3p) that\nwould accept milliseconds as input.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"10fd0e120317de28002e510d6becc049b81b851f" [label="10fd0e1" color=gold3 fillcolor=gold3 tooltip="author: Arkadii Yakovets <ark@cho.red>\nSun Jan 05 04:26:33 2025 -0800\ncommitter: Arkadii Yakovets <ark@cho.red>\nSun Jan 05 04:26:33 2025 -0800\n\ngpgsig -----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTcV2aUhsmPY1GGe+aox6bwimZDVgUCZ3n7/QAKCRCox6bwimZD\nVnFIAPwIp6CgJcyOjcXj0CofVWWv24QmXNNA8nJu8vpz6c41EwD9GdNj0PWZPFww\nsySfiATzpjpC8bCspI6RMiztytjqQwE=\n=KnPy\n-----END PGP SIGNATURE-----\nl10n: uk: v2.48 update\n\nCo-authored-by: Kate Golovanova <kate@kgthreads.com>\nSigned-off-by: Arkadii Yakovets <ark@cho.red>\nSigned-off-by: Kate Golovanova <kate@kgthreads.com>"]
	"111a9d51d2671abe05352698e3d8cf1454cd9332" [label="111a9d5" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:44:11 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:44:11 2025 +0800\n\nMerge branch 'tl/zh_CN_2.48.0_rnd' of github.com:dyrone/git\n\n* 'tl/zh_CN_2.48.0_rnd' of github.com:dyrone/git:\nl10n: zh_CN: updated translation for 2.48"]
	"115458a58b29dbc22318fc81bff4e7c091040e3b" [label="115458a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 17:22:56 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 17:22:56 2025 -0800\n\nMerge branch \'ps/build-meson-html\' into next\n\nThe build procedure based on meson learned to generate HTML\ndocumention pages.\n\n* ps/build-meson-html:\nDocumentation: wire up sanity checks for Meson\nt/Makefile: make \"check-meson\" work with Dash\nmeson: install static files for HTML documentation\nmeson: generate articles\nDocumentation: refactor \"howto-index.sh\" for out-of-tree builds\nDocumentation: refactor \"api-index.sh\" for out-of-tree builds\nmeson: generate user manual\nDocumentation: inline user-manual.conf\nmeson: generate HTML pages for all man page categories\nmeson: fix generation of merge tools\nmeson: properly wire up dependencies for our docs\nmeson: wire up support for AsciiDoctor"]
	"12068bd4de03c7769f50cd8321f792477692d0ea" [label="12068bd" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:08 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:49 2024 -0800\n\nmeson: add missing dots for build options\n\nMost of our Meson build options end with a trailing dot, but those for\nour SHA1 and SHA256 backends don't. Add it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"123929bd4276504d953fb4c8be2773f46612ac30" [label="123929b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\n\nMerge branch 'kn/reflog-symref-fix' into next\n\nreflog entries for symbolic ref updates were broken, which has been\ncorrected.\n\n* kn/reflog-symref-fix:\nrefs: fix creation of reflog entries for symrefs"]
	"12ad6b8feaf9dbbe8f040ce8620700cae793708b" [label="12ad6b8" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nMon Feb 03 07:29:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:56 2025 -0800\n\nt5548: refactor to reuse setup_upstream() function\n\nRefactor the function setup_upstream_and_workbench(), extracting\ncreate_upstream_template() and setup_upstream() from it. The former is\nused to create the upstream repository template, while the latter is\nused to rebuild the upstream repository and will be reused in subsequent\ncommits.\n\nTo ensure that setup_upstream() works properly in both local and HTTP\nprotocols, the HTTP settings have been moved to the setup_upstream() and\nsetup_upstream_and_workbench() functions.\n\nSigned-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"12bcb4d4d017d50979e168d537d05dc698ebeeee" [label="12bcb4d" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:44:49 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:44:49 2025 +0800\n\nMerge branch 'l10n-de-2.48' of github.com:ralfth/git\n\n* 'l10n-de-2.48' of github.com:ralfth/git:\nl10n: Update German translation"]
	"13b2e7ed634ec3333cbed99312f620b2aedec0d6" [label="13b2e7e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 14 18:59:28 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 14 18:59:28 2025 -0800\n\nWhat's cooking (2025/01 #04)"]
	"13b67f15c13d2e45215da8950f31ef27645733c3" [label="13b67f1" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:17 2025 -0800\n\nxdiff: avoid signed vs. unsigned comparisons in xpatience.c\n\nThe loop iteration variable is non-negative and used in comparisons\nagainst a size_t value. Use size_t to eliminate the mismatch.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"13cb20fc4634029762e80d2858e081b0691ff50f" [label="13cb20f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:52 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:34 2025 -0800\n\nmeson: fix compilation with Visual Studio\n\nThe Visual Studio compiler defaults to C89 unless explicitly asked to\nuse a different version of the C standard. We don\'t specify any C\nstandard at all though in our Meson build, and consequently compiling\nGit fails:\n\n...\\git\\git-compat-util.h(14): fatal error C1189: #error:  \"Required C99 support is in a test phase.  Please see git-compat-util.h for more details.\"\n\nFix the issue by specifying the project\'s C standard. Funny enough,\nspecifying C99 does not work because apparently, `__STDC_VERSION__` is\nnot getting defined in that version at all. Instead, we have to specify\nC11 as the project\'s C standard, which is also done in our CMake build\ninstructions.\n\nWe don\'t want to generally enforce C11 though, as our requiremets only\nstate that a C99 compiler is required. In fact, we don\'t even require\nplain C99, but rather the GNU variant thereof.\n\nMeson allows us to handle this case rather easily by specifying\n\"gnu99,c11\", which will cause it to fall back to C11 in case GNU C99 is\nunsupported. This feature has only been introduced with Meson 1.3.0\nthough, and we support 0.61.0 and newer. In case we use such an oldish\nversion though we fall back to requiring GNU99 unconditionally. This\nmeans that Windows essentially requires Meson 1.3.0 and newer when using\nVisual Studio, but I doubt that this is ever going to be a real problem.\n\nTested-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"140e9b7c57cf7ce63d434c530df953553bf4628e" [label="140e9b7" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:02 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: prevent finding sed(1) in a loop\n\nWe're searching for the sed(1) executable in a loop, which will make us\ntry to find it multiple times. Starting with the preceding commit we\nalready declare a variable for that program in the top-level build file.\nUse it so that we only need to search for the program once.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"14650065b76b28d3cfa9453356ac5669b19e706e" [label=1465006 color=gold3 fillcolor=gold3 tooltip="author: Kristoffer Haugsbakk <code@khaugsbakk.name>\nTue Jan 07 18:37:06 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 19:46:18 2025 -0800\n\nRelNotes/2.48.0: fix typos etc.\n\nCorrect verb tense, add missing words, avoid double blank lines,\nand rephrase things that don’t read well to me like “Turn this linkage\nto relative paths”.\n\nSigned-off-by: Kristoffer Haugsbakk <code@khaugsbakk.name>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"149585079facfbdb5713bb8852caea2068cd4f28" [label=1495850 color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Feb 25 11:10:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:31:23 2025 -0800\n\nt/unit-tests: convert oidtree test to use clar test framework\n\nAdapt oidtree test script to clar framework by using clar assertions\nwhere necessary. `cl_parse_any_oid()` ensures the hash algorithm is set\nbefore parsing. This prevents issues from an uninitialized or invalid\nhash algorithm.\n\nIntroduce 'test_oidtree__initialize` handles the to set up of the global\noidtree variable and `test_oidtree__cleanup` frees the oidtree when all\ntests are completed.\n\nWith this change, `check_each` stops at the first error encountered,\nmaking it easier to address it.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"14ddc393b17e80036485f69495006b18716c1863" [label="14ddc39" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nSat Feb 01 00:30:15 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 18:24:42 2025 -0800\n\nci: set CI_JOB_IMAGE for coverity job\n\nThe main GitHub Actions workflow switched away from the \"$distro\"\nvariable in b133d3071a (github: simplify computation of the job\'s\ndistro, 2025-01-10). Since the Coverity job also depends on our\nci/install-dependencies.sh script, it needs to likewise set CI_JOB_IMAGE\nto find the correct dependencies (without this patch, we don\'t install\ncurl and the build fails).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"150c31bf88ee3021a51c0482279c7ccac68b0e0e" [label="150c31b" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 17:24:17 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:36:40 2025 -0800\n\nt0001: remove duplicate test\n\nThe test in question is an exact copy of the testcase preceding it.\nRemove it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"15341c8499a71502089bf6644d7a6a980824d5e3" [label="15341c8" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:34:24 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:34:24 2025 +0800\n\nMerge branch 'l10n/zh-TW/2024-12-17' of github.com:l10n-tw/git-po\n\n* 'l10n/zh-TW/2024-12-17' of github.com:l10n-tw/git-po:\nl10n: zh_TW: Git 2.48 round 2\nl10n: zh_TW: Git 2.48"]
	"1568d1562eecc31d2062b6d22e37ec03fc3d6747" [label="1568d15" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 07 16:26:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 18:04:18 2025 -0800\n\nwrapper: allow generating insecure random bytes\n\nThe `csprng_bytes()` function generates randomness and writes it into a\ncaller-provided buffer. It abstracts over a couple of implementations,\nwhere the exact one that is used depends on the platform.\n\nThese implementations have different guarantees: while some guarantee to\nnever fail (arc4random(3)), others may fail. There are two significant\nfailures to distinguish from one another:\n\n- Systemic failure, where e.g. opening \"/dev/urandom\" fails or when\nOpenSSL doesn\'t have a provider configured.\n\n- Entropy failure, where the entropy pool is exhausted, and thus the\nfunction cannot guarantee strong cryptographic randomness.\n\nWhile we cannot do anything about the former, the latter failure can be\nacceptable in some situations where we don\'t care whether or not the\nrandomness can be predicted.\n\nIntroduce a new `CSPRNG_BYTES_INSECURE` flag that allows callers to opt\ninto weak cryptographic randomness. The exact behaviour of the flag\ndepends on the underlying implementation:\n\n- `arc4random_buf()` never returns an error, so it doesn\'t change.\n\n- `getrandom()` pulls from \"/dev/urandom\" by default, which never\nblocks on modern systems even when the entropy pool is empty.\n\n- `getentropy()` seems to block when there is not enough randomness\navailable, and there is no way of changing that behaviour.\n\n- `GtlGenRandom()` doesn\'t mention anything about its specific\nfailure mode.\n\n- The fallback reads from \"/dev/urandom\", which also returns bytes in\ncase the entropy pool is drained in modern Linux systems.\n\nThat only leaves OpenSSL with `RAND_bytes()`, which returns an error in\ncase the returned data wouldn\'t be cryptographically safe. This function\nis replaced with a call to `RAND_pseudo_bytes()`, which can indicate\nwhether or not the returned data is cryptographically secure via its\nreturn value. If it is insecure, and if the `CSPRNG_BYTES_INSECURE` flag\nis set, then we ignore the insecurity and return the data regardless.\n\nIt is somewhat questionable whether we really need the flag in the first\nplace, or whether we wouldn\'t just ignore the potentially-insecure data.\nBut the risk of doing that is that we might have or grow callsites that\naren\'t aware of the potential insecureness of the data in places where\nit really matters. So using a flag to opt-in to that behaviour feels\nlike the more secure choice.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"15c6383f8035fc902bedfef8b79084d2af2492db" [label="15c6383" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 20:54:03 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 20:54:03 2025 -0800\n\nWhat's cooking (2025/02 #03)"]
	"15db9a895d36a29eac2061ec31eba5e9628b4a5b" [label="15db9a8" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:29 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:26 2025 -0800\n\ntrace2/tr2_sysenv.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"15ff206863a77e3396f5a1e1ed4910b7b70c9f8d" [label="15ff206" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:51 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:05:13 2025 -0800\n\nt5701: add setup test to remove side-effect dependency\n\nCurrently, the \"test capability advertisement\" test creates some files\nwith expected content which are used by other tests below it.\n\nTo remove that side-effect from this test, let\'s split up part of\nit into a \"setup\"-type test which creates the files with expected content\nwhich gets reused by multiple tests. This will be useful in a following\ncommit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"163109072c24eb2fc0333364708908f0917bc519" [label=1631090 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:10 2025 -0800\n\nMerge branch 'sk/unit-tests-0130' into next\n\nConvert a handful of unit tests to work with the clar framework.\n\n* sk/unit-tests-0130:\nt/unit-tests: convert strcmp-offset test to use clar test framework\nt/unit-tests: convert strbuf test to use clar test framework\nt/unit-tests: adapt example decorate test to use clar test framework\nt/unit-tests: convert hashmap test to use clar test framework"]
	"163a3e97ac12f52217ac24922dad5eb814af291b" [label="163a3e9" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:56 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: simplify use of the common-main library\n\nThe \"common-main.c\" file is used by multiple executables. In order to\nmake it easy to set it up we have created a separate library that these\nexecutables can link against. All of these executables also want to link\nagainst `libgit.a` though, which makes it necessary to specify both of\nthese as dependencies for every executable.\n\nSimplify this a bit by declaring the library as a source dependency:\ninstead of creating a static library, we now instead compile the common\nset of files into each executable separately.\n\nThis change surfaces an issue when linking aliases for git-remote-http:\nwe extract all objects from `git-remote-http` et al and then link them\ninto the new executable. As such, these objects would already contain\na `main()` function. But now that we also compile \"common-main.c\" into\nthese aliased executables we see a linker error due to `main()` being\ndefined twice. We fix this by only linking against `libgit.a`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"164a2516eb622fdf032ce526ec97e79a53bf2893" [label="164a251" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Jan 07 08:08:31 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:18:15 2025 -0800\n\ntest-lib: add a few comments to LSan log checking\n\nCommit b119a687d4 (test-lib: ignore leaks in the sanitizer's thread\ncode, 2025-01-01) added code to suppress a false positive in the leak\nchecker. But if you're just reading the code, the obscure grep call is a\nbit of a head-scratcher. Let's add a brief comment explaining what's\ngoing on (and anybody digging further can find this commit or that one\nfor all the details).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"168d449ef4f97ecdf65aadae2649630fc1fa67eb" [label="168d449" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:48 2025 -0800\n\nMerge branch 'po/meson-perl-fix' into next\n\nUpgrade the minimum Perl version enforced by meson-based build to\nmatch what Makefile-based build uses.\n\n* po/meson-perl-fix:\nmeson: fix Perl version check for Meson versions before 1.7.0\nmeson: bump minimum required Perl version to 5.26.0"]
	"169ee10209f7a46e2aebf802c5f4c3f5bff4443d" [label="169ee10" color=gold3 fillcolor=gold3 tooltip="author: Luke Shumaker <lukeshu@datawire.io>\nMon Feb 24 15:27:42 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:25 2025 -0800\n\ngit-fast-export.txt: clarify why 'verbatim' may not be a good idea\n\nSigned-off-by: Luke Shumaker <lukeshu@datawire.io>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"16b2e579f91cddb672bc63612d516d65c8be0a7c" [label="16b2e57" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\n\nMerge branch 'rs/clear-commit-marks-optim'\n\nA micro-optimization.\n\n* rs/clear-commit-marks-optim:\ncommit: avoid parent list buildup in clear_commit_marks_many()"]
	"16c89dcf80b742276d927b99fe28dbcde1469417" [label="16c89dc" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:20 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:36 2025 -0800\n\nmeson: prevent finding sed(1) in a loop\n\nWe're searching for the sed(1) executable in a loop, which will make us\ntry to find it multiple times. Starting with the preceding commit we\nalready declare a variable for that program in the top-level build file.\nUse it so that we only need to search for the program once.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"16d9c40febe65a9b095fa22aebf1c19011967e28" [label="16d9c40" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ncompletion: Support --patch-{grep,modifies}\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1773f2a2ff8b122452da2c1a080abadd92d3d4a6" [label="1773f2a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:32 2025 -0800\n\nMerge branch 'rs/clear-commit-marks-optim' into next\n\nA micro-optimization.\n\n* rs/clear-commit-marks-optim:\ncommit: avoid parent list buildup in clear_commit_marks_many()"]
	"1782abd7734acffb8ebc37b74e120fd4c4b9c4cc" [label="1782abd" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 16 22:35:49 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:02 2025 -0800\n\nparse-options: add show_usage_with_options_if_asked()\n\nMany commands call usage_with_options() when they are asked to give\nthe help message, but it sends the help text to the standard error\nstream.  When the user asked for it with \"git cmd -h\", the help\nmessage is the primary output from the command, hence we should send\nit to the standard output stream, instead.\n\nIntroduce a helper function that captures the common pattern\n\nif (argc == 2 && !strcmp(argv[1], \"-h\"))\nusage_with_options(usage, options);\n\nand replaces it with\n\nshow_usage_with_options_if_asked(argc, argv, usage, options);\n\nto help correct code paths.\n\nNote that this helper function still exits with status 129, and\nt0012 insists on it.  After converting all the mistaken callers of\nusage_with_options() to call this new helper, we may want to address\nit---the end user is asking us to give the help text, and we are\ndoing exactly as asked, so there is no reason to exit with non-zero\nstatus.\n\nSuggested-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"18a7e19846ee186d60dbf7c2c865ac1d1aa531c4" [label="18a7e19" color=gold3 fillcolor=gold3 tooltip="author: James J. Raden <james.raden@gmail.com>\nThu Jan 21 18:07:47 2016 -0500\ncommitter: Johannes Schindelin <johannes.schindelin@gmx.de>\nSat Jan 11 18:17:42 2025 +0100\n\ngitk: make the \"list references\" default window width wider\n\nWhen using remotes (with git-flow especially), the remote reference names\nare almost always wordwrapped in the \"list references\" window because it\'s\nsomewhat narrow by default. It\'s possible to resize it with a mouse,\nbut it\'s annoying to have to do this every time, especially on Windows 10,\nwhere the window border seems to be only one (1) pixel wide, thus making\nthe grabbing of the window border tricky.\n\nSigned-off-by: James J. Raden <james.raden@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>"]
	"191f0c8db22267cab55472961524c70a1d692025" [label="191f0c8" color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nMon Jan 13 18:13:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 20:48:43 2025 -0800\n\nobject-name: be more strict in parsing describe-like output\n\nFrom Documentation/revisions.txt:\n'<describeOutput>', e.g. 'v1.7.4.2-679-g3bee7fb'::\nOutput from `git describe`; i.e. a closest tag, optionally\nfollowed by a dash and a number of commits, followed by a dash, a\n'g', and an abbreviated object name.\nwhich means that output of the format\n${REFNAME}-${INTEGER}-g${HASH}\nshould parse to fully expanded ${HASH}.  This is fine.  However, we\ncurrently don't validate any of ${REFNAME}-${INTEGER}, we only parse\n-g${HASH} and assume the rest is valid.  That is problematic, since it\nbreaks things like\n\ngit cat-file -p branchname:path/to/file/named/i-gaffed\n\nwhich, when commit (or tree or blob) affed exists, will not return us\ninformation about the file we are looking for but will instead\nerroneously tell us about object affed.\n\nA few additional notes:\n- This is a slight backward incompatibility break, because we used\nto allow ${GARBAGE}-g${HASH} as a way to spell ${HASH}.  However,\na backward incompatible break is necessary, because there is no\nother way for someone to be more specific and disambiguate that they\nwant the blob master:path/to/who-gabbed instead of the object abbed.\n- There is a possibility that check_refname_format() rules change in\nthe future.  However, we can only realistically loosen the rules\nfor what that function accepts rather than tighten.  If we were to\ntighten the rules, some real world repositories may already have\nrefnames that suddenly become unacceptable and we break those\nrepositories.  As such, any describe-like syntax of the form\n${VALID_FOR_A_REFNAME}-${INTEGER}-g${HASH} that is valid with the\nchanges in this commit will remain valid in the future.\n- The fact that check_refname_format() rules could loosen in the\nfuture is probably also an important reason to make this change.  If\nthe rules loosen, there might be additional cases within\n${GARBAGE}-g${HASH} that become ambiguous in the future.  While\nabbreviated hashes can be disambiguated by abbreviating less, it may\nwell be that these alternative object names have no way of being\ndisambiguated (much like pathnames cannot be).  Accepting all random\n${GARBAGE} thus makes it difficult for us to allow future\nextensions to object naming.\n\nSo, tighten up the parsing to make sure ${REFNAME} and ${INTEGER} are\npresent in the string, and would be considered a valid ref and\nnon-negative integer.\n\nAlso, add a few tests for git describe using object names of the form\n${REVISION_NAME}${MODIFIERS}\nsince an early version of this patch failed on constructs like\ngit describe v2.48.0-rc2-161-g6c2274cdbc^0\n\nReported-by: Gabriel Amaral <gabriel-amaral@github.com>\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1a18bf3a5b251557a7b10a496f9036f00790086a" [label="1a18bf3" color=gold3 fillcolor=gold3 tooltip="author: Emir SARI <emir_sari@icloud.com>\nWed Dec 18 17:10:42 2024 +0300\ncommitter: Emir SARI <emir_sari@icloud.com>\nWed Jan 01 13:29:51 2025 +0300\n\ngpgsig -----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS7iCJwEpsv8CSEb6DV5yC8v3gHsgUCZ3U1RAAKCRDV5yC8v3gH\nsnkpAQDelYNrW+FIWAxBoWzTiXllcJOfFocFAvz0scN4342m7wD/QmJrv54N33R8\nDCNtNG52PHxmRdRi8y8GfzDHXeJ1cgA=\n=H7Dy\n-----END PGP SIGNATURE-----\nl10n: tr: Update Turkish translations for 2.48\n\nSigned-off-by: Emir SARI <emir_sari@icloud.com>"]
	"1aabec0b484f4f073defb343dfdcdac601a26adc" [label="1aabec0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:01 2025 -0800\n\nMerge branch \'dk/test-aggregate-results-paste-fix\'\n\nThe use of \"paste\" command for aggregating the test results have\nbeen corrected.\n\n* dk/test-aggregate-results-paste-fix:\nt/aggregate-results: fix paste(1) invocation"]
	"1ab5948141e62b52bcb812b04a901b3efaf1b578" [label="1ab5948" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:27 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:46 2024 -0800\n\nbuiltin/log: fix remaining -Wsign-compare warnings\n\nFix remaining -Wsign-compare warnings in \"builtin/log.c\" and mark the\nfile as -Wsign-compare-clean. While most of the fixes are obvious, one\nfix requires us to use `cast_size_t_to_int()`, which will cause us to\ndie in case the `size_t` cannot be represented as `int`. This should be\nfine though, as the data would typically be set either via a config key\nor via the command line, neither of which should ever exceed a couple of\nkilobytes of data.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1b0e5f4499a0c099d99b00a2a6a3edb45ae98660" [label="1b0e5f4" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 18 17:24:36 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:52:39 2025 -0800\n\nmerge-tree: remove redundant code\n\nreal_merge() only ever returns \"0\" or \"1\" as it dies if the merge status\nis less than zero. Therefore the check for \"result < 0\" is redundant and\nthe result variable is not needed. The return value of real_merge() is\nignored because exit status of \"git merge-tree --stdin\" is \"0\" for both\nsuccessful and conflicted merges (the status of each merge is written to\nstdout). The return type of real_merge() is not changed as it is used\nfor the program\'s exit status when \"--stdin\" is not given.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1b0fc3be4253a69878b6ea6687cb867091bf59ae" [label="1b0fc3b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:17 2025 -0800\n\nMerge branch 'kn/reflog-migration-fix-followup' into next\n\nCode clean-up.\n\n* kn/reflog-migration-fix-followup:\nreftable: prevent 'update_index' changes after adding records\nrefs: use 'uint64_t' for 'ref_update.index'\nrefs: mark `ref_transaction_update_reflog()` as static"]
	"1b4e9a5f8b5f048972c21fe8acafe0404096f694" [label="1b4e9a5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:37:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:37:08 2025 -0800\n\nMerge branch \'ps/build-meson-html\'\n\nThe build procedure based on meson learned to generate HTML\ndocumention pages.\n\n* ps/build-meson-html:\nDocumentation: wire up sanity checks for Meson\nt/Makefile: make \"check-meson\" work with Dash\nmeson: install static files for HTML documentation\nmeson: generate articles\nDocumentation: refactor \"howto-index.sh\" for out-of-tree builds\nDocumentation: refactor \"api-index.sh\" for out-of-tree builds\nmeson: generate user manual\nDocumentation: inline user-manual.conf\nmeson: generate HTML pages for all man page categories\nmeson: fix generation of merge tools\nmeson: properly wire up dependencies for our docs\nmeson: wire up support for AsciiDoctor"]
	"1bc1ab6ecc2b71eecec0671746d85bf7036037e8" [label="1bc1ab6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:21:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:21:01 2025 -0800\n\nSync with 'master'"]
	"1c14b1aedec6e9307e0c73276b8c1c283413ea41" [label="1c14b1a" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:03 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:01 2025 -0800\n\nbuiltin/send-pack: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/send-pack.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_send_pack()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1c6acfa379f80b1228c996532c93a8277eba9b5e" [label="1c6acfa" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:55 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:32 2025 -0800\n\nobject: stop depending on `the_repository`\n\nThere are a couple of functions exposed by \"object.c\" that implicitly\ndepend on `the_repository`. Remove this dependency by injecting the\nrepository via a parameter. Adapt callers accordingly by simply using\n`the_repository`, except in cases where the subsystem is already free of\nthe repository. In that case, we instead pass the repository provided by\nthe caller\'s context.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1ca727f230d83db20952f8ae7ce2f1749d744334" [label="1ca727f" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSun Feb 23 09:26:04 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:51:18 2025 -0800\n\ncommit: avoid parent list buildup in clear_commit_marks_many()\n\nclear_commit_marks_1() clears the marks of the first parent and its\nfirst parent and so on, and saves the higher numbered parents in a list\nfor later.  There is no benefit in keeping that list growing with each\nhandled commit.  Clear it after each run to reduce peak memory usage.\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1cb2f293f5a594fd5dee8400213bd2f395fbd2bf" [label="1cb2f29" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:34:21 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:25:49 2025 -0800\n\nunpack_loose_rest(): rewrite return handling for clarity\n\nWe have a pattern like:\n\nif (error1)\n...handle error 1...\nelse if (error2)\n...handle error 2...\nelse\n...return buf...\n...free buf and return NULL...\n\nThis is a little subtle because it is the return in the success block\nthat lets us skip the common error handling. Rewrite this instead to\nfree the buffer in each error path, marking it as NULL, and then all\ncode paths can use the common return.\n\nThis should make the logic a bit easier to follow. It does mean\nduplicating the buf cleanup for errors, but it's a single line.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1cee22ebff9621c849afa8d766d7627b291ec9d0" [label="1cee22e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:03 2025 -0800\n\nmeson: wire up credential helpers\n\nWe\'ve got a couple of credential helpers in \"contrib/credential\", all\nof which aren\'t yet wired up via Meson. Do so.\n\nNote that ideally, we\'d also wire up t0303 to be executed with each of\nthe credential helpers to verify their functionality. Unfortunately\nthough, none of them pass the test suite right now, so this is left for\na future change.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1d04a76669ba5d04fc25afc09850d541c427d5c7" [label="1d04a76" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:21 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:21 2025 -0800\n\nMerge branch \'cc/signed-fast-export-import\' into jch\n\n\"git fast-export | git fast-import\" learns to deal with commit and\ntag objects with embedded signatures a bit better.\n\n* cc/signed-fast-export-import:\nfast-export, fast-import: add support for signed-commits\nfast-export: do not modify memory from get_commit_buffer\ngit-fast-export.txt: clarify why \'verbatim\' may not be a good idea\nfast-export: rename --signed-tags=\'warn\' to \'warn-verbatim\'\nfast-export: fix missing whitespace after switch\ngit-fast-import.adoc: add missing LF in the BNF"]
	"1d3743f005324d61fd3635c9bc3963caef3aad4e" [label="1d3743f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:01:59 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:00 2025 -0800\n\nMerge branch 'ds/path-walk-1' into next\n\nIntroduce a new API to visit objects in batches based on a common\npath, or by type.\n\n* ds/path-walk-1:\npath-walk: drop redundant parse_tree() call"]
	"1d4db69ce0785ff83cfa0336749127da4509381d" [label="1d4db69" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:46:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:46:27 2025 -0800\n\nMerge branch 'mh/doc-windows-home-env' into next\n\nDoc update.\n\n* mh/doc-windows-home-env:\ngit.txt: fix heading line of tildes"]
	"1d584ee42d368be2b9599562ee3d1d4c8cac4018" [label="1d584ee" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:14 2025 -0800\n\nMerge branch 'jk/t7407-use-test-grep' into next\n\nTest clean-up.\n\n* jk/t7407-use-test-grep:\nt7407: use test_grep"]
	"1dca492eddf4f45cbeac4c7a0d77553211489593" [label="1dca492" color=gold3 fillcolor=gold3 tooltip="author: Sam James <sam@gentoo.org>\nTue Jan 14 15:47:10 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 14 20:17:35 2025 -0800\n\nmeson: fix missing deps for technical articles\n\nWe need an explicit `depends: documentation_deps` so that all of our\nDocumentation targets know they require asciidoc.conf. This shows up\nas parallel build failures with it not yet being available.\n\nOther targets look OK already.\n\nSigned-off-by: Sam James <sam@gentoo.org>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1de40edade52ee1d3deb225ed4719978d7fcf47e" [label="1de40ed" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:15 2025 -0800\n\nMerge branch 'ps/the-repository' into next\n\nMore code paths have a repository passed through the callchain,\ninstead of assuming the primary the_repository object.\n\n* ps/the-repository:\nmatch-trees: stop using `the_repository`\ngraph: stop using `the_repository`\nadd-interactive: stop using `the_repository`\ntmp-objdir: stop using `the_repository`\nresolve-undo: stop using `the_repository`\ncredential: stop using `the_repository`\nmailinfo: stop using `the_repository`\ndiagnose: stop using `the_repository`\nserver-info: stop using `the_repository`\nsend-pack: stop using `the_repository`\nserve: stop using `the_repository`\ntrace: stop using `the_repository`\npager: stop using `the_repository`\nprogress: stop using `the_repository`"]
	"1e72e889e722af06c2bd17b92becbc123c3b84c5" [label="1e72e88" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <derrickstolee@github.com>\nMon Feb 03 18:11:04 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:41 2025 -0800\n\nbackfill: basic functionality and tests\n\nThe default behavior of 'git backfill' is to fetch all missing blobs that\nare reachable from HEAD. Document and test this behavior.\n\nThe implementation is a very simple use of the path-walk API, initializing\nthe revision walk at HEAD to start the path-walk from all commits reachable\nfrom HEAD. Ignore the object arrays that correspond to tree entries,\nassuming that they are all present already.\n\nThe path-walk API provides lists of objects in batches according to a\ncommon path, but that list could be very small. We want to balance the\nnumber of requests to the server with the ability to have the process\ninterrupted with minimal repeated work to catch up in the next run.\nBased on some experiments (detailed in the next change) a minimum batch\nsize of 50,000 is selected for the default.\n\nThis batch size is a _minimum_. As the path-walk API emits lists of blob\nIDs, they are collected into a list of objects for a request to the\nserver. When that list is at least the minimum batch size, then the\nrequest is sent to the server for the new objects. However, the list of\nblob IDs from the path-walk API could be much longer than the batch\nsize. At this moment, it is unclear if there is a benefit to split the\nlist when there are too many objects at the same path.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1e781209284eb5952e153339f45bf0c1555e78bb" [label="1e78120" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Dec 28 10:49:38 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 17:00:45 2024 -0800\n\nt-reftable-merged: handle realloc errors\n\nCheck reallocation errors in unit tests, like everywhere else.\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1ecb7c7c9c817c334f4b39253cb1df8fd1d9523d" [label="1ecb7c7" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\n\nMerge branch \'sc/help-autocorrect-one\' into next\n\n\"[help] autocorrect = 1\" used to be a way to say \"please wait for\n0.1 second after suggesting a typofix of the command name before\nrunning that command\"; now it means \"yes, if there is a plausible\ntypofix for the command name, please run it immediately\".\n\n* sc/help-autocorrect-one:\nhelp: interpret boolean string values for help.autocorrect"]
	"1f010d6bdf756129db13d1367c888aa4153f6d87" [label="1f010d6" color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Jan 20 02:56:02 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:56:06 2025 -0800\n\ndoc: use .adoc extension for AsciiDoc files\n\nWe presently use the \".txt\" extension for our AsciiDoc files.  While not\nwrong, most editors do not associate this extension with AsciiDoc,\nmeaning that contributors don\'t get automatic editor functionality that\ncould be useful, such as syntax highlighting and prose linting.\n\nIt is much more common to use the \".adoc\" extension for AsciiDoc files,\nsince this helps editors automatically detect files and also allows\nvarious forges to provide rich (HTML-like) rendering.  Let\'s do that\nhere, renaming all of the files and updating the includes where\nrelevant.  Adjust the various build scripts and makefiles to use the new\nextension as well.\n\nNote that this should not result in any user-visible changes to the\ndocumentation.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1f054af72f509f1247687b91a360961b5d930869" [label="1f054af" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:30 2025 -0800\n\nreftable/blocksource: adjust type of the block length\n\nThe block length is used to track the number of bytes available in a\nspecific block. As such, it is never set to a negative value, but is\nstill represented by a signed integer.\n\nAdjust the type of the variable to be `size_t`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"1f124f30244654fdf3e87efe1b70948fbfeab4b0" [label="1f124f3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:35 2025 -0800\n\nMerge branch \'kn/reflog-migration-fix-fix\'\n\nFix bugs in an earlier attempt to fix \"git refs migration\".\n\n* kn/reflog-migration-fix-fix:\nrefs/reftable: fix uninitialized memory access of `max_index`\nreftable: write correct max_update_index to header"]
	"1fa37a06082584d4087937467ad3f3b0f0f31905" [label="1fa37a0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:23:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:23:29 2025 -0800\n\nMerge branch 'mh/doc-windows-home-env'\n\nDocfix.\n\n* mh/doc-windows-home-env:\ngit.txt: fix heading line of tildes"]
	"1fbb8d7ecb7bd78ac55d226b6b073372a5ea2c2d" [label="1fbb8d7" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:26:17 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 15:56:54 2025 -0800\n\nbuiltin/blame: fix out-of-bounds read with excessive `--abbrev`\n\nIn 6411a0a896 (builtin/blame: fix type of `length` variable when\nemitting object ID, 2024-12-06) we have fixed the type of the `length`\nvariable. In order to avoid a cast from `size_t` to `int` in the call to\nprintf(3p) with the \"%.*s\" formatter we have converted the code to\ninstead use fwrite(3p), which accepts the length as a `size_t`.\n\nIt was reported though that this makes us read over the end of the OID\narray when the provided `--abbrev=` length exceeds the length of the\nobject ID. This is because fwrite(3p) of course doesn\'t stop when it\nsees a NUL byte, whereas printf(3p) does.\n\nFix the bug by reverting back to printf(3p) and culling the provided\nlength to `GIT_MAX_HEXSZ` to keep it from overflowing when cast to an\n`int`.\n\nReported-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"202d97e6a8b42bb5b9fb218a2823dc9334bd7842" [label="202d97e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:37 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:38 2025 -0800\n\nrefs/files: batch refname availability checks for normal transactions\n\nSame as the \"reftable\" backend that we have adapted in the preceding\ncommit to use batched refname availability checks we can also do so for\nthe \"files\" backend. Things are a bit more intricate here though, as we\ncall `refs_verify_refname_available()` in a set of different contexts:\n\n1. `lock_raw_ref()` when it hits either EEXISTS or EISDIR when creating\na new reference, mostly to create a nice, user-readable error\nmessage. This is nothing we have to care about too much, as we only\nhit this code path at most once when we hit a conflict.\n\n2. `lock_raw_ref()` when it _could_ create the lockfile to check\nwhether it is conflicting with any packed refs. In the general case,\nthis code path will be hit once for every (successful) reference\nupdate.\n\n3. `lock_ref_oid_basic()`, but it is only executed when copying or\nrenaming references or when expiring reflogs. It will thus not be\ncalled in contexts where we have many references queued up.\n\n4. `refs_refname_ref_available()`, but again only when copying or\nrenaming references. It is thus not interesting due to the same\nreason as the previous case.\n\n5. `files_transaction_finish_initial()`, which is only executed when\ncreating a new repository or migrating references.\n\nSo out of these, only (2) and (5) are viable candidates to use the\nbatched checks.\n\nAdapt `lock_raw_ref()` accordingly by queueing up reference names that\nneed to be checked for availability and then checking them after we have\nprocessed all updates. This check is done before we (optionally) lock\nthe `packed-refs` file, which is somewhat flawed because it means that\nthe `packed-refs` could still change after the availability check and\nthus create an undetected conflict. But unconditionally locking the file\nwould change semantics that users are likely to rely on, so we keep the\ncurrent locking sequence intact, even if it\'s suboptmial.\n\nThe refactoring of `files_transaction_finish_initial()` will be done in\nthe next commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2069f4865c39ed7017d66df693937600eaa8fa2b" [label="2069f48" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:22 2025 -0800\n\nMerge branch 'en/doc-renormalize' into next\n\nDoc updates.\n\n* en/doc-renormalize:\ndoc: clarify the intent of the renormalize option in the merge machinery"]
	"20bc2023784191fecf708c40bc48d377ac85f7f0" [label="20bc202" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:18 2025 -0800\n\nMerge branch 'jp/t8002-printf-fix' into next\n\nTest fix.\n\n* jp/t8002-printf-fix:\nt8002: fix ambiguous printf conversion specifications"]
	"2105064b10758c9032b94112276e8d3eb5718a2f" [label=2105064 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSun Jan 19 14:23:08 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:42:55 2025 -0800\n\nbswap.h: squelch potential sparse -Wcast-truncate warnings\n\nIn put_be32(), we right-shift a uint32_t value various amounts and then\nassign the low 8-bits to individual \"unsigned char\" bytes, throwing away\nthe high bits. For shifts smaller than 24 bits, those thrown away bits\nwill be arbitrary bits from the original uint32_t.\n\nThis works exactly as we want, but if you feed a constant, then sparse\ncomplains. For example if we write this (which we plan to do in a future\npatch):\n\nput_be32(hdr, PACK_SIGNATURE);\n\nthen \"make sparse\" produces:\n\ncompat/bswap.h:175:22: error: cast truncates bits from constant value (5041 becomes 41)\ncompat/bswap.h:176:22: error: cast truncates bits from constant value (504143 becomes 43)\ncompat/bswap.h:177:22: error: cast truncates bits from constant value (5041434b becomes 4b)\n\nAnd the same issue exists in the other put_be*() functions, when used\nwith a constant.\n\nWe can silence this warning by explicitly masking off the truncated\nbits. The compiler is smart enough to know the result is the same, and\nthe asm generated by gcc (with both -O0 and -O2) is identical.\n\nCuriously this line already exists:\n\nput_be32(&hdr_version, INDEX_EXTENSION_VERSION2);\n\nin the fsmonitor.c file, but it does not get flagged because the CPP\nmacro expands to a small integer (2).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"211cb0a2fad2a9a4236d6768aabd764b3350a3c6" [label="211cb0a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\n\n### match next"]
	"2196ecadc4142e7f7f07ea9176571bbd7c6076f1" [label="2196eca" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:59 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:59 2025 -0800\n\nMerge branch \'jc/show-index-h-update\' into next\n\nDoc and short-help text for \"show-index\" has been clarified to\nstress that the command reads its data from the standard input.\n\n* jc/show-index-h-update:\nshow-index: the short help should say the command reads from its input"]
	"219877e46581872adb47141cf85371f174f484ac" [label="219877e" color=gold3 fillcolor=gold3 tooltip="author: Eric Ju <eric.peijian@gmail.com>\nFri Feb 21 20:04:43 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:10 2025 -0800\n\ncat-file: add declaration of variable i inside its for loop\n\nSome code used in this series declares variable i and only uses it\nin a for loop, not in any other logic outside the loop.\n\nChange the declaration of i to be inside the for loop for readability.\nWhile at it, we also change its type from \"int\" to \"size_t\" where the latter makes more sense.\n\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Eric Ju <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"21d81b4f098f55e9a390af3cdece79f81fe14a12" [label="21d81b4" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\n\nMerge branch \'ad/set-default-target-in-makefiles\' into next\n\nCorrect the default target in Documentation/Makefile, and\nfuture-proof all Makefiles from similar breakages by declaring the\ndefault target (which happens to be \"all\") upfront.\n\n* ad/set-default-target-in-makefiles:\nMakefile: set default goals in makefiles"]
	"21e1b4486586d3a15d2d7bf0479e77636359b816" [label="21e1b44" color=gold3 fillcolor=gold3 tooltip="author: Adam Johnson <me@adamj.eu>\nThu Jan 09 00:35:23 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 17:46:53 2025 -0800\n\ndifftool docs: restore correct position of tool list\n\n2a9dfdf260 (difftool docs: de-duplicate configuration sections, 2022-09-07)\nmoved the difftool documentation, but missed moving this \"include\" line that\nincludes the generated list of diff tools, as referenced in the moved text.\n\nRestore the correct position of the included list.\n\nSigned-off-by: Adam Johnson <me@adamj.eu>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"22fab08fb88f4d8a4ddf1bd7a28dda13311dd26f" [label="22fab08" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\n\nMerge branch 'pw/build-meson-technical-and-howto-docs'\n\nMeson-based build procedure forgot to build some docs, which has\nbeen corrected.\n\n* pw/build-meson-technical-and-howto-docs:\nmeson: fix building technical and howto docs"]
	"230d022fe3ba67465e867ac1fa4da3bcf0d31630" [label="230d022" color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 05:05:55 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:51:41 2025 -0800\n\nrefspec: relocate refname_matches_negative_refspec_item\n\nMove the functions `refname_matches_negative_refspec_item()`,\n`refspec_match()`, and `match_name_with_pattern()` from `remote.c` to\n`refspec.c`. These functions focus on refspec matching, so placing them\nin `refspec.c` aligns with the separation of concerns. Keep\nrefspec-related logic in `refspec.c` and remote-specific logic in\n`remote.c` for better code organization.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2329b6b461d8290f4706658ff080a888b74e9aef" [label="2329b6b" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Feb 03 07:29:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:56 2025 -0800\n\nt5548: add new porcelain test cases\n\nAdd two more test cases exercising git-push(1) with `--procelain`, one\nexercising a non-atomic and one exercising an atomic push.\n\nBased-on-patch-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"233d48f5de1d6cdba0eb64165212dfbf6fa444d7" [label="233d48f" color=gold3 fillcolor=gold3 tooltip="author: Bence Ferdinandy <bence@ferdinandy.com>\nSun Jan 05 17:09:40 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 15:50:03 2025 -0800\n\nfetch: fix erroneous set_head advice message\n\n9e2b7005be (fetch set_head: add warn-if-not-$branch option, 2024-12-05)\ntried to expand the advice message for set_head with the new option, but\nunfortunately did not manage to add the right incantation. Fix the\nadvice message with the correct usage of warn-if-not-$branch.\n\nReported-by: Teng Long <dyroneteng@gmail.com>\nSigned-off-by: Bence Ferdinandy <bence@ferdinandy.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"235fe77c2990ca6762ad9146105915987acf956d" [label="235fe77" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 16:49:52 2025 -0800\n\nci: fix propagating UTF-8 test locale in musl-based Meson job\n\nThe musl-based Meson job is supposed to explicitly specify the UTF-8\nlocale used for testing, which has been introduced with 84bb5eeace7 (ci:\nswitch linux-musl to use Meson, 2025-01-28). That commit had two issues\nthough:\n\n- We continue to refer to \"linux-musl\", even though the job has been\nrenamed in the same commit to \"linux-musl-meson\".\n\n- We use the wrong option name to specify the locale. This was not\nnoticed though due to the first issue.\n\nFix both of these issues by fixing both the job and option naems.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"238c0c095f21f919fd268d8519d6b1b07ffc1540" [label="238c0c0" color=gold3 fillcolor=gold3 tooltip="author: Bagas Sanjaya <bagasdotme@gmail.com>\nWed Dec 18 08:16:48 2024 +0700\ncommitter: Bagas Sanjaya <bagasdotme@gmail.com>\nMon Jan 06 09:55:13 2025 +0700\n\nl10n: po-id for 2.48\n\nUpdate following components:\n\n* advice.c\n* archive.c\n* builtin/checkout.c\n* builtin/clone.c\n* builtin/config.c\n* builtin/describe.c\n* builtin/fetch.c\n* builtin/gc.c\n* builtin/index-pack.c\n* builtin/notes.c\n* builtin/pack-objects.c\n* builtin/remote.c\n* builtin/worktree.c\n* commit.c\n* fetch-pack.c\n* hook.c\n* object-name.c\n* refs.c\n* refs/files-backend.c\n* remote.c\n* worktree.c\n\nTranslate following new components:\n\n* cache-tree.c\n* daemon.c\n* merge-ll.c\n\nSigned-off-by: Bagas Sanjaya <bagasdotme@gmail.com>"]
	"238c8d3984fc38d10a257c0972f142793ae5af96" [label="238c8d3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\n\nMerge branch 'lo/doc-merge-submodule-update'\n\nWhat happens to submodules during merge has been documented in a\nbit more detail.\n\n* lo/doc-merge-submodule-update:\nmerge-strategies.adoc: detail submodule merge"]
	"24027256aa9614a445563707a72af7ce5ff49b5b" [label=2402725 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 21:25:30 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 21:25:30 2024 -0800\n\nsign-compare: avoid comparing ptrdiff with an int/unsigned\n\nInstead, offset the base pointer with integer and compare it with\nthe other pointer.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"246569bf83f2a586268d26559c7d6ea54c9316b6" [label="246569b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:31 2025 -0800\n\nMerge branch 'ps/hash-cleanup'\n\nFurther code clean-up on the use of hash functions.  Now the\ncontext object knows what hash function it is working with.\n\n* ps/hash-cleanup:\nglobal: adapt callers to use generic hash context helpers\nhash: provide generic wrappers to update hash contexts\nhash: stop typedeffing the hash context\nhash: convert hashing context to a structure"]
	"24e11756a0368777d2820ed7a6dd8687b669895b" [label="24e1175" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:38 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:38 2025 -0800\n\nrefs/files: batch refname availability checks for initial transactions\n\nThe \"files\" backend explicitly carves out special logic for its initial\ntransaction so that it can avoid writing out every single reference as\na loose reference. While the assumption is that there shouldn\'t be any\npreexisting references, we still have to verify that none of the newly\nwritten references will conflict with any other new reference in the\nsame transaction.\n\nRefactor the initial transaction to use batched refname availability\nchecks. This does not yet have an effect on performance as we still call\n`refs_verify_refname_available()` in a loop. But this will change in\nsubsequent commits and then impact performance when cloning a repository\nwith many references or when migrating references to the \"files\" format.\n\nThis will improve performance when cloning a repository with many\nreferences or when migrating references from any format to the \"files\"\nformat once the availability checks have learned to optimize checks for\nmany references in a subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"24eae7eaeb8b3461eda6ad97ceb6356100cae25c" [label="24eae7e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\n\nMerge branch 'tc/zlib-ng-fix' into jch\n\n* tc/zlib-ng-fix:\nhelp: print zlib-ng version number\nhelp: include git-zlib.h to print zlib version"]
	"255136f4c1ed0ad7e2bd0c9123096af8d836b71d" [label="255136f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:16 2025 -0800\n\nMerge branch \'jt/diff-pairs\' into jch\n\nA post-processing filter for \"diff --raw\" output has been\nintroduced.\n\n* jt/diff-pairs:\nbuiltin/diff-pairs: allow explicit diff queue flush\nbuiltin: introduce diff-pairs command\ndiff: add option to skip resolving diff statuses\ndiff: return diff_filepair from diff queue helpers"]
	"25c618bf37b6285c8beb0e7b6c9fa2aa4dbae5fb" [label="25c618b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\n\nMerge branch \'op/worktree-is-main-bare-fix\' into next\n\nGoing into a secondary worktree and asking \"is the main worktree\nbare?\" did not work correctly when per-worktree configuration\noption was in use, which has been corrected.\n\n* op/worktree-is-main-bare-fix:\nworktree: detect from secondary worktree if main worktree is bare"]
	"27be76b230b07360b64aec06d6b0b9bc9e993603" [label="27be76b" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Mar 06 16:34:48 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:11:04 2025 -0800\n\nrefs.c: remove empty \'--exclude\' patterns\n\nIn 59c35fac54 (refs/packed-backend.c: implement jump lists to avoid\nexcluded pattern(s), 2023-07-10), the packed-refs backend learned how to\nconstruct \"jump lists\" to avoid enumerating sections of the packed-refs\nfile that we know the caller is going to throw out anyway.\n\nThis process works by finding the start- and end-points (that is, where\nin the packed-refs file corresponds to the range we\'re going to ignore)\nfor each exclude pattern, then constructing a jump list based on that.\nAt enumeration time we\'ll consult the jump list to skip past everything\nin the range(s) found in the previous step, saving time when excluding a\nlarge portion of references.\n\nBut when there is a --exclude pattern which is just the empty string,\nthe behavior is a little funky. When we try and exclude the empty\nstring, the matched range covers the entire packed-refs file, meaning\nthat we won\'t output any packed references. But the empty pattern\ndoesn\'t actually match any references to begin with! For example, on my\ncopy of git.git I can do:\n\n$ git for-each-ref \'\' | wc -l\n0\n\nSo \"git for-each-ref --exclude=\'\'\" shouldn\'t actually remove anything\nfrom the output, and ought to be equivalent to \"git for-each-ref\". But\nit\'s not, and in fact:\n\n$ git for-each-ref | wc -l\n2229\n$ git for-each-ref --exclude=\'\' | wc -l\n480\n\nBut why does the \'--exclude\' version output only some of the references\nin the repository? Here\'s a hint:\n\n$ find .git/refs -type f | wc -l\n480\n\nIndeed, because the files backend doesn\'t implement[^1] the same jump\nlist concept as the packed backend we get the correct result for the\nloose references, but none of the packed references.\n\nSince the empty string exclude pattern doesn\'t match anything, we can\ndiscard them before the packed-refs backend has a chance to even see it\n(and likewise for reftable, which also implements a similar concept\nsince 1869525066 (refs/reftable: wire up support for exclude patterns,\n2024-09-16)).\n\nThis approach (copying only some of the patterns into a strvec at the\nrefs.c layer) may seem heavy-handed, but it\'s setting us up to fix\nanother bug in the following commit where the fix will involve modifying\nthe incoming patterns.\n\n[^1]: As noted in 59c35fac54. We technically could avoid opening and\nenumerating the contents of, for e.g., \"$GIT_DIR/refs/heads/foo/\" if\nwe knew that we were excluding anything under the \'refs/heads/foo\'\nhierarchy. But the --exclude stuff is all best-effort anyway, since\nthe caller is expected to cull out any results that they don\'t want.\n\nNoticed-by: Jeff King <peff@peff.net>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"27e8960037289dc10e6f659b424c66bfb07146b5" [label="27e8960" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:22 2025 -0800\n\ngit-compat-util: drop `z_const` define\n\nBefore including <zlib.h> we explicitly define `z_const` to an empty\nvalue. This has the effect that the `z_const` macro in \"zconf.h\" itself\nwill remain empty instead of being defined as `const`, which effectively\nadapts a couple of APIs so that their parameters are not marked as being\nconstants.\n\nIt is dubious though whether this is something we actually want: not\nmarking a parameter as a constant doesn\'t make it any less constant than\nit was. The define was added via 07564773c2 (compat: auto-detect if zlib\nhas uncompress2(), 2022-01-24), where it was seemingly carried over from\nour internal compatibility shim for `uncompress2()` that was removed in\nthe preceding commit. The commit message doesn\'t mention why we carry\nover the define and make it public, either, and I cannot think of any\nreason for why we would want to have it.\n\nDrop the define.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"28911f7dcad1ccc6ac4f6939036de76bb4f4c09b" [label="28911f7" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:50 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:33 2025 -0800\n\nmeson: wire up fuzzers\n\nMeson does not yet know to build our fuzzers. Introduce a new build\noption \"fuzzers\" and wire up the fuzzers in case it is enabled. Adapt\nour CI jobs so that they build the fuzzers by default.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"294673a17e818d8a29c8d23b0922855734e1925d" [label="294673a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\n\nMerge branch \'ak/instaweb-python-port-binding-fix\'\n\nThe \"instaweb\" bound only to local IP address without \"--local\" and\nto all addresses with \"--local\", which was the other way around, when\nusing Python\'s http.server class, which has been corrected.\n\n* ak/instaweb-python-port-binding-fix:\ninstaweb: fix ip binding for the python http.server"]
	"2962899aa01f25457bbc204d2cc407ff5c0ca12d" [label=2962899 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:37 2025 -0800\n\nrefs: introduce function to batch refname availability checks\n\nThe `refs_verify_refname_available()` functions checks whether a\nreference update can be committed or whether it would conflict with\neither a prefix or suffix thereof. This function needs to be called once\nper reference that one wants to check, which requires us to redo a\ncouple of checks every time the function is called.\n\nIntroduce a new function `refs_verify_refnames_available()` that does\nthe same, but for a list of references. For now, the new function uses\nthe exact same implementation, except that we loop through all refnames\nprovided by the caller. This will be tuned in subsequent commits.\n\nThe existing `refs_verify_refname_available()` function is reimplemented\non top of the new function. As such, the diff is best viewed with the\n`--ignore-space-change option`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"296cf82f93b4b04ac5af71dc00fbf91526bf3d2d" [label="296cf82" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\n\nMerge branch \'ps/reflog-migration-with-logall-fix\'\n\nThe \"git refs migrate\" command did not migrate the reflog for\nrefs/stash, which is the contents of the stashes, which has been\ncorrected.\n\n* ps/reflog-migration-with-logall-fix:\nrefs: fix migration of reflogs respecting \"core.logAllRefUpdates\""]
	"29f656c46551209ed9e817ac9ac9cdb958207049" [label="29f656c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 02:44:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 02:44:10 2025 -0800\n\nWhat's cooking (2025/02 #07)"]
	"2a137451012657aa06d702c5b01c06c15ddae17a" [label="2a13745" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nWed Jan 15 21:23:48 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 23:43:36 2025 -0800\n\ndoc: migrate git-commit manpage secondary files to new format\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2a1530a953cc4d2ae62416db86c545c7ccb73ace" [label="2a1530a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:00:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:00:45 2025 -0800\n\nMerge branch \'ps/meson-contrib-bits\' into tz/doc-txt-to-adoc-fixes\n\n* ps/meson-contrib-bits:\nci: exercise credential helpers\nci: fix propagating UTF-8 test locale in musl-based Meson job\nmeson: wire up static analysis via Coccinelle\nmeson: wire up git-contacts(1)\nmeson: wire up credential helpers\ncontrib/credential: fix compilation of \"osxkeychain\" helper\ncontrib/credential: fix compiling \"libsecret\" helper\ncontrib/credential: fix compilation of wincred helper with MSVC\ncontrib/credential: fix \"netrc\" tests with out-of-tree builds\nGIT-BUILD-OPTIONS: propagate project\'s source directory"]
	"2a21098b98ae2f9581a91e2e474c397e5cbede12" [label="2a21098" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:31:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:37 2025 -0800\n\ngithub: adapt containerized jobs to be rootless\n\nThe containerized jobs in GitHub Actions run as root, giving them\nspecial permissions to for example delete files even when the user\nshouldn't be able to due to file permissions. This limitation keeps us\nfrom using containerized jobs for most of our Ubuntu-based jobs as it\ncauses a number of tests to fail.\n\nAdapt the jobs to create a separate user that executes the test suite.\nThis follows similar infrastructure that we already have in GitLab CI.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2a8bd34c5576e02fed38d85dc5c90ffb9d4ecfb3" [label="2a8bd34" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:30 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:09 2024 -0800\n\nmeson: properly wire up dependencies for our docs\n\nA couple of Meson documentation targets use `meson.current_source_dir()`\nto resolve inputs. This has the downside that it does not automagically\nmake Meson track these inputs as a dependency. After all, string\narguments really can be anything, even if they happen to match an actual\nfilesystem path.\n\nAdapt these build targets to instead use inputs.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2b1e0f8cd5058c7e0b85760e54706b9e74cb4766" [label="2b1e0f8" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nFri Mar 07 15:18:08 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 21:23:30 2025 -0800\n\nhelp: print zlib-ng version number\n\nWhen building against zlib-ng, the header file `zlib.h` is not included,\nbut `zlib-ng.h` is included instead. It's `zlib.h` that defines\n`ZLIB_VERSION` and that macro is used to print out zlib version in\n`git-version(1)` with `--build-options`. But when it's not defined, no\nversion is printed.\n\n`zlib-ng.h` defines another macro: `ZLIBNG_VERSION`. Use that macro to\nprint the zlib-ng version in `git version --build-options` when it's\nset. Otherwise fallback to `ZLIB_VERSION`.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nHelped-by: Patrick Steinhardt <ps@pks.im>\nReviewed-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2b4ef0d5c0421decc96d16671be3cd9d3d3709ab" [label="2b4ef0d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:39 2025 -0800\n\nrefs/iterator: provide infrastructure to re-seek iterators\n\nReftable iterators need to be scrapped after they have either been\nexhausted or aren't useful to the caller anymore, and it is explicitly\nnot possible to reuse them for iterations. But enabling for reuse of\niterators may allow us to tune them by reusing internal state of an\niterator. The reftable iterators for example can already be reused\ninternally, but we're not able to expose this to any users outside of\nthe reftable backend.\n\nIntroduce a new `.seek` function in the ref iterator vtable that allows\ncallers to seek an iterator multiple times. It is expected to be\nfunctionally the same as calling `refs_ref_iterator_begin()` with a\ndifferent (or the same) prefix.\n\nNote that it is not possible to adjust parameters other than the seeked\nprefix for now, so exclude patterns, trimmed prefixes and flags will\nremain unchanged. We do not have a usecase for changing these parameters\nright now, but if we ever find one we can adapt accordingly.\n\nImplement the callback for trivial cases. The other iterators will be\nimplemented in subsequent commits.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2bf3c7fab19a59cde3a3dda9398075f0fe8d57c1" [label="2bf3c7f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:44 2025 -0800\n\nMerge branch \'ps/ci-misc-updates\'\n\nCI updates (containerization, dropping stale ones, etc.).\n\n* ps/ci-misc-updates:\nci: remove stale code for Azure Pipelines\nci: use latest Ubuntu release\nci: stop special-casing for Ubuntu 16.04\ngitlab-ci: add linux32 job testing against i386\ngitlab-ci: remove the \"linux-old\" job\ngithub: simplify computation of the job\'s distro\ngithub: convert all Linux jobs to be containerized\ngithub: adapt containerized jobs to be rootless\nt7422: fix flaky test caused by buffered stdout\nt0060: fix EBUSY in MinGW when setting up runtime prefix"]
	"2c374ea4bb47c84f80f905df3a00b7d724386a28" [label="2c374ea" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:22 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:37 2025 -0800\n\nmeson: consistently use custom program paths to resolve programs\n\nThe calls to `find_program()` in our documentation don't use our custom\nprogram path. This variable gets populated on Windows with the location\nof Git for Windows so that we can use it to provide our build tools.\nConsequently, we may not be able to find all necessary binaries on\nWindows.\n\nAdapt the calls to use the program path to fix this. While at it, drop\n`required: true` arguments, which are the default anyway.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2c3ca00b48fb06f1b59ee6fa4401346e42806cb2" [label="2c3ca00" color=gold3 fillcolor=gold3 tooltip="author: Yi-Jyun Pan <pan93412@gmail.com>\nSat Dec 28 06:23:19 2024 +0800\ncommitter: Yi-Jyun Pan <pan93412@gmail.com>\nSat Dec 28 06:24:48 2024 +0800\n\ngpgsig -----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg70wnL5lPRZ7tMvjA89O0T2ClVC\nvyKqsyhOnltZVhmE4AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQF6731X6VMFwcC9Lu/DSDyMdIoLEcLjpUALOuOTJmONO6HgjpZJLMQJ8/MG7B2CaUq\nDwR4MrLIHjzFuspiQGJw4=\n-----END SSH SIGNATURE-----\nl10n: zh_TW: Git 2.48 round 2\n\nCo-authored-by: Lumynous <lumynou5.tw@gmail.com>\nSigned-off-by: Yi-Jyun Pan <pan93412@gmail.com>"]
	"2c6fd30198187c928cbf927802556908c381799c" [label="2c6fd30" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:44 2025 -0800\n\nMerge branch 'cc/lop-remote'\n\nLarge-object promisor protocol extension.\n\n* cc/lop-remote:\ndoc: add technical design doc for large object promisors\npromisor-remote: check advertised name or URL\nAdd 'promisor-remote' capability to protocol v2"]
	"2ca67c6f1433586e61487295bb04cc424992db12" [label="2ca67c6" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:53 2025 -0800\n\nclone: add tags refspec earlier to fetch refspec\n\nIn clone.c we call refspec_ref_prefixes() to copy the fetch refspecs\nfrom the `remote->fetch` refspec into `ref_prefixes` of\n`transport_ls_refs_options`. Afterwards we add the tags prefix\n`refs/tags/` prefix as well. At a later point, in wanted_peer_refs() we\nprocess refs using both `remote->fetch` and `TAG_REFSPEC`.\n\nSimplify the code by appending `TAG_REFSPEC` to `remote->fetch` before\ncalling refspec_ref_prefixes().\n\nTo be able to do this, we set `option_tags` to 0 when --mirror is given.\nThis is because --mirror mirrors (hence the name) all the refs,\nincluding tags and they do not need to be treated separately.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2cca185e85171c462166839cfd6ee57c09573160" [label="2cca185" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Dec 28 10:48:00 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 17:00:44 2024 -0800\n\nreftable: fix allocation count on realloc error\n\nWhen realloc(3) fails, it returns NULL and keeps the original allocation\nintact.  REFTABLE_ALLOC_GROW overwrites both the original pointer and\nthe allocation count variable in that case, simultaneously leaking the\noriginal allocation and misrepresenting the number of storable items.\n\nparse_names() avoids the leak by keeping the original pointer if\nreallocation fails, but still increase the allocation count in such a\ncase as if it succeeded.  That's OK, because the error handling code\njust frees everything and doesn't look at names_cap anymore.\n\nreftable_buf_add() does the same, but here it is a problem as it leaves\nthe reftable_buf in a broken state, with ->alloc being roughly twice as\nbig as the actually allocated memory, allowing out-of-bounds writes in\nsubsequent calls.\n\nReimplement REFTABLE_ALLOC_GROW to avoid leaks, keep allocation counts\nin sync and still signal failures to callers while avoiding code\nduplication in callers.  Make it an expression that evaluates to 0 if no\nreallocation is needed or it succeeded and 1 on failure while keeping\nthe original pointer and allocation counter values.\n\nAdjust REFTABLE_ALLOC_GROW_OR_NULL to the new calling convention for\nREFTABLE_ALLOC_GROW, but keep its support for non-size_t alloc variables\nfor now.\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2cf14d1bfd6cdf6629e56046dd30d1ef15175fc9" [label="2cf14d1" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:47 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:05 2025 -0800\n\nbuiltin/verify-commit: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/verify-commit.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_verify_commit()` function with `repo`\nset to NULL and then early in the function, `parse_options()` call will\ngive the options help and exit.\n\nPass the repository available in the calling context to `verify_commit()`\nto remove it\'s dependency on the global `the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2d0ff147e5f6a46554605d137993ba385698eb4e" [label="2d0ff14" color=gold3 fillcolor=gold3 tooltip="author: Jan Palus <jpalus@fastmail.com>\nMon Jan 20 12:41:06 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:04:26 2025 -0800\n\nt8002: fix ambiguous printf conversion specifications\n\nIn e7fb2ca945 (builtin/blame: fix out-of-bounds write with blank\nboundary commits, 2025-01-10), we have introduced two new tests that\nexpect a certain amount of padding. This padding is generated via\nprintf using the \"%0.s\" conversion specification. That directive is\nambiguous because it might be interpreted as field width (most shells)\nor 0-padding flag for numeric fields (coreutils).\n\nFix this issue by using \"%${N}s\" instead, which is already being\nused in other tests (i.e. t5300, t0450) and is unambiguous.\n\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Jan Palus <jpalus@fastmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2d2a71ce85026edcc40f469678a1035df0dfcf57" [label="2d2a71c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:54 2025 -0800\n\nThe thirteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2d47d233479d1d8246c833381c0f095b9a14ee41" [label="2d47d23" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:16 2025 -0800\n\nMerge branch \'sj/ref-consistency-checks-more\' into jch\n\n\"git fsck\" becomes more careful when checking the refs.\n\n* sj/ref-consistency-checks-more:\nbuiltin/fsck: add `git refs verify` child process\npacked-backend: check whether the \"packed-refs\" is sorted\npacked-backend: add \"packed-refs\" entry consistency check\npacked-backend: check whether the refname contains NUL characters\npacked-backend: add \"packed-refs\" header consistency check\npacked-backend: check if header starts with \"# pack-refs with: \"\npacked-backend: check whether the \"packed-refs\" is regular file\nbuiltin/refs: get worktrees without reading head information\nt0602: use subshell to ensure working directory unchanged"]
	"2d7a874493df07d76d7f1294e72b807ff936cd55" [label="2d7a874" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:55 2025 -0800\n\nMerge branch \'da/help-autocorrect-one-fix\'\n\n\"git -c help.autocorrect=0 psuh\" shows the suggested typofix,\nunlike the previous attempt in the base topic.\n\n* da/help-autocorrect-one-fix:\nhelp: add \"show\" as a valid configuration value\nhelp: show the suggested command when help.autocorrect is false"]
	"2dc6cf247e907009950a46c400cbd5efc563a3a2" [label="2dc6cf2" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:16 2025 -0800\n\nxdiff: avoid signed vs. unsigned comparisons in xhistogram.c\n\nThe comparisons all involve unsigned variables. Cast the comparison\nto unsigned to eliminate the mismatch.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2de15960026972a7a1d933881dad8a3879471155" [label="2de1596" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 19:45:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 19:45:48 2025 -0800\n\nMerge branch 'pw/repo-layout-doc-update' into next\n\nSome future breaking changes would remove certain parts of the\ndefault repository, which were still described even when the\ndocuments were built for the future with WITH_BREAKING_CHANGES.\n\n* pw/repo-layout-doc-update:\ndocs: fix repository-layout when building with breaking changes"]
	"2ebbe2b2dbe67fcde41d0717a0ab27d2fd24566a" [label="2ebbe2b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:37 2025 -0800\n\nMerge branch 'ms/rename-match-name-with-pattern'\n\nCode renaming.\n\n* ms/rename-match-name-with-pattern:\nrefspec: clarify function naming and documentation"]
	"2fd367cf63cd5f94368340cc6fe1cd0a3fb021df" [label="2fd367c" color=gold3 fillcolor=gold3 tooltip="author: Adam Murray <ad@canva.com>\nFri Jan 10 08:28:20 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:01:56 2025 -0800\n\ntrace2: prevent segfault on config collection with valueless true\n\nWhen TRACE2 analytics is enabled, a configuration variable set to\n\"valueless true\" causes a segfault.\n\nSteps to Reproduce\n\nGIT_TRACE2=true GIT_TRACE2_CONFIG_PARAMS=status.*\ngit -c status.relativePaths version\nExpected Result\ngit version 2.46.0\nActual Result\nzsh: segmentation fault GIT_TRACE2=true\n\nAdd checks to prevent the segfault and instead show that the\nvariable without value.\n\nSigned-off-by: Adam Murray <ad@canva.com>\nAcked-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"2feabab25ac114bf8c527464543c96d97ac1f8bb" [label="2feabab" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 16:47:06 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 16:47:06 2025 -0800\n\nSync with gitk update"]
	"3010ffb1eaaede91bd20a3e8adfd76b1531f95c4" [label="3010ffb" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 21:00:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 21:00:54 2025 -0800\n\nSync with 'master'"]
	"3028db4af289560e670b9f362aea16eaf3d1825e" [label="3028db4" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nMon Feb 03 07:29:36 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:57 2025 -0800\n\nsend-pack: new return code \"ERROR_SEND_PACK_BAD_REF_STATUS\"\n\nThe \"push_refs\" function in the transport_vtable is the handler for\ngit-push operation. All the \"push_refs\" functions for different\ntransports (protocols) should have the same behavior, but the behavior\nof \"git_transport_push()\" function for builtin_smart_vtable in\n\"transport.c\" (which calls \"send_pack()\" in \"send-pack.c\") differs from\nthe handler of the HTTP protocol.\n\nThe \"push_refs()\" function for the HTTP protocol which calls the\n\"push_refs_with_push()\" function in \"transport-helper.c\" will return 0\neven when a bad REF_STATUS (such as REF_STATUS_REJECT_NONFASTFORWARD)\nwas found. But \"send_pack()\" for Git smart protocol will return -1 for\na bad REF_STATUS.\n\nWe cannot ignore bad REF_STATUS directly in the \"send_pack()\" function,\nbecause the function is also used in \"builtin/send-pack.c\". So we add a\nnew non-zero error code \"SEND_PACK_ERROR_REF_STATUS\" for \"send_pack()\".\n\nIgnore the specific error code in the \"git_transport_push()\" function to\nhave the same behavior as \"push_refs()\" for HTTP protocol. Note that\neven though we ignore the error here, we\'ll ultimately still end up\ndetecting that a subset of refs was not pushed in `transport_push()`\nbecause we eventually call `push_had_errors()` on the remote refs.\n\nSigned-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"30696be71f64ca3764b1d334927da927d6d8df78" [label="30696be" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:32 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:43 2025 -0800\n\np5313: add size comparison test\n\nAs custom options are added to \'git pack-objects\' and \'git repack\' to\nadjust how compression is done, use this new performance test script to\ndemonstrate their effectiveness in performance and size.\n\nThe recently-added --name-hash-version option allows for testing\ndifferent name hash functions. Version 2 intends to preserve some of the\nlocality of version 1 while more often breaking collisions due to long\nfilenames.\n\nDistinguishing objects by more of the path is critical when there are\nmany name hash collisions and several versions of the same path in the\nfull history, giving a significant boost to the full repack case. The\nlocality of the hash function is critical to compressing something like\na shallow clone or a thin pack representing a push of a single commit.\n\nThis can be seen by running pt5313 on the open source fluentui\nrepository [1]. Most commits will have this kind of output for the thin\nand big pack cases, though certain commits (such as [2]) will have\nproblematic thin pack size for other reasons.\n\n[1] https://github.com/microsoft/fluentui\n[2] a637a06df05360ce5ff21420803f64608226a875\n\nChecked out at the parent of [2], I see the following statistics:\n\nTest                                         HEAD\n---------------------------------------------------------------\n5313.2: thin pack with version 1             0.37(0.44+0.02)\n5313.3: thin pack size with version 1                   1.2M\n5313.4: big pack with version 1              2.04(7.77+0.23)\n5313.5: big pack size with version 1                   20.4M\n5313.6: shallow fetch pack with version 1    1.41(2.94+0.11)\n5313.7: shallow pack size with version 1               34.4M\n5313.8: repack with version 1                95.70(676.41+2.87)\n5313.9: repack size with version 1                    439.3M\n5313.10: thin pack with version 2            0.12(0.12+0.06)\n5313.11: thin pack size with version 2                 22.0K\n5313.12: big pack with version 2             2.80(5.43+0.34)\n5313.13: big pack size with version 2                  25.9M\n5313.14: shallow fetch pack with version 2   1.77(2.80+0.19)\n5313.15: shallow pack size with version 2              33.7M\n5313.16: repack with version 2               33.68(139.52+2.58)\n5313.17: repack size with version 2                   160.5M\n\nTo make comparisons easier, I will reformat this output into a different\ntable style:\n\n| Test         | V1 Time | V2 Time | V1 Size | V2 Size |\n|--------------|---------|---------|---------|---------|\n| Thin Pack    |  0.37 s |  0.12 s |   1.2 M |  22.0 K |\n| Big Pack     |  2.04 s |  2.80 s |  20.4 M |  25.9 M |\n| Shallow Pack |  1.41 s |  1.77 s |  34.4 M |  33.7 M |\n| Repack       | 95.70 s | 33.68 s | 439.3 M | 160.5 M |\n\nThe v2 hash function successfully differentiates the CHANGELOG.md files\nfrom each other, which leads to significant improvements in the thin\npack (simulating a push of this commit) and the full repack. There is\nsome bloat in the \"big pack\" scenario and essentially the same results\nfor the shallow pack.\n\nIn the case of the Git repository, these numbers show some of the issues\nwith this approach:\n\n| Test         | V1 Time | V2 Time | V1 Size | V2 Size |\n|--------------|---------|---------|---------|---------|\n| Thin Pack    |  0.02 s |  0.02 s |   1.1 K |   1.1 K |\n| Big Pack     |  1.69 s |  1.95 s |  13.5 M |  14.5 M |\n| Shallow Pack |  1.26 s |  1.29 s |  12.0 M |  12.2 M |\n| Repack       | 29.51 s | 29.01 s | 237.7 M | 238.2 M |\n\nHere, the attempts to remove conflicts in the v2 function seem to cause\nslight bloat to these sizes. This shows that the Git repository benefits\na lot from cross-path delta pairs.\n\nThe results are similar with the nodejs/node repo:\n\n| Test         | V1 Time | V2 Time | V1 Size | V2 Size |\n|--------------|---------|---------|---------|---------|\n| Thin Pack    |  0.02 s |  0.02 s |   1.6 K |   1.6 K |\n| Big Pack     |  4.61 s |  3.26 s |  56.0 M |  52.8 M |\n| Shallow Pack |  7.82 s |  7.51 s | 104.6 M | 107.0 M |\n| Repack       | 88.90 s | 73.75 s | 740.1 M | 764.5 M |\n\nHere, the v2 name-hash causes some size bloat more often than it reduces\nthe size, but it also universally improves performance time, which is an\ninteresting reversal. This must mean that it is helping to short-circuit\nsome delta computations even if it is not finding the most efficient\nones. The performance improvement cannot be explained only due to the\nI/O cost of writing the resulting packfile.\n\nThe Linux kernel repository was the initial target of the default name\nhash value, and its naming conventions are practically build to take the\nmost advantage of the default name hash values:\n\n| Test         | V1 Time  | V2 Time  | V1 Size | V2 Size |\n|--------------|----------|----------|---------|---------|\n| Thin Pack    |   0.17 s |   0.07 s |   4.6 K |   4.6 K |\n| Big Pack     |  17.88 s |  12.35 s | 201.1 M | 159.1 M |\n| Shallow Pack |  11.05 s |  22.94 s | 269.2 M | 273.8 M |\n| Repack       | 727.39 s | 566.95 s |   2.5 G |   2.5 G |\n\nHere, the thin and big packs gain some performance boosts in time, with\na modest gain in the size of the big pack. The shallow pack, however, is\nmore expensive to compute, likely because similarly-named files across\ndifferent directories are farther apart in the name hash ordering in v2.\nThe repack also gains benefits in computation time but no meaningful\nchange to the full size.\n\nFinally, an internal Javascript repo of moderate size shows significant\ngains when repacking with --name-hash-version=2 due to it having many name\nhash collisions. However, it\'s worth noting that only the full repack\ncase has significant differences from the v1 name hash:\n\n| Test      | V1 Time   | V2 Time  | V1 Size | V2 Size |\n|-----------|-----------|----------|---------|---------|\n| Thin Pack |    8.28 s |   7.28 s |  16.8 K |  16.8 K |\n| Big Pack  |   12.81 s |  11.66 s |  29.1 M |  29.1 M |\n| Shallow   |    4.86 s |   4.06 s |  42.5 M |  44.1 M |\n| Repack    | 3126.50 s | 496.33 s |   6.2 G | 855.6 M |\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"306ab352f4e98f6809ce52fc4e5d63fb947d0635" [label="306ab35" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 21:20:34 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 21:20:35 2024 -0800\n\nMerge branch \'ps/meson-test-wo-gitweb\'\n\nmeson-based build without GitWeb failed the self tests.\n\n* ps/meson-test-wo-gitweb:\nmeson: enable auto-discovered \"gitweb\"\nGIT-BUILD-OPTIONS: wire up NO_GITWEB option\nGIT-BUILD-OPTIONS: sort variables alphabetically"]
	"30ceb7b040fb0d98a6c17a39c106f6eb9a112b24" [label="30ceb7b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:30 2025 -0800\n\nSync with 'master'"]
	"30f7414ca17bc675105d3d731a827778d7367b11" [label="30f7414" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:42:48 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:24 2025 -0800\n\ndiff: add a comment about combine_diff_path.parent.path\n\nWe only fill in the per-parent \"path\" field when it differs from what\'s\nin combine_diff_path.path (and even then only when the option is\nappropriate). Let\'s document that.\n\nSuggested-by: Wink Saville <wink@saville.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3171845b731fb90dfa49d89be174ccc6dfbf5729" [label=3171845 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:18 2025 -0800\n\nMerge branch 'ds/path-walk-1' into next\n\nIntroduce a new API to visit objects in batches based on a common\npath, or by type.\n\n* ds/path-walk-1:\npath-walk: reorder object visits\npath-walk: mark trees and blobs as UNINTERESTING\npath-walk: visit tags and cached objects\npath-walk: allow consumer to specify object types\nt6601: add helper for testing path-walk API\ntest-lib-functions: add test_cmp_sorted\npath-walk: introduce an object walk by path"]
	"31761f391192909f6486ecb532e72dfaee756be6" [label="31761f3" color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nThu Mar 06 11:26:19 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 17:35:07 2025 -0800\n\nmeson: fix sorting\n\nIn 904339edbd80 (Introduce support for the Meson build system,\n2024-12-06) the `meson.build` file was introduced, adding also a\nWindows-specific list of source files. This list was obviously meant to\nbe sorted alphabetically, but there is one mistake. Let's fix that.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"318f4c98276de7e515f838a9626bcf60d757ee20" [label="318f4c9" color=gold3 fillcolor=gold3 tooltip="author: ambar chakravartty <chakravarttyambar@gmail.com>\nSat Feb 01 08:12:10 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 23:11:19 2025 -0800\n\nt5401: prefer test_path_is_* helper function\n\n\"test -f\" does not provide a nice error message when we hit test\nfailures, so use test_path_is_file instead.\n\nSigned-off-by: ambar chakravartty <amch9605@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"31c747e0be7828de7d391fb927d069302b7f3816" [label="31c747e" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:51 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:06 2025 -0800\n\nbuiltin/for-each-ref: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/for-each-ref.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_for_each_ref()` function with `repo`\nset to NULL and then early in the function, `parse_options()` call will\ngive the options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"31eb6d7cf09c3fa668c1839d8c5759ab7cdf280c" [label="31eb6d7" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:05 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:45 2024 -0800\n\nmeson: deduplicate access to SHA1/SHA256 backend options\n\nWe've got a couple of repeated calls to `get_option()` for the SHA1 and\nSHA256 backend options. While not an issue, it makes the code needlessly\nverbose.\n\nFix this by consistently using a local variable.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"31f5549c285ec793a67a9d072db38fec087c7e32" [label="31f5549" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nFri Dec 20 18:37:48 2024 +0100\ncommitter: Jean-Noël Avila <jn.avila@free.fr>\nSun Dec 29 19:47:30 2024 +0100\n\nl10n: fr: v2.48.0\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>"]
	"320f2061b63b0157ea8b21362ed12e4ce90258e2" [label="320f206" color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:05:55 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:07 2025 -0800\n\nt0602: use subshell to ensure working directory unchanged\n\nFor every test, we would execute the command \"cd repo\" in the first but\nwe never execute the command \"cd ..\" to restore the working directory.\nHowever, it\'s either not a good idea use above way. Because if any test\nfails between \"cd repo\" and \"cd ..\", the \"cd ..\" will never be reached.\nAnd we cannot correctly restore the working directory.\n\nLet\'s use subshell to ensure that the current working directory could be\nrestored to the correct path.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"32346e0c3be7f2f43d3ef9eb2c4fa68f5ac7460a" [label="32346e0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:12 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:12 2025 -0800\n\nMerge branch \'jt/diff-pairs\' into next\n\nA post-processing filter for \"diff --raw\" output has been\nintroduced.\n\n* jt/diff-pairs:\nbuiltin/diff-pairs: allow explicit diff queue flush\nbuiltin: introduce diff-pairs command\ndiff: add option to skip resolving diff statuses\ndiff: return diff_filepair from diff queue helpers"]
	"3262a53c123844b3b9140f4e35b86f1444555aad" [label="3262a53" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Feb 06 08:53:58 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 23:29:18 2025 -0800\n\nreftable: ignore file-in-use errors when unlink(3p) fails on Windows\n\nUnlinking a file may fail on Windows systems when the file is still held\nopen by another process. This is incompatible with POSIX semantics and\nby extension with Git\'s assumed semantics when unlinking files, which\nis that files can be unlinked regardless of whether they are still open\nor not. To counteract this incompatibility, we have some custom error\nhandling in the `mingw_unlink()` wrapper that first retries the deletion\nwith some delay, and then asks the user whether we should continue to\nretry.\n\nWhile this logic might be sensible in many callsites throughout Git, it\nis less when used in the reftable library. We only use unlink(3) there\nto delete tables which aren\'t referenced anymore, and the code is very\naware of the limitations on Windows. As such, all calls to unlink(3p)\ndon\'t perform any error checking at all and are fine with the call\nfailing.\n\nInstead, the library provides the `reftable_stack_clean()` function,\nwhich Git knows to execute in git-pack-refs(1) after compacting a stack.\nThe effect of this function is that all stale tables will eventually get\ndeleted once they aren\'t kept open anymore.\n\nSo while we\'re fine with unlink(3p) failing, the Windows-emulation of\nthat function will still perform several sleeps and ultimately end up\nasking the user:\n\n$ git pack-refs\nUnlink of file \'C:/temp/jgittest/jgit/.git/reftable/0x000000000002-0x000000000004-50486d0e.ref\' failed. Should I try again? (y/n) n\nUnlink of file \'C:/temp/jgittest/jgit/.git/reftable/0x000000000002-0x000000000004-50486d0e.ref\' failed. Should I try again? (y/n) n\nUnlink of file \'C:/temp/jgittest/jgit/.git/reftable/0x000000000002-0x000000000004-50486d0e.ref\' failed. Should I try again? (y/n) n\n\nIt even asks multiple times, which is doubly annoying and puzzling to\nthe user:\n\n1. It asks when trying to delete the old file after having written the\ncompacted stack.\n\n2. It asks when reloading the stack, where it will try to unlink\nnow-unreferenced tables.\n\n3. It asks when calling `reftable_stack_clean()`, where it will try to\nunlink now-stale tables.\n\nFix the issue by making it possible to disable this behaviour with a\npreprocessor define. As \"git-compat-util.h\" is only included from\n\"system.h\", and given that \"system.h\" is only ever included by headers\nand code that are internal to the reftable library, we can set that\nmacro in this header without impacting anything else but the reftable\nlibrary.\n\nReported-by: Christian Reich <Zottelbart@t-online.de>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3295c3539896750f742a56de0c4ac965f8d96303" [label="3295c35" color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nWed Feb 05 01:41:47 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 18:32:01 2025 -0800\n\nrev-list: extend print-info to print missing object type\n\nAdditional information about missing objects found in git-rev-list(1)\ncan be printed by specifying the `print-info` missing action for the\n`--missing` option. Extend this action to also print missing object type\ninformation inferred from its containing object. This token follows the\nform `type=<type>` and specifies the expected object type of the missing\nobject.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nAcked-by: Christian Couder <christian.couder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3306edb3805aac7baf77c4916b5495ff278353e5" [label="3306edb" color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nSun Feb 23 02:53:31 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:49:10 2025 -0800\n\nhttp: allow using netrc for WebDAV-based HTTP protocol\n\nFor an extended period of time, we\'ve enabled libcurl\'s netrc\nfunctionality, which will read credentials from the netrc file if none\nare provided.  Unfortunately, we have also not documented this fact or\nwritten any tests for it, but people have come to rely on it.\n\nIn 610cbc1dfb (\"http: allow authenticating proactively\", 2024-07-10), we\naccidentally broke the ability of users to use the netrc file for the\nWebDAV-based HTTP protocol.  Notably, it works on the initial request\nbut does not work on subsequent requests, which causes failures because\nthat version of the protocol will necessarily make multiple requests.\n\nThis happens because curl_empty_auth_enabled never returns -1, only 0 or\n1, and so if http.proactiveAuth is not enabled, the username and\npassword are always set to empty credentials, which prevents libcurl\'s\nfallback to netrc from working.  However, in other cases, the server\ncontinues to get a 401 response and the credential helper is invoked,\nwhich is the normal behavior, so this was not noticed earlier.\n\nTo fix this, change the condition to check for enabling empty auth and\nalso not having proactive auth enabled, which should result in the\nusername and password not being set to a single colon in the typical\ncase, and thus the netrc file being used.\n\nReported-by: Peter Georg <peter.georg@physik.uni-regensburg.de>\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"33319b0976ff9975e7509b6096887370146893f4" [label="33319b0" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:30 2025 -0800\n\nreftable: address trivial -Wsign-compare warnings\n\nAddress the last couple of trivial -Wsign-compare warnings in the\nreftable library and remove the DISABLE_SIGN_COMPARE_WARNINGS macro that\nwe have in \"reftable/system.h\".\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3334de6494363af27393f468c2e7f32f02654f47" [label="3334de6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:44 2025 -0800\n\nMerge branch 'dm/editorconfig-bash-is-like-sh'\n\nThe editorconfig file is updated to tell us that bash scripts are\nsimilar to general Bourne shell scripts.\n\n* dm/editorconfig-bash-is-like-sh:\neditorconfig: add .bash extension"]
	"3339180b28da5138eacb6b64f89c03e21493a73d" [label=3339180 color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:36 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:17 2025 -0800\n\nt/helper/test-hash.c: use unsafe_hash_algo()\n\nRemove a series of conditionals within the shared cmd_hash_impl() helper\nthat powers the 'sha1' and 'sha1-unsafe' helpers.\n\nInstead, replace them with a single conditional that transforms the\nspecified hash algorithm into its unsafe variant. Then all subsequent\ncalls can directly use whatever function it wants to call without having\nto decide between the safe and unsafe variants.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"337855629f59a3f435dabef900e22202ce8e00e1" [label=3378556 color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:26:42 2025 -0800\n\nbuiltin/clone: teach git-clone(1) the --revision= option\n\nThe git-clone(1) command has the option `--branch` that allows the user\nto select the branch they want HEAD to point to. In a non-bare\nrepository this also checks out that branch.\n\nOption `--branch` also accepts a tag. When a tag name is provided, the\ncommit this tag points to is checked out and HEAD is detached. Thus\n`--branch` can be used to clone a repository and check out a ref kept\nunder `refs/heads` or `refs/tags`. But some other refs might be in use\nas well. For example Git forges might use refs like `refs/pull/<id>` and\n`refs/merge-requests/<id>` to track pull/merge requests. These refs\ncannot be selected upon git-clone(1).\n\nAdd option `--revision` to git-clone(1). This option accepts a fully\nqualified reference, or a hexadecimal commit ID. This enables the user\nto clone and check out any revision they want. `--revision` can be used\nin conjunction with `--depth` to do a minimal clone that only contains\nthe blob and tree for a single revision. This can be useful for\nautomated tests running in CI systems.\n\nUsing option `--branch` and `--single-branch` together is a similar\nscenario, but serves a different purpose. Using these two options, a\nsinglet remote tracking branch is created and the fetch refspec is set\nup so git-fetch(1) will receive updates on that branch from the remote.\nThis allows the user work on that single branch.\n\nOption `--revision` on contrary detaches HEAD, creates no tracking\nbranches, and writes no fetch refspec.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\n[jc: removed unnecessary TEST_PASSES_SANITIZE_LEAK from the test]\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"33af5a333416317f5d1fe0c8c9f980617a413aa8" [label="33af5a3" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:00 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:19 2025 -0800\n\n.gitattributes: more *.txt -> *.adoc updates\n\nAll Documentation files now end in .adoc.  Update the entries for\ngit-merge.adoc, gitk.adoc, and user-manual.adoc to properly set the\nconflict-marker-size attribute.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"33d02ed447cf730fa56a1ca15cda74ee88011d52" [label="33d02ed" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:22 2025 -0800\n\nMerge branch \'jk/zlib-inflate-fixes\' into jch\n\nFix our use of zlib corner cases.\n\n* jk/zlib-inflate-fixes:\nunpack_loose_rest(): rewrite return handling for clarity\nunpack_loose_rest(): simplify error handling\nunpack_loose_rest(): never clean up zstream\nunpack_loose_rest(): avoid numeric comparison of zlib status\nunpack_loose_header(): avoid numeric comparison of zlib status\ngit_inflate(): skip zlib_post_call() sanity check on Z_NEED_DICT\nunpack_loose_header(): fix infinite loop on broken zlib input\nunpack_loose_header(): report headers without NUL as \"bad\"\nunpack_loose_header(): simplify next_out assignment\nloose_object_info(): BUG() on inflating content with unknown type"]
	"3444b4bf367e16f70d77ec0fc00e0cc3b587195e" [label="3444b4b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\n\nMerge branch \'kn/ref-migrate-skip-reflog\' into next\n\nUsage string of \"git refs\" has been corrected.\n\n* kn/ref-migrate-skip-reflog:\nrefs: show --no-reflog in the help text"]
	"344a107b557604d3f958e7bf7ebf0901290c50d5" [label="344a107" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 18 17:24:35 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:52:39 2025 -0800\n\nmerge-tree --stdin: flush stdout to avoid deadlock\n\nIf a process tries to read the output from \"git merge-tree --stdin\"\nbefore it closes merge-tree\'s stdin then it deadlocks. This happens\nbecause merge-tree does not flush its output before trying to read\nanother line of input and means that it is not possible to cherry-pick a\nsequence of commits using \"git merge-tree --stdin\". Fix this by calling\nmaybe_flush_or_die() before trying to read the next line of\ninput. Flushing the output after each merge does not seem to affect the\nperformance, any difference is lost in the noise even after increasing\nthe number of runs.\n\n$ git rev-list --merges --parents -n100 origin/master |\nsed \'s/^[^ ]* //\' >/tmp/merges\n$ hyperfine -L flush 0,1 --warmup 1 --runs 30 \\\n\'GIT_FLUSH={flush} ./git merge-tree --stdin </tmp/merges\'\nBenchmark 1: GIT_FLUSH=0 ./git merge-tree --stdin </tmp/merges\nTime (mean ± σ):     546.6 ms ±  11.7 ms    [User: 503.2 ms, System: 40.9 ms]\nRange (min … max):   535.9 ms … 567.7 ms    30 runs\n\nBenchmark 2: GIT_FLUSH=1 ./git merge-tree --stdin </tmp/merges\nTime (mean ± σ):     546.9 ms ±  12.0 ms    [User: 505.9 ms, System: 38.9 ms]\nRange (min … max):   529.8 ms … 570.0 ms    30 runs\n\nSummary\n\'GIT_FLUSH=0 ./git merge-tree --stdin </tmp/merges\' ran\n1.00 ± 0.03 times faster than \'GIT_FLUSH=1 ./git merge-tree --stdin </tmp/merges\'\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"345aaf3976a6abc491026c8a465b5e8ccbc8da5a" [label="345aaf3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\n\nMerge branch \'ps/send-pack-unhide-error-in-atomic-push\'\n\n\"git push --atomic --porcelain\" used to ignore failures from the\nother side, losing the error status from the child process, which\nhas been corrected.\n\n* ps/send-pack-unhide-error-in-atomic-push:\nsend-pack: gracefully close the connection for atomic push\nt5543: atomic push reports exit code failure\nsend-pack: new return code \"ERROR_SEND_PACK_BAD_REF_STATUS\"\nt5548: add porcelain push test cases for dry-run mode\nt5548: add new porcelain test cases\nt5548: refactor test cases by resetting upstream\nt5548: refactor to reuse setup_upstream() function\nt5504: modernize test by moving heredocs into test bodies"]
	"34736ff48e684dac08bacdad60db41219ce1c520" [label="34736ff" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:30 2025 -0800\n\nMerge branch \'pw/apply-ulong-overflow-check\'\n\n\"git apply\" internally uses unsigned long for line numbers and uses\nstrtoul() to parse numbers on the hunk headers.  It however forgot\nto check parse errors.\n\n* pw/apply-ulong-overflow-check:\napply: detect overflow when parsing hunk header"]
	"3519492430ba26cadcdb215730a6c8e1bcf5b9cf" [label=3519492 color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nThu Jan 23 12:29:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 18:56:22 2025 -0800\n\nrefs: fix creation of reflog entries for symrefs\n\nThe commit 297c09eabb (refs: allow multiple reflog entries for the\nsame refname, 2024-12-16) added logic to exit early in\n`lock_ref_for_update()` after obtaining the required lock. This was\nadded as a performance optimization on a false assumption that no\nfurther processing was required for reflog-only updates.\n\nHowever the assumption was wrong.  For a symref's reflog entry, the\nupdate needs to be populated with the old_oid value, but the early\nexit skipped this necessary step.\n\nThis caused a bug in Git 2.48 in the files backend where target\nreferences of symrefs being updated would create a corrupted reflog\nentry for the symref since the old_oid is not populated.\n\nEverything the early exit skipped in the code path is necessary for\nboth regular and symbolic ref, so eliminate the mistaken\noptimization, and also add a test to ensure that such an issue\ndoesn't arise in the future.\n\nReported-by: Nika Layzell <nika@thelayzells.com>\nCo-authored-by: Jeff King <peff@peff.net>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"36463e32dfef16dc3a903763f14f5bbf6e0248e7" [label="36463e3" color=gold3 fillcolor=gold3 tooltip="author: Christian Couder <christian.couder@gmail.com>\nTue Feb 18 12:32:03 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:05:37 2025 -0800\n\npromisor-remote: check advertised name or URL\n\nA previous commit introduced a \"promisor.acceptFromServer\" configuration\nvariable with only \"None\" or \"All\" as valid values.\n\nLet\'s introduce \"KnownName\" and \"KnownUrl\" as valid values for this\nconfiguration option to give more choice to a client about which\npromisor remotes it might accept among those that the server advertised.\n\nIn case of \"KnownName\", the client will accept promisor remotes which\nare already configured on the client and have the same name as those\nadvertised by the client. This could be useful in a corporate setup\nwhere servers and clients are trusted to not switch names and URLs, but\nwhere some kind of control is still useful.\n\nIn case of \"KnownUrl\", the client will accept promisor remotes which\nhave both the same name and the same URL configured on the client as the\nname and URL advertised by the server. This is the most secure option,\nso it should be used if possible.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3656d57bbf4d82b62f368d56d3c4703f3916c2dc" [label="3656d57" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:22 2025 -0800\n\ncompat: drop `uncompress2()` compatibility shim\n\nOur compat library has an implementation of zlib's `uncompress2()`\nfunction that gets used when linking against an old version of zlib\nthat doesn't yet have it. The last user of `uncompress2()` got removed\nin 15a60b747e (reftable/block: open-code call to `uncompress2()`,\n2024-04-08), so the compatibility code is not required anymore. Drop it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"366074dc1843764c199c5b7a6354c58b8ac0b5c2" [label="366074d" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:27 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:26 2025 -0800\n\nt6434: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"373a4326961c504ad6365fc1e4a9082e387499c7" [label="373a432" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nWed Jan 01 21:17:21 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:17:05 2025 -0800\n\ntest-lib: simplify leak-log checking\n\nWe have a function to count the number of leaks found (actually, it is\nthe number of processes which produced a log file). Once upon a time we\ncared about seeing if this number increased between runs. But we\nsimplified that away in 95c679ad86 (test-lib: stop showing old leak\nlogs, 2024-09-24), and now we only care if it returns any results or\nnot.\n\nIn preparation for refactoring it further, let\'s drop the counting\nfunction entirely, and roll it into the \"is it empty\" check. The outcome\nshould be the same, but we\'ll be free to return a boolean \"did we find\nanything\" without worrying about somebody adding a new call to the\ncounting function.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"37b34c4e99f0fed81b7523d6e674ca976f994afc" [label="37b34c4" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\n\nMerge branch \'mh/doc-commit-title-not-subject\'\n\nThe documentation of \"git commit\" and \"git rebase\" now refer to\ncommit titles as such, not \"subject\".\n\n* mh/doc-commit-title-not-subject:\ndoc: use \'title\' consistently"]
	"3859e3965993493defd39cd54a2ab2097957e270" [label="3859e39" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:22 2025 -0800\n\npath: drop `git_path_buf()` in favor of `repo_git_path_replace()`\n\nRemove `git_path_buf()` in favor of `repo_git_path_replace()`. The\nlatter does essentially the same, with the only exception that it does\nnot rely on `the_repository` but takes the repo as separate parameter.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"388218fac77d0405a5083cd4b4ee20f6694609c3" [label="388218f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:32 2025 -0800\n\nThe ninth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"38876148a5b3b346f47b4fcdc3554c26ffdb8731" [label=3887614 color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: short help: Add -G and --pickaxe-grep\n\n-G and --pickaxe-grep seems to be on par with -S and --pickaxe-all that\nare already mentioned.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"38b066ee7685d0074d3430284f975addda934c17" [label="38b066e" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 31 23:14:17 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 23:58:44 2025 -0800\n\nt/unit-tests: convert hashmap test to use clar test framework\n\nAdapts hashmap test script to clar framework by using clar assertions\nwhere necessary.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"38ca78d9da8179a7f5e1b69ec9f05ecd2000295e" [label="38ca78d" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nFri Mar 07 23:54:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 00:09:17 2025 -0800\n\nconfig.mak.dev: enable -Wunreachable-code\n\nHaving the compiler point out unreachable code can help avoid bugs, like\nthe one discussed in:\n\nhttps://lore.kernel.org/git/20250307195057.GA3675279@coredump.intra.peff.net/\n\nIn that case it was found by Coverity, but finding it earlier saves\neverybody time and effort.\n\nWe can use -Wunreachable-code to get some help from the compiler here.\nInterestingly, this is a noop in gcc. It was a real warning up until gcc\n4.x, when it was removed for being too flaky, but they left the\ncommand-line option to avoid breaking users. See:\n\nhttps://stackoverflow.com/questions/17249934/why-does-gcc-not-warn-for-unreachable-code\n\nHowever, clang does implement this option, and it finds the case\nmentioned above (and no other cases within the code base). And since we\nrun clang in several of our CI jobs, that's enough to get an early\nwarning of breakage.\n\nWe could enable it only for clang, but since gcc is happy to ignore it,\nit's simpler to just turn it on for all developer builds.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"38d7016891e37a789d389eddc7cd3dc9b76370b4" [label="38d7016" color=gold3 fillcolor=gold3 tooltip="author: Martin Ågren <martin.agren@gmail.com>\nFri Jan 03 12:33:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:23:10 2025 -0800\n\ngit.txt: fix heading line of tildes\n\nThe two-line heading added in 8525e92886 (Document HOME environment\nvariable, 2024-12-09) uses too many tilde characters, so the heading\nisn't detected as such. Both AsciiDoc and Asciidoctor end up\nmisrendering this in different ways.\n\nUse the correct number of tilde characters to fix this.\n\nSigned-off-by: Martin Ågren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3902b083e7bfe3824fc070ea2081c74f19236509" [label="3902b08" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\n\nMerge branch 'ps/meson-weak-sha1-build'\n\nmeson-based build now supports the unsafe-sha1 build knob.\n\n* ps/meson-weak-sha1-build:\nmeson: provide a summary of configured backends\nmeson: wire up unsafe SHA1 backend\nmeson: add missing dots for build options\nmeson: simplify conditions for HTTPS and SHA1 dependencies\nmeson: require SecurityFramework when it's used as SHA1 backend\nmeson: deduplicate access to SHA1/SHA256 backend options\nmeson: consistenlty spell 'CommonCrypto'"]
	"3936e95a7f056877425c6faa6994d9f3712a6fb0" [label="3936e95" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:16 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:23 2025 -0800\n\ndiffcore.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"396b22da087e500e65aaf9433c0aa1861a9787cd" [label="396b22d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 23:36:58 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 23:36:58 2025 -0800\n\nWhat's cooking (2025/01 #08)"]
	"39938f41fd287e29636771dae20db5c4af59e042" [label="39938f4" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:53 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:54 2024 -0800\n\nMerge branch \'ps/meson-test-wo-gitweb\' into next\n\nmeson-based build without GitWeb failed the self tests.\n\n* ps/meson-test-wo-gitweb:\nmeson: enable auto-discovered \"gitweb\"\nGIT-BUILD-OPTIONS: wire up NO_GITWEB option\nGIT-BUILD-OPTIONS: sort variables alphabetically"]
	"39ba2e8e5627a8a3062d257928824139ca71c5f3" [label="39ba2e8" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\n\nMerge branch 'jc/cli-doc-option-and-config'\n\nDoc update.\n\n* jc/cli-doc-option-and-config:\ngitcli: document that command line trumps config and env"]
	"39de0ffbe33fbb6498a3027207deb3a5d30ff678" [label="39de0ff" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:55 2025 -0800\n\nMerge branch \'sc/help-autocorrect-one\'\n\n\"[help] autocorrect = 1\" used to be a way to say \"please wait for\n0.1 second after suggesting a typofix of the command name before\nrunning that command\"; now it means \"yes, if there is a plausible\ntypofix for the command name, please run it immediately\".\n\n* sc/help-autocorrect-one:\nhelp: interpret boolean string values for help.autocorrect"]
	"3a0599788fd38822dcd2f32de538afdd36a478aa" [label="3a05997" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:42:29 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 19:31:23 2025 -0800\n\ncombine-diff: use pointer for parent paths\n\nCommit d76ce4f734 (log,diff-tree: add --combined-all-paths option,\n2019-02-07) added a \"path\" field to each combine_diff_parent struct.\nIt\'s defined as a strbuf, but this is overkill. We never manipulate the\nbuffer beyond inserting a single string into it.\n\nAnd in fact there\'s a small bug: we zero the parent structs, including\nthe path strbufs. For the 0th parent, we strbuf_init() the strbuf before\nadding to it. But for subsequent parents, we never do the init. This is\ntechnically violating the strbuf API, though the code there is resilient\nenough to handle this zero\'d state.\n\nThis patch switches us to just store an allocated string pointer.\nZeroing it is enough to properly initialize it there (modulo the usual\nassumption we make that a NULL pointer is all-zeroes).\n\nAnd as a bonus, we can just check for a non-NULL value to see if it is\npresent, rather than repeating the combined_all_paths logic at each\nsite.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3adba40858036a5a44f550aaab5287ad135f5f87" [label="3adba40" color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nThu Mar 06 16:30:27 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:38:20 2025 -0800\n\nmerge-ort: fix slightly overzealous assertion for rename-to-self\n\nmerge-ort has a number of sanity checks on the file it is processing in\nprocess_renames().  One of these sanity checks was slightly overzealous\nbecause it indirectly assumed that a renamed file always ended up at a\ndifferent path than where it started.  That is normally an entirely fair\nassumption, but directory rename detection can make things interesting.\n\nAs a quick refresher, if one side of history renames directory A/ -> B/,\nand the other side of history adds new files to A/, then directory\nrename detection notices and suggests moving those new files to B/.  A\nsimilar thing is done for paths renamed into A/, causing them to be\ntransitively renamed into B/.  But, if the file originally came from B/,\nthen this can end up causing a file to be renamed back to itself.\n\nIt turns out the rest of the code following this assertion handled the\ncase fine; the assertion was just an extra sanity check, not a rigid\nprecondition.  Therefore, simply adjust the assertion to pass under this\nspecial case as well.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3ae35648bfc135e212c787f25caaed92ea7e0084" [label="3ae3564" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:19:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:19:33 2025 -0800\n\nMerge branch 'js/git-version-gen-update'\n\nBuild regression fix.\n\n* js/git-version-gen-update:\nGIT-VERSION-GEN: allow it to be run in parallel"]
	"3b0d05c4a79d0e441283680a864529b02dca5f08" [label="3b0d05c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 22:38:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\n\nThe fifth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3bdec75134d06f3a03dad4921870845f6b7f06c9" [label="3bdec75" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:22 2025 -0800\n\nMerge branch 'ps/refname-avail-check-optim' into jch\n\nThe code paths to check whether a refname X is available (by seeing\nif another ref X/Y exists, etc.) have been optimized.\n\n* ps/refname-avail-check-optim:\nrefs: reuse iterators when determining refname availability\nrefs/iterator: implement seeking for files iterators\nrefs/iterator: implement seeking for packed-ref iterators\nrefs/iterator: implement seeking for ref-cache iterators\nrefs/iterator: implement seeking for reftable iterators\nrefs/iterator: implement seeking for merged iterators\nrefs/iterator: provide infrastructure to re-seek iterators\nrefs/iterator: separate lifecycle from iteration\nrefs: stop re-verifying common prefixes for availability\nrefs/files: batch refname availability checks for initial transactions\nrefs/files: batch refname availability checks for normal transactions\nrefs/reftable: batch refname availability checks\nrefs: introduce function to batch refname availability checks\nbuiltin/update-ref: skip ambiguity checks when parsing object IDs\nobject-name: allow skipping ambiguity checks in `get_oid()` family\nobject-name: introduce `repo_get_oid_with_flags()`"]
	"3c0f4abaf5b3e47d9426bb2bffb06d5ee47b1c95" [label="3c0f4ab" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\n\nMerge branch \'kn/ref-migrate-skip-reflog\'\n\n\"git refs migrate\" can optionally be told not to migrate the reflog.\n\n* kn/ref-migrate-skip-reflog:\nbuiltin/refs: add \'--no-reflog\' flag to drop reflogs"]
	"3d58d63932c66a56b87671ef10eb01d40aae3afa" [label="3d58d63" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\n\nMerge branch 'ms/remote-valid-remote-name' into next\n\nCode shuffling.\n\n* ms/remote-valid-remote-name:\nremote: relocate valid_remote_name"]
	"3d7cd910b5151794d9f1e5ef64357e90bda0689b" [label="3d7cd91" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:13 2025 -0800\n\nMerge branch 'jk/lsan-race-ignore-false-positive' into next\n\nThe code to check LSan results has been simplified and made more\nrobust.\n\n* jk/lsan-race-ignore-false-positive:\ntest-lib: add a few comments to LSan log checking\ntest-lib: simplify lsan results check\ntest-lib: invert return value of check_test_results_san_file_empty"]
	"3dc7f0777a17a184029228c661ca0a505b737aed" [label="3dc7f07" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:49 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:05 2025 -0800\n\nbuiltin/pack-refs: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/pack-refs.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_pack_refs()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3ddeb7f3373ae0e309d9df62ada24375afa456c7" [label="3ddeb7f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\n\nMerge branch \'ps/build-meson-subtree\'\n\nThe meson-driven build is now aware of \"git-subtree\" housed in\ncontrib/subtree hierarchy.\n\n* ps/build-meson-subtree:\nmeson: wire up the git-subtree(1) command\nmeson: introduce build option for contrib\ncontrib/subtree: fix building docs"]
	"3dea2ad17d01ea0595abdaa738bee3806683752d" [label="3dea2ad" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:46 2025 -0800\n\nMerge branch 'rs/reftable-reader-new-leakfix'\n\nLeakfix.\n\n* rs/reftable-reader-new-leakfix:\nreftable: release name on reftable_reader_new() error"]
	"3e234437defb84b809f64cba35fa174e394baeb2" [label="3e23443" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:49 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndocs: gitdiffcore: -G and -S: Use regex/string placeholders\n\nIn the rest of the documentation (and in the code) we use `regex` and\n`string` as `-G` and `-S` argument placeholders.  While\n`regular-expression` and `block-of-text` are a bit easier to read, it is\na bit consistent.\n\nAnd we could assume that everyone who uses git should be able to\nunderstand that a \"string\" and a \"block-of-text\", as well as a \"regex\"\nand \"regular-expression\" are the same thing.  So, using a shorter\nversion is also more consistent.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3e681a7ccc97b81f9c93e5b4ca6d3a85d9817285" [label="3e681a7" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 18 17:24:38 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:52:40 2025 -0800\n\nmerge-tree: improve docs for --stdin\n\nAdd a section for --stdin in the list of options and document that it\nimplies -z so readers know how to parse the output. Also correct the\nmerge status documentation for --stdin as if the status is less than\nzero \"git merge-tree\" dies before printing it.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3e6ce570cacd28f40e1ffbabc35f9987ce2c7779" [label="3e6ce57" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:20 2025 -0800\n\nMerge branch \'ps/reftable-sans-compat-util\' into jch\n\nMake the code in reftable library less reliant on the service\nroutines it used to borrow from Git proper, to make it easier to\nuse by external users of the library.\n\n* ps/reftable-sans-compat-util:\nMakefile: skip reftable library for Coccinelle\nreftable: decouple from Git codebase by pulling in \"compat/posix.h\"\ngit-compat-util.h: split out POSIX-emulating bits\ncompat/mingw: split out POSIX-related bits\nreftable/basics: introduce `REFTABLE_UNUSED` annotation\nreftable/basics: stop using `SWAP()` macro\nreftable/stack: stop using `sleep_millisec()`\nreftable/system: introduce `reftable_rand()`\nreftable/reader: stop using `ARRAY_SIZE()` macro\nreftable/basics: provide wrappers for big endian conversion\nreftable/basics: stop using `st_mult()` in array allocators\nreftable: stop using `BUG()` in trivial cases\nreftable/record: don\'t `BUG()` in `reftable_record_cmp()`\nreftable/record: stop using `BUG()` in `reftable_record_init()`\nreftable/record: stop using `COPY_ARRAY()`\nreftable/blocksource: stop using `xmmap()`\nreftable/stack: stop using `write_in_full()`\nreftable/stack: stop using `read_in_full()`"]
	"3ec55e07033dc051c24d8c282abcd52a36cd6c2c" [label="3ec55e0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\n\nMerge branch 'sj/meson-doc-technical-dependency-fix' into next\n\nThe meson build procedure for Documentation/technical/ hiearchy was\nmissing necessary dependencies, which has been corrected.\n\n* sj/meson-doc-technical-dependency-fix:\nmeson: fix missing deps for technical articles"]
	"3ee3a6eb522fd3ad672e7734e5708f5ddcc63fce" [label="3ee3a6e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:21 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:37 2025 -0800\n\nmeson: fix overwritten `git` variable\n\nWe\'re assigning the `git` variable in three places:\n\n- In \"meson.build\" to store the external Git executable.\n\n- In \"meson.build\" to store the compiled Git executable.\n\n- In \"Documentation/meson.build\" to store the external Git executable,\na second time.\n\nThe last case is only needed because we overwrite the original variable\nwith the built version. Rename the variable used for the built Git\nexecutable so that we don\'t have to resolve the external Git executable\nmultiple times.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3eeed876a909c45695f2f3a3edd4141be331a3be" [label="3eeed87" color=gold3 fillcolor=gold3 tooltip="author: Andrew Carter <andrew@emailcarter.com>\nWed Feb 05 06:38:56 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 18:43:38 2025 -0800\n\ndocs: indicate http.sslCertType and sslKeyType\n\n0a01d41ee4 (http: add support for different sslcert and sslkey types.,\n2023-03-20) added useful SSL config options, but did not document them.\n\nSigned-off-by: Andrew Carter <andrew@emailcarter.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3f22889276ee75195f56bb3779ee8af5acbedbf0" [label="3f22889" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:53 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:03 2025 -0800\n\ncontrib/credential: fix compilation of \"osxkeychain\" helper\n\nThe \"osxkeychain\" helper does not compile due to a warning generated by\nthe unused `argc` parameter. Fix the warning by checking for the minimum\nnumber of required arguments explicitly in the least restrictive way\npossible.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3f3fd0f34617bc9901d5cfaca9a5b5a12eec8cf4" [label="3f3fd0f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:52 2025 -0800\n\nMerge branch 'ac/t5401-use-test-path-is-file'\n\nTest clean-up.\n\n* ac/t5401-use-test-path-is-file:\nt5401: prefer test_path_is_* helper function"]
	"3f8e2ee942185870bbc736375fc20e2c977cf7bb" [label="3f8e2ee" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:11:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:11:30 2025 -0800\n\nSync with 'master'"]
	"3f8f2abe05c0aeb0ea60768d44a99261ed456d44" [label="3f8f2ab" color=gold3 fillcolor=gold3 tooltip="author: Josh Steadmon <steadmon@google.com>\nTue Jan 28 23:01:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 23:39:16 2025 -0800\n\ncommon-main: split init and exit code into new files\n\nCurrently, object files in libgit.a reference common_exit(), which is\ncontained in common-main.o. However, common-main.o also includes main(),\nwhich references cmd_main() in git.o, which in turn depends on all the\nbuiltin/*.o objects.\n\nWe would like to allow external users to link libgit.a without needing\nto include so many extra objects. Enable this by splitting common_exit()\nand check_bug_if_BUG() into a new file common-exit.c, and add\ncommon-exit.o to LIB_OBJS so that these are included in libgit.a.\n\nThis split has previously been proposed ([1], [2]) to support fuzz tests\nand unit tests by avoiding conflicting definitions for main(). However,\nboth of those issues were resolved by other methods of avoiding symbol\nconflicts. Now we are trying to make libgit.a more self-contained, so\nhopefully we can revisit this approach.\n\nAdditionally, move the initialization code out of main() into a new\ninit_git() function in its own file. Include this in libgit.a as well,\nso that external users can share our setup code without calling our\nmain().\n\n[1] https://lore.kernel.org/git/Yp+wjCPhqieTku3X@google.com/\n[2] https://lore.kernel.org/git/20230517-unit-tests-v2-v2-1-21b5b60f4b32@google.com/\n\nSigned-off-by: Josh Steadmon <steadmon@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"3fc0e14928d60d588efd1fcc0edb202e4c0023b3" [label="3fc0e14" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:45 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:45 2024 -0800\n\nMerge branch \'jk/lsan-race-with-barrier\' into next\n\n* jk/lsan-race-with-barrier:\ngrep: work around LSan threading race with barrier\nindex-pack: work around LSan threading race with barrier\nthread-utils: introduce optional barrier type\nRevert \"index-pack: spawn threads atomically\"\ntest-lib: use individual lsan dir for --stress runs"]
	"40fdd46b7f90b40f58a2b9f4bba5735c29dc82a8" [label="40fdd46" color=gold3 fillcolor=gold3 tooltip="author: Alexander Shopov <ash@kambanaria.org>\nSat Dec 21 18:30:14 2024 +0100\ncommitter: Alexander Shopov <ash@kambanaria.org>\nFri Dec 27 22:42:29 2024 +0100\n\nl10n: bg.po: Updated Bulgarian translation (5804t)\n\nSigned-off-by: Alexander Shopov <ash@kambanaria.org>"]
	"414c82300abf8d1f4c8ce7bacc68f3848bdb27f4" [label="414c823" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 04 08:00:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:58:02 2025 -0800\n\nbuiltin/repack: fix `--keep-unreachable` when there are no packs\n\nThe \"--keep-unreachable\" flag is supposed to append any unreachable\nobjects to the newly written pack. This flag is explicitly documented as\nappending both packed and loose unreachable objects to the new packfile.\nAnd while this works alright when repacking with preexisting packfiles,\nit stops working when the repository does not have any packfiles at all.\n\nThe root cause are the conditions used to decide whether or not we want\nto append \"--pack-loose-unreachable\" to git-pack-objects(1). There are\na couple of conditions here:\n\n- `has_existing_non_kept_packs()` checks whether there are existing\npackfiles. This condition makes sense to guard \"--keep-pack=\",\n\"--unpack-unreachable\" and \"--keep-unreachable\", because all of\nthese flags only make sense in combination with existing packfiles.\nBut it does not make sense to disable `--pack-loose-unreachable`\nwhen there aren\'t any preexisting packfiles, as loose objects can be\npacked into the new packfile regardless of that.\n\n- `delete_redundant` checks whether we want to delete any objects or\npacks that are about to become redundant. The documentation of\n`--keep-unreachable` explicitly says that `git repack -ad` needs to\nbe executed for the flag to have an effect.\n\nIt is not immediately obvious why such redundant objects need to be\ndeleted in order for \"--pack-unreachable-objects\" to be effective.\nBut as things are working as documented this is nothing we\'ll change\nfor now.\n\n- `pack_everything & PACK_CRUFT` checks that we\'re not creating a\ncruft pack. This condition makes sense in the context of\n\"--pack-loose-unreachable\", as unreachable objects would end up in\nthe cruft pack anyway.\n\nSo while the second and third condition are sensible, it does not make\nany sense to condition `--pack-loose-unreachable` on the existence of\npackfiles.\n\nFix the bug by splitting out the \"--pack-loose-unreachable\" and only\nmaking it depend on the second and third condition. Like this, loose\nunreachable objects will be packed regardless of any preexisting\npackfiles.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"41875498b7944e2c73e7a8ed9b6a91c9d7001b12" [label=4187549 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:56:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:56:15 2025 -0800\n\nMerge branch \'ps/path-sans-the-repository\' into next\n\nThe path.[ch] API takes an explicit repository parameter passed\nthroughout the callchain, instead of relying on the_repository\nsingleton instance.\n\n* ps/path-sans-the-repository:\npath: adjust last remaining users of `the_repository`\nenvironment: move access to \"core.sharedRepository\" into repo settings\nenvironment: move access to \"core.hooksPath\" into repo settings\nrepo-settings: introduce function to clear struct\npath: drop `git_path()` in favor of `repo_git_path()`\nrerere: let `rerere_path()` write paths into a caller-provided buffer\npath: drop `git_common_path()` in favor of `repo_common_path()`\nworktree: return allocated string from `get_worktree_git_dir()`\npath: drop `git_path_buf()` in favor of `repo_git_path_replace()`\npath: drop `git_pathdup()` in favor of `repo_git_path()`\npath: drop unused `strbuf_git_path()` function\npath: refactor `repo_submodule_path()` family of functions\nsubmodule: refactor `submodule_to_gitdir()` to accept a repo\npath: refactor `repo_worktree_path()` family of functions\npath: refactor `repo_git_path()` family of functions\npath: refactor `repo_common_path()` family of functions"]
	"41c78cf69092b6975ed9512a7c42575c7a2dfcc8" [label="41c78cf" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:08 2025 -0800\n\nMerge branch 'ps/more-sign-compare' into next\n\nMore -Wsign-compare fixes.\n\n* ps/more-sign-compare:\nsign-compare: avoid comparing ptrdiff with an int/unsigned\ncommit-reach: use `size_t` to track indices when computing merge bases\nshallow: fix -Wsign-compare warnings\nbuiltin/log: fix remaining -Wsign-compare warnings\nbuiltin/log: use `size_t` to track indices\ncommit-reach: use `size_t` to track indices in `get_reachable_subset()`\ncommit-reach: use `size_t` to track indices in `remove_redundant()`\ncommit-reach: fix type of `min_commit_date`\ncommit-reach: fix index used to loop through unsigned integer\nprio-queue: fix type of `insertion_ctr`"]
	"41c793eae900e632dbc73ec7f900ea1e7d38aa92" [label="41c793e" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nSat Mar 01 16:36:02 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:00:51 2025 -0800\n\ndoc: update howto-index.sh for .adoc extensions\n\nThe .txt extensions were changed to .adoc in 1f010d6bdf (doc: use .adoc\nextension for AsciiDoc files, 2025-01-20).  This left broken links in\nthe generated howto-index.html.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"41f1a8435a900b660b7a6bc9da8dce2665e4b70a" [label="41f1a84" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:22 2025 -0800\n\ngit-compat-util: move include of \"compat/zlib.h\" into \"git-zlib.h\"\n\nWe include \"compat/zlib.h\" in \"git-compat-util.h\", which is\nunnecessarily broad given that we only have a small handful of files\nthat use the zlib library. Move the header into \"git-zlib.h\" instead and\nadapt users of zlib to include that header.\n\nOne exception is the reftable library, as we don\'t want to use the\nGit-specific wrapper of zlib there, so we include \"compat/zlib.h\"\ninstead. Furthermore, we move the include into \"reftable/system.h\" so\nthat users of the library other than Git can wire up zlib themselves.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"41fd39392bd24555d446260b1a45b986ab14e987" [label="41fd393" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:18:01 2025 -0800\n\nbuiltin/maintenance: introduce \"reflog-expire\" task\n\nBy default, git-maintenance(1) uses the \"gc\" task to ensure that the\nrepository is well-maintained. This can be changed, for example by\neither explicitly configuring which tasks should be enabled or by using\nthe \"incremental\" maintenance strategy. If so, git-maintenance(1) does\nnot know to expire reflog entries, which is a subtask that git-gc(1)\nknows to perform for the user. Consequently, the reflog will grow\nindefinitely unless the user manually trims it.\n\nIntroduce a new \"reflog-expire\" task that plugs this gap:\n\n- When running the task directly, then we simply execute `git reflog\nexpire --all`, which is the same as git-gc(1).\n\n- When running git-maintenance(1) with the `--auto` flag, then we only\nrun the task in case the \"HEAD\" reflog has at least N reflog entries\nthat would be discarded. By default, N is set to 100, but this can\nbe configured via \"maintenance.reflog-expire.auto\". When a negative\ninteger has been provided we always expire entries, zero causes us\nto never expire entries, and a positive value specifies how many\nentries need to exist before we consider pruning the entries.\n\nNote that the condition for the `--auto` flags is merely a heuristic and\noptimized for being fast. This is because `git maintenance run --auto`\nwill be executed quite regularly, so scanning through all reflogs would\nlikely be too expensive in many repositories.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4278fbdd486c6c3c84a2612285ce8b12dc898718" [label="4278fbd" color=gold3 fillcolor=gold3 tooltip="author: Calvin Wan <calvinwan@google.com>\nFri Feb 21 20:04:45 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:11 2025 -0800\n\nfetch-pack: refactor packet writing\n\nRefactor write_fetch_command_and_capabilities() to a more\ngeneral-purpose function, write_command_and_capabilities(), enabling it\nto serve both fetch and additional commands.\n\nIn this context, \"command\" refers to the \"operations\" supported by\nGit\'s wire protocol https://git-scm.com/docs/protocol-v2, such as a Git\nsubcommand (e.g., git-fetch(1)) or a server-side operation like\n\"object-info\" as implemented in commit a2ba162c\n(object-info: support for retrieving object info, 2021-04-20).\n\nFurthermore, write_command_and_capabilities() is moved to connect.c,\nmaking it accessible to additional commands in the future.\n\nTo move write_command_and_capabilities() to connect.c, we need to\nadjust how `advertise_sid` is managed. Previously,\nin fetch_pack.c, `advertise_sid` was a static variable, modified using\ngit_config_get_bool().\n\nIn connect.c, we now initialize `advertise_sid` at the beginning by\ndirectly using git_config_get_bool(). This change is safe because:\n\nIn the original fetch-pack.c code, there are only two places that\nwrite `advertise_sid` :\n1. In function do_fetch_pack:\nif (!server_supports(\"session-id\"))\nadvertise_sid = 0;\n2. In function fetch_pack_config():\ngit_config_get_bool(\"transfer.advertisesid\", &advertise_sid);\n\nAbout 1, since do_fetch_pack() is only relevant for protocol v1, this\nassignment can be ignored in our refactor, as\nwrite_command_and_capabilities() is only used in protocol v2.\n\nAbout 2, git_config_get_bool() is from config.h and it is an out-of-box\ndependency of connect.c, so we can reuse it directly.\n\nHelped-by: Jonathan Tan <jonathantanmy@google.com>\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Eric Ju  <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"42846efc3ba31cc0384ca57a70b27fc37313c6ad" [label="42846ef" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:19 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:36 2025 -0800\n\nmeson: improve handling of `sane_tool_path` option\n\nThe `sane_tool_path` option can be used to override the PATH variable\nfrom which the build process, tests and ultimately Git will end up\npicking programs from. It is currently lacking though because we only\nuse it to populate the PATH environment variable for executed scripts\nand for the `BROKEN_PATH_FIX` mechanism, but we don't use it to find\nprograms used in the build process itself.\n\nFix this issue by treating it similar to the Windows-specific paths,\nwhich will make us use it both to find programs and to populate the PATH\nenvironment variable.\n\nTo help with this fix, change the type of the option to be an array of\npaths, which makes the handling a bit easier for us. It's also the\ncorrect thing to do as the input indeed is a list of paths.\n\nFurthermore, the option now overrides the default behaviour on Windows,\nwhich si to pick up tools from Git for Windows. This is done so that it\nbecomes easier to override that default behaviour in case it's not\ndesired.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"42c0ae87b126c6787791d005ec559bf3f6bc5de7" [label="42c0ae8" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:21:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:21:02 2025 -0800\n\nSync with 'master'"]
	"43464adc45b4c749ca1136f2e500b0c0cb201603" [label="43464ad" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:47 2025 -0800\n\nMerge branch 'sk/strlen-returns-size_t' into next\n\nCode clean-up.\n\n* sk/strlen-returns-size_t:\ndate.c: Fix type missmatch warings from msvc"]
	"43850dcf9c4ca6407abdd167aa3acc098e0e0f7c" [label="43850dc" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nThu Jan 09 15:09:52 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 16:55:00 2025 -0800\n\nt/unit-tests: convert hash to use clar test framework\n\nAdapt the hash test functions to clar framework by using clar\nassertions where necessary. Following the consensus to convert\nthe unit-tests scripts found in the t/unit-tests folder to clar driven by\nPatrick Steinhardt. Test functions are structured as a standalone to\ntest individual hash string and literal case.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"43a839197795a7f0582efd66bc249dac89f86b68" [label="43a8391" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:01 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:01 2025 -0800\n\nbuiltin/verify-tag: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/verify-tag.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_verify_tag()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"442b7e0018fac61874a8423270e8fee2c0c7e689" [label="442b7e0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:29 2025 -0800\n\nMerge branch \'ps/setup-reinit-fixes\'\n\n\"git init\" to reinitialize a repository that already exists cannot\nchange the hash function and ref backends; such a request is\nsilently ignored now.\n\n* ps/setup-reinit-fixes:\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_HASH\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_REF_FORMAT\nt0001: remove duplicate test"]
	"445f9f4f35c663fb668425f8c8fe0a1d58e1d8c7" [label="445f9f4" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:43 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:36 2025 -0800\n\nreftable: stop using `BUG()` in trivial cases\n\nStop using `BUG()` in the remaining trivial cases that we still have in\nthe reftable library. Instead of aborting the program, we'll now bubble\nup a `REFTABLE_API_ERROR` to indicate misuse of the calling conventions.\n\nNote that in both `reftable_reader_{inc,dec}ref()` we simply stop\ncalling `BUG()` altogether. The only situation where the counter should\nbe zero is when the structure has already been free'd anyway, so we\nwould run into undefined behaviour regardless of whether we try to abort\nthe program or not.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"44732094fb8d221b28438b928866e03148476a74" [label=4473209 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:04 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:34 2025 -0800\n\nhash: fix \"-Wsign-compare\" warnings\n\nThere are a couple of trivial \"-Wsign-compare\" warnings in \"hash.c\". Fix\nthem.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4478ad37a7d233b8db4d46dd563ece0bc8b00af4" [label="4478ad3" color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nThu Mar 06 11:26:18 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 17:35:07 2025 -0800\n\nident: stop assuming that `gw_gecos` is writable\n\nIn 590e081dea7c (ident: add NO_GECOS_IN_PWENT for systems without\npw_gecos in struct passwd, 2011-05-19), code was introduced to iterate\nover the `gw_gecos` field; The loop variable is of type `char *`, which\nassumes that `gw_gecos` is writable.\n\nHowever, it is not necessarily writable (and it is a bad idea to have it\nwritable in the first place), so let\'s switch the loop variable type to\n`const char *`.\n\nThis is not a new problem, but what is new is the Meson build. While it\ndoes not trigger in CI builds, imitating the commands of\n`ci/run-build-and-tests.sh` in a regular Git for Windows SDK (`meson\nsetup build . --fatal-meson-warnings --warnlevel 2 --werror --wrap-mode\nnofallback -Dfuzzers=true` followed by `meson compile -C build --`\nresults in this beautiful error:\n\n\"cc\" [...] -o libgit.a.p/ident.c.obj \"-c\" ../ident.c\n../ident.c: In function \'copy_gecos\':\n../ident.c:68:18: error: assignment discards \'const\' qualifier from pointer target type [-Werror=discarded-qualifiers]\n68 |         for (src = get_gecos(w); *src && *src != \',\'; src++) {\n|                  ^\ncc1.exe: all warnings being treated as errors\n\nNow, why does this not trigger in CI? The answer is as simple as it is\npuzzling: The `win+Meson` job completely side-steps Git for Windows\'\ndevelopment environment, opting instead to use the GCC that is on the\n`PATH` in GitHub-hosted `windows-latest` runners. That GCC is pinned to\nv12.2.0 and targets the UCRT (unlikely to change any time soon, see\nhttps://github.com/actions/runner-images/blob/win25/20250303.1/images/windows/toolsets/toolset-2022.json#L132-L141).\nThat is in stark contrast to Git for Windows, which uses GCC v14.2.0 and\ntargets MSVCRT. Git for Windows\' `Makefile`-based build also obviously\nuses different compiler flags, otherwise this compile error would have\nhad plenty of opportunity in almost 14 years to surface.\n\nIn other words, contrary to my expectations, the `win+Meson` job is\nill-equipped to replace the `win build` job because it exercises a\ncompletely different tool version/compiler flags vector than what Git\nfor Windows needs.\n\nNevertheless, there is currently this huge push, including breaking\nchanges after -rc1 and all, for switching to Meson. Therefore, we need\nto make it work, somehow, even in Git for Windows\' SDK, hence this\npatch, at this point in time.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"44945dfe867e56aab1685a0f371665273291a2af" [label="44945df" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:21 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:10:41 2024 -0800\n\nprio-queue: fix type of `insertion_ctr`\n\nIn 62e745ced2 (prio-queue: use size_t rather than int for size,\n2024-12-20), we have converted `struct prio_queue` to use `size_t` to\ntrack the number of entries in the queue as well as the allocated size\nof the underlying array. There is one more counter though, namely the\ninsertion counter, that is still using an `unsigned` instead of a\n`size_t`. This is unlikely to ever be a problem, but it makes one wonder\nwhy some indices use `size_t` while others use `unsigned`. Furthermore,\nthe mentioned commit stated the intent to also adapt these variables,\nbut seemingly forgot to do so.\n\nFix the issue by converting those counters to use `size_t`, as well.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"454d79b61be88831c1b899a1268f7b3d6cc577d2" [label="454d79b" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:18 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:36 2025 -0800\n\nmeson: improve PATH handling\n\nWhen locating programs required for the build we give some special\ntreatment to Windows systems so that we know to also look up tools\nprovided by a Git for Windows installation. This ensures that the build\ndoesn't have any prerequisites other than Microsoft Visual Studio, Meson\nand Git for Windows.\n\nConsequently, some of the programs returned by `find_program()` may not\nbe found via PATH, but via these extra directories. But while Meson can\nuse these tools directly without any special treatment, any scripts that\nwe execute may not be able to find those programs. To help them we thus\nprepend the directories of a subset of the found programs to PATH.\n\nThis doesn't make much sense though: we don't need to prepend PATH for\nany program that was found via PATH, but we really only need to do so\nfor programs located via the extraneous Windows-specific paths. So\ninstead of prepending all programs paths, we really only need to prepend\nthe Windows-specific paths.\n\nAdapt the code accordingly by only prepeding Windows-specific paths to\nPATH, which both simplifies the code and clarifies intent.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"455ac07021d4feede4f5b7e39bf00dc186ce3c09" [label="455ac07" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:28 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:12:40 2024 -0800\n\nshallow: fix -Wsign-compare warnings\n\nFix a couple of -Wsign-compare issues in \"shallow.c\" and mark the file\nas -Wsign-compare-clean. This change prepares the code for a refactoring\nof `repo_in_merge_bases_many()`, which will be adapted to accept the\nnumber of commits as `size_t` instead of `int`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"45761988ac01b99f9a81ad6ec884bef3c2d8e402" [label=4576198 color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nTue Feb 11 22:01:52 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 22:34:36 2025 -0800\n\ndoc: clarify the intent of the renormalize option in the merge machinery\n\nThe -X renormalize (or merge.renormalize config) option is intended to\nreduce conflicts due to normalization of newer versions of history.  It\ndoes so by renormalizing files that it is about to do a three-way\ncontent merge on.  Some folks thought it would renormalize all files\nthroughout the tree, and the previous wording wasn't clear enough to\ndispell that misconception.  Update the docs to make it clear that the\nmerge machinery will only apply renormalization to files which need a\nthree-way content merge.\n\n(Technically, the merge machinery also does renormalization on\nmodify/delete conflicts, in order to see if the modification was merely\na normalization; if so, it can accept the delete and not report a\nconflict.  But it's not clear that this piece needs to be explained to\nusers, and trying to distinguish it might feel like splitting hairs and\novercomplicating the explanation, so we leave it out.)\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"45843d8f4eb2bbfc73cc361ba9d612d088dc8a4f" [label="45843d8" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:24 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:45 2024 -0800\n\ncommit-reach: use `size_t` to track indices in `remove_redundant()`\n\nThe function `remove_redundant()` gets as input an array of commits as\nwell as the size of that array and then drops redundant commits from\nthat array. It then returns either `-1` in case an error occurred, or\nthe new number of items in the array.\n\nThe function receives and returns these sizes with a signed integer,\nwhich causes several warnings with -Wsign-compare. Fix this issue by\nconsistently using `size_t` to track array indices and splitting up\nthe returned value into a returned error code and a separate out pointer\nfor the new computed size.\n\nNote that `get_merge_bases_many()` and related functions still track\narray sizes as a signed integer. This will be fixed in a subsequent\ncommit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"458f8b0eab9af7b770a25e9277f70bb4df3c8d90" [label="458f8b0" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:20 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:24 2025 -0800\n\nparse-options.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"45c0897204cfb5d0d88370a4907e41b0eb717b6c" [label="45c0897" color=gold3 fillcolor=gold3 tooltip="author: Sam James <sam@gentoo.org>\nWed Jan 08 04:42:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 17:05:39 2025 -0800\n\nmeson: fix perl dependencies\n\n`generate_perl_command` needs `depends: [git_version_file]` and the uses\nin top-level meson.build were fine, but the ones in perl/ weren't, causing\nparallel build failures in some cases as GIT-BUILD-OPTIONS wasn't yet\navailable.\n\nSigned-off-by: Sam James <sam@gentoo.org>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"466f64b96f0ea720ef53599d792de5a0d77e3003" [label="466f64b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:06:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:06:00 2025 -0800\n\nSync with 'master'"]
	"469e1df3f9863738c533e348b4525a6963cb1025" [label="469e1df" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:18:00 2025 -0800\n\nbuiltin/reflog: stop storing per-reflog expiry dates globally\n\nAs described in the preceding commit, the per-reflog expiry dates are\nstored in a global pair of variables. Refactor the code so that they are\ncontained in `sturct reflog_expire_options` to make the structure useful\nin other contexts.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07" [label="46afc2b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:00:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:00:48 2025 -0800\n\nStart the Git 2.49 cycle\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"46fb0843536f2e9281c45042b024098a38236b17" [label="46fb084" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:16 2025 -0800\n\nxdiff: avoid signed vs. unsigned comparisons in xemit.c\n\nThe unsigned `ignored` variable causes expressions to promote to\nunsigned. Use a signed value to make comparisons use the same types.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4767266eb4cedeaf40e4bda87fb9c8b6ae1ef127" [label=4767266 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:23 2025 -0800\n\nMerge branch 'ac/doc-http-ssl-type-config' into next\n\nTwo configuration variables about SSL authentication material that\nweren't mentioned in the documentations are now mentioned.\n\n* ac/doc-http-ssl-type-config:\ndocs: indicate http.sslCertType and sslKeyType"]
	"4771501c0a125dd3560391cbd716c63a281e8244" [label=4771501 color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nTue Jan 14 12:15:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 14 20:14:54 2025 -0800\n\nmeson: ensure correct version-def.h is used\n\nTo build the libgit-version library, Meson first generates\n`version-def.h` in the build directory. Then it compiles `version.c`\ninto a library. During compilation, Meson tells to include both the\nbuild directory and the project root directory.\n\nHowever, when the user previously has compiled Git using Make, they will\nhave a `version-def.h` file in project root directory as well. Because\n`version-def.h` is included in `version.c` using the #include directive\nwith double quotes, some preprocessors will look for the header file in\nthe same directory as the source file. This will cause compilation of\n`version.c` ran by Meson to include `version-def.h` previously made by\nMake, which might be out of date.\n\nTo explicitly tell the preprocessor which `version-def.h` to use, pass\nthe absolute path of this file as macro GIT_VERSION_H to the\npreprocessor using option `-D` and have `version.c` `#include\nGIT_VERSION_H`. To remain working with other build systems than Meson,\ninclude \"version-def.h\" if that macro is not defined.\n\nCo-authored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"48524fac643afd7ec70d43684902598ad6d5b954" [label="48524fa" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:23 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:16 2025 -0800\n\ncsum-file: store the hash algorithm as a struct field\n\nThroughout the hashfile API, we rely on a reference to 'the_hash_algo',\nand call its _unsafe function variants directly.\n\nPrepare for a future change where we may use a different 'git_hash_algo'\npointer (instead of just relying on 'the_hash_algo' throughout) by\nmaking the 'git_hash_algo' pointer a member of the 'hashfile' structure\nitself.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"49b299215dd779b781c5a39af85a5acb6294acbd" [label="49b2992" color=gold3 fillcolor=gold3 tooltip="author: Mike Hommey <mh@glandium.org>\nFri Jan 17 08:49:09 2025 +0900\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 18:27:42 2025 -0800\n\nconnect: address -Wsign-compare warnings\n\nMost of the warnings were about loop variables being declared as ints\nwith a condition using a size_t, whereby switching the variable to\nsize_t fixes the warning.\n\nOne other case was comparing the result of strlen to an int passed\nas an argument, which turns out could just as well be passed as a\nsize_t, albeit trickling to other functions.\n\nSigned-off-by: Mike Hommey <mh@glandium.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"49d9cd8dea520a318412792b50ab4b91ce71b9fe" [label="49d9cd8" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nFri Mar 07 15:18:07 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 21:23:29 2025 -0800\n\nhelp: include git-zlib.h to print zlib version\n\nIn 41f1a8435a (git-compat-util: move include of \"compat/zlib.h\" into\n\"git-zlib.h\", 2025-01-28) some code was refactored to enable easier\nlinking against zlib-ng.\n\nThis removed `zlib.h` being indirectly included in `help.c`. As this\nfile uses `ZLIB_VERSION` to print the version number of zlib when\nrunning git-version(1) with `--build-options`, this resulted in a\nregression.\n\nInclude `git-zlib.h` directly into `help.c` to print zlib version\ninformation. This brings back the zlib version in the output of\n`git version --build-options`.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nReviewed-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4a2b3df546b6fee8cf9cc1220a7120b6e54b37bc" [label="4a2b3df" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:53:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:53:02 2025 -0800\n\nmergetag object fc613c01d45b034290e7fb69977a2cc2715b1259\ntype commit\ntag l10n-2.48.0-rnd1\ntagger Jiang Xin <worldhello.net@gmail.com> 1736236345 +0800\n\nl10n-2.48.0-rnd1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE37vMEzKDqYvVxs51k24VDd1FMtUFAmd83TkACgkQk24VDd1F\nMtV+uQ//U8cszgueBJ7CGx97StifMEc7oJzOnxYT6X1B6zdwOXl7MOsUD5kvw2sI\nlO1tIMfpZavweJl5LcN5QJBPPpuFJkqmMrrFgCbDhjOyYkEcJmLsZA+WIH34aHWu\nuTJSnToxWsN/vr1eBNGQH5MxxHRMKIKQxz0+LgafGp9THlOxEsexfxPE64LnmAiQ\ngjETkMkiQnMp+Wn2n8uFarfpxw2ENbs2lAaWWxLh99RyHZt8UoEDvlXS1GFmVfnw\ntGRuBdjwftlieLagau2x78hrxZPO3AnbMf93FRdCB1w7E5+anoId3t9R9wuCqH6h\nxVlz9jG2VG9qYhkIlUe9qXriOVpmCO8llEQYOyBM0LX5fFE4Jos0hG3DEYB+ilEB\niSoaNklQTYvn24ejxxyRKiYq85XoVw1bXskQsInQxoYOZZid/Kx4DbsWuVvYtqJG\n38aKu31BgN1HuGc5NLQX9KhT9cVgUAMAHdcYnwhm3GYFNjsnEV/8hPkNzCM9U4zf\nPP+Ns5snmkgXqP2baYDt/2j4CXdtwRTKgzh4BCeqsZqwliAvoYoPP3APFMzsx+uG\nUV0jj3IIUizJs6XFwIBzfjhnUTmKvh0XqFr8t5/LdSLFSoCihiOOsnR37qRkPILz\nvzh0/RicLxDXEsriCTcfdjaD4K5Sx9t707BjOa7pMvrMwFvxvR0=\n=WD1L\n-----END PGP SIGNATURE-----\nMerge tag 'l10n-2.48.0-rnd1' of https://github.com/git-l10n/git-po\n\nl10n-2.48.0-rnd1\n\n* tag 'l10n-2.48.0-rnd1' of https://github.com/git-l10n/git-po:\nl10n: po-id for 2.48\nl10n: zh_CN: updated translation for 2.48\nl10n: uk: v2.48 update\nl10n: sv.po, fixed swedish typos\nl10n: vi: Updated translation for 2.48\nl10n: Update German translation\nl10n: tr: Update Turkish translations for 2.48\nl10n: sv.po: Update Swedish translation\nl10n: fr: v2.48.0\nl10n: zh_TW: Git 2.48 round 2\nl10n: zh_TW: Git 2.48\nl10n: bg.po: Updated Bulgarian translation (5804t)\nl10n: fr.po: Minor improvements"]
	"4a6cc6a20eeb593f1ad0f60475a9867532d7c5d5" [label="4a6cc6a" color=gold3 fillcolor=gold3 tooltip="author: Johannes Sixt <j6t@kdbg.org>\nThu Feb 20 10:54:37 2025 +0100\ncommitter: Johannes Sixt <j6t@kdbg.org>\nThu Feb 20 10:54:37 2025 +0100\n\nMerge branch 'pks-meson-support' of https://github.com/pks-t/gitk\n\n* 'pks-meson-support' of https://github.com/pks-t/gitk:\ngitk: introduce support for the Meson build system\ngitk: extract script to build executable\n\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>"]
	"4ad47d2de3cf71686a0dffcdda069cbd202938bd" [label="4ad47d2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 03:05:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 19:08:58 2025 -0800\n\ngitcli: document that command line trumps config and env\n\nWe centrally explain that \"--no-whatever\" is the way to countermand\nthe \"--whatever\" option.  Explain that a configured default and the\nvalue specified by an environment variable can be overridden by the\ncorresponding command line option, too.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>\nAcked-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4ad71b16cdc8f5f367931b908fa904e8e8c48b47" [label="4ad71b1" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:03 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:38 2025 -0800\n\ngitlab-ci: add linux32 job testing against i386\n\nAdd another job to GitLab CI that tests against the i386 architecture.\nThis job is equivalent to the same job in GitHub Workflows.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4af44766d51c0fc28a140e395604f3d46fb1bf18" [label="4af4476" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:29 2025 -0800\n\nMerge branch \'da/xdiff-w-sign-compare-workaround\' into next\n\nNoises from \"-Wsign-compare\" in the borrowed xdiff code has been\nsquelched.\n\n* da/xdiff-w-sign-compare-workaround:\nxdiff: avoid signed vs. unsigned comparisons in xutils.c\nxdiff: avoid signed vs. unsigned comparisons in xpatience.c\nxdiff: avoid signed vs. unsigned comparisons in xhistogram.c\nxdiff: avoid signed vs. unsigned comparisons in xemit.c\nxdiff: avoid signed vs. unsigned comparisons in xdiffi.c\nxdiff: move sign comparison warning guard into each file"]
	"4b5073c64b6e4180dcf1bed09c6fdd52cd1b2d21" [label="4b5073c" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 12:31:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:28:28 2025 -0800\n\nci: repurpose \"linux-gcc\" job for deprecations\n\nThe \"linux-gcc\" job isn\'t all that interesting by itself and can be\nconsidered more or less the \"standard\" job: it is running with a\nreasonably up-to-date image and uses GCC as a compiler, both of which we\nalready cover in other jobs.\n\nThere is one exception though: we change the default branch to be \"main\"\ninstead of \"master\", so it is forging ahead a bit into the future to\nmake sure that this change does not cause havoc. So let\'s expand on this\na bit and also add the new \"WITH_BREAKING_CHANGES\" flag to the mix.\n\nRename the job to \"linux-breaking-changes\" accordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4b995465b2ed97cb6df5d48bcb843f7f631627bf" [label="4b99546" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 31 23:14:19 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 23:58:45 2025 -0800\n\nt/unit-tests: convert strbuf test to use clar test framework\n\nAdapt strbuf test script to clar framework by using clar assertions\nwhere necessary.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4cbe9e0e21fca682d78980a03184071e9fe1c955" [label="4cbe9e0" color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nThu Jan 19 13:40:31 2023 +0100\ncommitter: Johannes Schindelin <johannes.schindelin@gmx.de>\nSat Jan 11 18:17:42 2025 +0100\n\ngitk(Windows): avoid inadvertently calling executables in the worktree\n\nJust like CVE-2022-41953 for Git GUI, there exists a vulnerability of\n`gitk` where it looks for `taskkill.exe` in the current directory before\nsearching `PATH`.\n\nNote that the many `exec git` calls are unaffected, due to an obscure\nquirk in Tcl's `exec` function. Typically, `git.exe` lives next to\n`wish.exe` (i.e. the program that is run to execute `gitk` or Git GUI)\nin Git for Windows, and that is the saving grace for `git.exe because\n`exec` searches the directory where `wish.exe` lives even before the\ncurrent directory, according to\nhttps://www.tcl-lang.org/man/tcl/TclCmd/exec.htm#M24:\n\nIf a directory name was not specified as part of the application\nname, the following directories are automatically searched in\norder when attempting to locate the application:\n\nThe directory from which the Tcl executable was loaded.\n\nThe current directory.\n\nThe Windows 32-bit system directory.\n\nThe Windows home directory.\n\nThe directories listed in the path.\n\nThe same is not true, however, for `taskkill.exe`: it lives in the\nWindows system directory (never mind the 32-bit, Tcl's documentation is\noutdated on that point, it really means `C:\\Windows\\system32`).\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>"]
	"4cd33545ba4fa82324b454aa5bf2748b40a572fb" [label="4cd3354" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:39 2025 -0800\n\nSync with 'master'"]
	"4d2f9d7f18c5060a49537fa0f263be1b7fa775b8" [label="4d2f9d7" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:19 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:19 2025 -0800\n\nMerge branch \'ps/ci-misc-updates\' into next\n\nCI updates (containerization, dropping stale ones, etc.).\n\n* ps/ci-misc-updates:\nci: remove stale code for Azure Pipelines\nci: use latest Ubuntu release\nci: stop special-casing for Ubuntu 16.04\ngitlab-ci: add linux32 job testing against i386\ngitlab-ci: remove the \"linux-old\" job\ngithub: simplify computation of the job\'s distro\ngithub: convert all Linux jobs to be containerized\ngithub: adapt containerized jobs to be rootless\nt7422: fix flaky test caused by buffered stdout\nt0060: fix EBUSY in MinGW when setting up runtime prefix"]
	"4e2609601248b96297febd6e39a59f45c0d0013c" [label="4e26096" color=gold3 fillcolor=gold3 tooltip="author: Eric Ju <eric.peijian@gmail.com>\nFri Feb 21 20:04:42 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:10 2025 -0800\n\ngit-compat-util: add strtoul_ul() with error handling\n\nWe already have strtoul_ui() and similar functions that provide proper\nerror handling using strtoul from the standard library. However,\nthere isn't currently a variant that returns an unsigned long.\nThis commit introduces strtoul_ul() to address this gap, enabling the\nreturn of an unsigned long with proper error handling.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4e3dd47c9d5f9dcae0a0d6c59c6676213914ac0e" [label="4e3dd47" color=gold3 fillcolor=gold3 tooltip="author: Scott Chacon <schacon@gmail.com>\nMon Jan 13 10:33:44 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 17:20:01 2025 -0800\n\nhelp: interpret boolean string values for help.autocorrect\n\nA help.autocorrect value of 1 is currently interpreted as \"wait 1\ndecisecond\", which can be confusing to users who believe they are setting a\nboolean value to turn the autocorrect feature on.\n\nInterpret the value of help.autocorrect as either one of the accepted list\nof special values (\"never\", \"immediate\", ...), a boolean or an integer. If\nthe value is 1, it is no longer interpreted as a decisecond value of 0.1s\nbut as a true boolean, the equivalent of \"immediate\". If the value is 2 or\nmore, continue treating it as a decisecond wait time.\n\nFalse boolean string values (\"off\", \"false\", \"no\") are now equivalent to\n\"never\", meaning that guessed values are still shown but nothing is\nexecuted. True boolean string values are interpreted as \"immediate\".\n\nSigned-off-by: Scott Chacon <schacon@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4e5a29be8250487b387ff3b254e30b2320407821" [label="4e5a29b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:41 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:41 2025 -0800\n\nSync with 'master"]
	"4e746b1a31f9f0036032b6f94279cf16fb363203" [label="4e746b1" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:41:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\n\nThe second batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4ebba56419f0a7530ae8378284d7ee0cec22ebfa" [label="4ebba56" color=gold3 fillcolor=gold3 tooltip="author: Lucas Seiki Oshiro <lucasseikioshiro@gmail.com>\nTue Feb 25 17:18:00 2025 -0300\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 01:06:06 2025 -0800\n\nmerge-strategies.adoc: detail submodule merge\n\nSubmodule merges are, in general, similar to other merges based on oid\nthree-way-merge. When a conflict happens, however, Git has two special\ncases (introduced in 68d03e4a6e44) on handling the conflict before\nyielding it to the user. From the merge-ort and merge-recursive sources:\n\n- \"Case #1: a is contained in b or vice versa\": both strategies try to\nperform a fast-forward in the submodules if the commit referred by the\nconflicted submodule is descendant of another;\n\n- \"Case #2: There are one or more merges that contain a and b in the\nsubmodule.  If there is only one, then present it as a suggestion to the\nuser, but leave it marked unmerged so the user needs to confirm the\nresolution.\"\n\nAdd a small paragraph on merge-strategies.adoc describing this behavior.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Lucas Seiki Oshiro <lucasseikioshiro@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"4f02f4d68d8eefe728008974640839ef6e1b2182" [label="4f02f4d" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nSun Jan 19 14:23:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:42:55 2025 -0800\n\nparse_pack_header_option(): avoid unaligned memory writes\n\nIn order to recreate a pack header in our in-memory buffer, we cast the\nbuffer to a \"struct pack_header\" and assign the individual fields. This\nis reported to cause SIGBUS on sparc64 due to alignment issues.\n\nWe can work around this by using put_be32() which will write individual\nbytes into the buffer.\n\nReported-by: Koakuma <koachan@protonmail.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5040f9f164ea7d633237e52bed311d1e9773c78e" [label="5040f9f" color=gold3 fillcolor=gold3 tooltip="author: Christian Couder <christian.couder@gmail.com>\nTue Feb 18 12:32:04 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:57:40 2025 -0800\n\ndoc: add technical design doc for large object promisors\n\nLet\'s add a design doc about how we could improve handling liarge blobs\nusing \"Large Object Promisors\" (LOPs). It\'s a set of features with the\ngoal of using special dedicated promisor remotes to store large blobs,\nand having them accessed directly by main remotes and clients.\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"50707f29dbb2fce94666d9fcd390d64079dbf547" [label="50707f2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:29 2025 -0800\n\nMerge branch 'tb/refs-exclude-fixes' into next\n\nThe refname exclusion logic in the packed-ref backend has been\nbroken for some time, which confused upload-pack to advertise\ndifferent set of refs.  This has been corrected.\n\n* tb/refs-exclude-fixes:\nrefs.c: stop matching non-directory prefixes in exclude patterns\nrefs.c: remove empty '--exclude' patterns"]
	"507595e568fb5cb49cf7c2c93c7864130d7b0353" [label="507595e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 23:29:04 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 23:29:04 2025 -0800\n\nMerge branch \'ps/reftable-sans-compat-util\' into ps/reftable-windows-unlink-fix\n\n* ps/reftable-sans-compat-util:\nMakefile: skip reftable library for Coccinelle\nreftable: decouple from Git codebase by pulling in \"compat/posix.h\"\ngit-compat-util.h: split out POSIX-emulating bits\ncompat/mingw: split out POSIX-related bits\nreftable/basics: introduce `REFTABLE_UNUSED` annotation\nreftable/basics: stop using `SWAP()` macro\nreftable/stack: stop using `sleep_millisec()`\nreftable/system: introduce `reftable_rand()`\nreftable/reader: stop using `ARRAY_SIZE()` macro\nreftable/basics: provide wrappers for big endian conversion\nreftable/basics: stop using `st_mult()` in array allocators\nreftable: stop using `BUG()` in trivial cases\nreftable/record: don\'t `BUG()` in `reftable_record_cmp()`\nreftable/record: stop using `BUG()` in `reftable_record_init()`\nreftable/record: stop using `COPY_ARRAY()`\nreftable/blocksource: stop using `xmmap()`\nreftable/stack: stop using `write_in_full()`\nreftable/stack: stop using `read_in_full()`"]
	"508cf7f5d8907a281602a54551abcc58a16d0493" [label="508cf7f" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:28 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:26 2025 -0800\n\ntrace2.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"50d91206465b8dd42e275810dc78572fc35935b8" [label="50d9120" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:46 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:40 2025 -0800\n\nrefs/iterator: implement seeking for files iterators\n\nImplement seeking for \"files\" iterators. As we simply use a ref-cache\niterator under the hood the implementation is straight-forward. Note\nthat we do not implement seeking on reflog iterators, same as with the\n\"reftable\" backend.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"50e1821529fd0a096fe03f137eab143b31e8ef55" [label="50e1821" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:31 2025 -0800\n\nMerge branch 'jk/ci-coverity-update'\n\nCI update to make Coverity job work again.\n\n* jk/ci-coverity-update:\nci: set CI_JOB_IMAGE for coverity job"]
	"515579756c8d23ea2f3c6386a9333ecbe84d8a08" [label=5155797 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:06:40 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:07 2025 -0800\n\npacked-backend: check if header starts with \"# pack-refs with: \"\n\nWe always write a space after \"# pack-refs with:\" but we don\'t align\nwith this rule in the \"create_snapshot\" method where we would check\nwhether header starts with \"# pack-refs with:\". It might seem that we\nshould undoubtedly tighten this rule, however, we don\'t have any\ntechnical documentation about this and there is a possibility that we\nwould break the compatibility for other third-party libraries.\n\nBy investigating influential third-party libraries, we could conclude\nhow these libraries handle the header of \"packed-refs\" file:\n\n1. libgit2 is fine and always writes the space. It also expects the\nwhitespace to exist.\n2. JGit does not expect th header to have a trailing space, but expects\nthe \"peeled\" capability to have a leading space, which is mostly\nequivalent because that capability is typically the first one we\nwrite. It always writes the space.\n3. gitoxide expects the space t exist and writes it.\n4. go-git doesn\'t create the header by default.\n\nAs many third-party libraries expect a single space after \"# pack-refs\nwith:\", if we forget to write the space after the colon,\n\"create_snapshot\" won\'t catch this. And we would break other\nre-implementations. So, we\'d better tighten the rule by checking whether\nthe header starts with \"# pack-refs with: \".\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5173099aae25bedf7a87225891d124569cba7076" [label=5173099 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:33:10 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 19:05:50 2025 -0800\n\ntree-diff: clear parent array in path_appendnew()\n\nAll of the other functions which allocate a combine_diff_path struct\nzero out the parent array, but this code path does not. There's no bug,\nsince our caller will fill in most of the fields. But leaving the unused\nfields (like combine_diff_parent.path) uninitialized makes working with\nthe struct more error-prone than it needs to be.\n\nLet's just zero the parent field to be consistent with the\ncombine_diff_path_new() allocator.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"51a22e98a1c37d80c3150930dffd2ffcb128448d" [label="51a22e9" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:17 2025 -0800\n\nMerge branch \'mh/credential-cache-authtype-request-fix\' into next\n\nThe \"cache\" credential back-end did not handle authtype correctly,\nwhich has been corrected.\n\n* mh/credential-cache-authtype-request-fix:\ncredential-cache: respect authtype capability"]
	"5209a247e7aa6c9e47e649613fad3f4cb79502a2" [label="5209a24" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:32 2025 -0800\n\ncsum-file: stop depending on `the_repository`\n\nThere are multiple sites in \"csum-file.c\" where we use the global\n`the_repository` variable, either explicitly or implicitly by using\n`the_hash_algo`.\n\nRefactor the code to stop using `the_repository` by adapting functions\nto receive required data as parameters. Adapt callsites accordingly by\neither using `the_repository->hash_algo`, or by using a context-provided\nhash algorithm in case the subsystem already got rid of its dependency\non `the_repository`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"526c0a851b14d1bbec4b8d31a23d93ca0eb82637" [label="526c0a8" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nMon Dec 30 05:29:38 2024 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:18:58 2024 -0800\n\nindex-pack: work around LSan threading race with barrier\n\nWe sometimes get false positives from our linux-leaks CI job because of\na race in LSan itself. The problem is that one thread is still\ninitializing its stack in LSan's code (and allocating memory to do so)\nwhile anothe thread calls die(), taking down the whole process and\ntriggering a leak check.\n\nThe problem is described in more detail in 993d38a066 (index-pack: spawn\nthreads atomically, 2024-01-05), which tried to fix it by pausing worker\nthreads until all calls to pthread_create() had completed. But that's\nnot enough to fix the problem, because the LSan setup code runs in the\nthreads themselves. So even though pthread_create() has returned, we\nhave no idea if all threads actually finished their setup before letting\nany of them do real work.\n\nWe can fix that by using a barrier inside the threads themselves,\nwaiting for all of them to hit the start of their main function before\nany of them proceed.\n\nYou can test for the race by running:\n\nmake SANITIZE=leak THREAD_BARRIER_PTHREAD=YesOnLinux\ncd t\n./t5309-pack-delta-cycles.sh --stress\n\nwhich fails quickly before this patch, and should run indefinitely\nwithout it.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5290fb63c276db44dd623457095bb82eb0775882" [label="5290fb6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:34 2025 -0800\n\nMerge branch 'ac/t6423-unhide-git-exit-status' into next\n\nTest clean-up.\n\n* ac/t6423-unhide-git-exit-status:\nt6423: fix suppression of Git’s exit code in tests"]
	"52eef501e17078b369da571d7e6b72c7494bb779" [label="52eef50" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 31 13:55:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:06:10 2025 -0800\n\nhash: convert hashing context to a structure\n\nThe `git_hash_context` is a union containing the different hash-specific\nstates for SHA1, its unsafe variant as well as SHA256. We know that only\none of these states will ever be in use at the same time because hash\ncontexts cannot be used for multiple different hashes at the same point\nin time.\n\nWe're about to extend the structure though to keep track of the hash\nalgorithm used to initialize the context, which is impossible to do\nwhile the context is a union. Refactor it to instead be a structure that\ncontains the union of context states.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"52fe6800fbbe0256780d206a494acb9932e0f60c" [label="52fe680" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:25 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:25 2025 -0800\n\nMerge branch 'en/merge-ort-prepare-to-remove-recursive' into jch\n\n* en/merge-ort-prepare-to-remove-recursive:\nmerge-ort: support having merge verbosity be set to 0\nmerge-ort: allow rename detection to be disabled\nmerge-ort: add new merge_ort_generic() function"]
	"5309c1e9fb399c390ed36ef476e91f76f6746fa9" [label="5309c1e" color=gold3 fillcolor=gold3 tooltip="author: Adam Dinwoodie <adam@dinwoodie.org>\nSat Feb 15 22:19:03 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:02:26 2025 -0800\n\nMakefile: set default goals in makefiles\n\nExplicitly set the default goal at the very top of various makefiles.\nThis is already present in some makefiles, but not all of them.\n\nIn particular, this corrects a regression introduced in a38edab7c8\n(Makefile: generate doc versions via GIT-VERSION-GEN, 2024-12-06).  That\ncommit added some config files as build targets for the Documentation\ndirectory, and put the target configuration in a sensible place.\nUnfortunately, that sensible place was above any other build target\ndefinitions, meaning the default goal changed to being those\nconfiguration files only, rather than the HTML and man page\ndocumentation.\n\nSigned-off-by: Adam Dinwoodie <adam@dinwoodie.org>\nHelped-by: Junio C Hamano <gitster@pobox.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"532e3cf469e505fd9eca90441234d96a6081e159" [label="532e3cf" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:17:59 2025 -0800\n\nreflog: rename `cmd_reflog_expire_cb` to `reflog_expire_options`\n\nWe\'re about to expose `struct cmd_reflog_expire_cb` via \"reflog.h\" so\nthat we can also use this structure in \"builtin/gc.c\". Once we make it\naccessible to a wider scope though it becomes awkwardly named, as it\nisn\'t only useful in the context of a callback. Instead, the function is\ncontaining all kinds of options relevant to whether or not a reflog\nentry should be expired.\n\nRename the structure to `reflog_expire_options` to prepare for this.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"53d75bd3e4f1e1d6c721fd90f9754a80caa61fd5" [label="53d75bd" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:47 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:33 2025 -0800\n\nmeson: fix dependencies for generated headers\n\nWe generate a couple of headers from our documentation. These headers\nare added to the libgit sources, but two of them aren\'t used by the\nlibrary, but instead by our builtins. This can cause parallel builds to\nfail because the builtin object may be compiled before the header was\ngenerated.\n\nFix the issue by adding both \"config-list.h\" and \"hook-list.h\" to the\nlist of builtin sources. While \"command-list.h\" is generated similarly,\nit is used by \"help.c\" and thus part of the libgit sources indeed.\n\nReported-by: Evan Martin <evan.martin@gmail.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"540e2bae1174027b2620034ebd4cdcdaaf8417d8" [label="540e2ba" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:05 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:05 2025 -0800\n\nMerge branch 'ps/object-collision-check' into next\n\nCI jobs gave sporadic failures, which turns out that that the\nobject finalization code was giving an error when it did not have\nto.\n\n* ps/object-collision-check:\nobject-file: retry linking file into place when occluding file vanishes\nobject-file: don't special-case missing source file in collision check\nobject-file: rename variables in `check_collision()`"]
	"5419445b4d19b0979b14f239fe2362210174f613" [label=5419445 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:40 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:12 2024 -0800\n\nDocumentation: wire up sanity checks for Meson\n\nWire up sanity checks for Meson to verify that no man pages are missing.\nThis check is similar to the same check we already have for our tests.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5463eeaedb2a818f0ac4d590add9808bf3249cd1" [label="5463eea" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: --patch-{grep,modifies} arg names for -G and -S\n\nMost arguments have both short and long versions.  Long versions are\neasier to read, especially in scripts and command history.\n\nThis change mostly keeps existing uses of -G and -S as is in the tests,\ndocumentation and help output.\n\nTests that check just the option parsing are duplicated to check both\nshort and long argument options.\n\nSigned-off-by: Illia Bobyr <illia.bobyr@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"547f719d9b022e87eb8cf3cb7a7632822b996e29" [label="547f719" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:33:51 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:25:49 2025 -0800\n\nunpack_loose_rest(): simplify error handling\n\nInflating a loose object is considered successful only if we got\nZ_STREAM_END and there were no more bytes. We check both of those\nconditions and return success, but then have to check them a second time\nto decide which error message to produce.\n\nI.e., we do something like this:\n\nif (!error_1 && !error_2)\n...return success...\n\nif (error_1)\n...handle error1...\nelse if (error_2)\n...handle error2...\n...common error handling...\n\nThis repetition was the source of a small bug fixed in an earlier commit\n(our Z_STREAM_END check was not the same in the two conditionals).\n\nInstead we can chain them all into a single if/else cascade, which\navoids repeating ourselves:\n\nif (error_1)\n...handle error1...\nelse if (error_2)\n...handle error2....\nelse\n...return success...\n...common error handling...\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"54cf5d2da897d4ca2ed4872bd9b7e48851e5573e" [label="54cf5d2" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 18 17:24:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:52:39 2025 -0800\n\nmerge-tree: only use basic merge config\n\nCommit 9c93ba4d0ae (merge-recursive: honor diff.algorithm, 2024-07-13)\nreplaced init_merge_options() with init_basic_merge_config() for use in\nplumbing commands and init_ui_merge_config() for use in porcelain\ncommands. As \"git merge-tree\" is a plumbing command it should call\ninit_basic_merge_config() rather than init_ui_merge_config(). The merge\nort machinery ignores \"diff.algorithm\" so the behavior is unchanged by\nthis commit but it future proofs us against any future changes to\ninit_ui_merge_config().\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"550fac1d131d764c7c5ec5d69f53290c30855be6" [label="550fac1" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:19 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:24 2025 -0800\n\nobject-name.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"551580e959894626c27474d35a73409be337b82a" [label="551580e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 22:23:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 22:23:45 2025 -0800\n\nSync with 'master'"]
	"55aaa8c63e25a59afc718ae2154f7e3c3064c4a7" [label="55aaa8c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:31 2025 -0800\n\nMerge branch 'ps/build-meson-fixes-0130' into next\n\nAssorted fixes and improvements to the build procedure based on\nmeson.\n\n* ps/build-meson-fixes-0130:\ngitlab-ci: restrict maximum number of link jobs on Windows\nmeson: consistently use custom program paths to resolve programs\nmeson: fix overwritten `git` variable\nmeson: prevent finding sed(1) in a loop\nmeson: improve handling of `sane_tool_path` option\nmeson: improve PATH handling\nmeson: drop separate version library\nmeson: stop linking libcurl into all executables\nmeson: introduce `libgit_curl` dependency\nmeson: simplify use of the common-main library\nmeson: inline the static 'git' library\nmeson: fix OpenSSL fallback when not explicitly required\nmeson: fix exec path with enabled runtime prefix"]
	"55b5ba87f1ce7ef5c9f891392a7271bfc4d62d2b" [label="55b5ba8" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\n\nMerge branch 'en/doc-renormalize'\n\nDoc updates.\n\n* en/doc-renormalize:\ndoc: clarify the intent of the renormalize option in the merge machinery"]
	"561de07b57fcc2057fb6b96043f008a5b83f140c" [label="561de07" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nSat Mar 01 16:36:04 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:00:52 2025 -0800\n\ncontrib/subtree: rename .txt to .adoc\n\nThe .txt extensions were changed to .adoc in 1f010d6bdf (doc: use .adoc\nextension for AsciiDoc files, 2025-01-20).\n\nDo the same for contrib/subtree.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5637d5542021294e81cf0d8344fe140368117296" [label="5637d55" color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:07:00 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:08 2025 -0800\n\npacked-backend: check whether the refname contains NUL characters\n\n\"packed-backend.c::next_record\" will use \"check_refname_format\" to check\nthe consistency of the refname. If it is not OK, the program will die.\nHowever, it is reported in [1], we cannot catch some corruption. But we\nalready have the code path and we must miss out something.\n\nWe use the following code to get the refname:\n\nstrbuf_add(&iter->refname_buf, p, eol - p);\niter->base.refname = iter->refname_buf.buf\n\nIn the above code, `p` is the start pointer of the refname and `eol` is\nthe next newline pointer. We calculate the length of the refname by\nsubtracting the two pointers. Then we add the memory range between `p`\nand `eol` to get the refname.\n\nHowever, if there are some NUL characters in the memory range between `p`\nand `eol`, we will see the refname as a valid ref name as long as the\nmemory range between `p` and first occurred NUL character is valid.\n\nIn order to catch above corruption, create a new function\n\"refname_contains_nul\" by searching the first NUL character. If it is\nnot at the end of the string, there must be some NUL characters in the\nrefname.\n\nUse this function in \"next_record\" function to die the program if\n\"refname_contains_nul\" returns true.\n\n[1] https://lore.kernel.org/git/6cfee0e4-3285-4f18-91ff-d097da9de737@rd10.de/\n\nReported-by: R. Diez <rdiez-temp3@rd10.de>\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"564b907c8a39ac6e6f8aecc6b2a1c125d41ada66" [label="564b907" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\n\nMerge branch 'ps/more-sign-compare'\n\nMore -Wsign-compare fixes.\n\n* ps/more-sign-compare:\nsign-compare: avoid comparing ptrdiff with an int/unsigned\ncommit-reach: use `size_t` to track indices when computing merge bases\nshallow: fix -Wsign-compare warnings\nbuiltin/log: fix remaining -Wsign-compare warnings\nbuiltin/log: use `size_t` to track indices\ncommit-reach: use `size_t` to track indices in `get_reachable_subset()`\ncommit-reach: use `size_t` to track indices in `remove_redundant()`\ncommit-reach: fix type of `min_commit_date`\ncommit-reach: fix index used to loop through unsigned integer\nprio-queue: fix type of `insertion_ctr`"]
	"56610beac248f698ea312d129ef8f1fbe6a0039e" [label="56610be" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:45:21 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:45:21 2025 +0800\n\nMerge branch 'vi-2.48' of github.com:Nekosha/git-po\n\n* 'vi-2.48' of github.com:Nekosha/git-po:\nl10n: vi: Updated translation for 2.48"]
	"567341aaf4f4be52f471e4cfe7e983483eaf0bfa" [label="567341a" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:55 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:07 2025 -0800\n\nmeson: inline the static 'git' library\n\nWhen setting up `libgit.a` we first create the static library itself,\nand then declare it as part of a dependency such that compile arguments,\ninclude directories and transitive dependencies get propagated to the\nusers of that library. As such, the static library isn't expected to be\nused by anything but the declared dependency.\n\nInline the static library so that we don't even use a separate variable\nfor it. This avoids any kind of confusion that may arise and clarifies\nhow the library is supposed to be used.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5785d9143bcb3ef19452a83bc2e870ff3d5ed95a" [label="5785d91" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\n\nMerge branch \'tc/clone-single-revision\'\n\n\"git clone\" learned to make a shallow clone for a single commit\nthat is not necessarily be at the tip of any branch.\n\n* tc/clone-single-revision:\nbuiltin/clone: teach git-clone(1) the --revision= option\nparse-options: introduce die_for_incompatible_opt2()\nclone: introduce struct clone_opts in builtin/clone.c\nclone: add tags refspec earlier to fetch refspec\nclone: refactor wanted_peer_refs()\nclone: make it possible to specify --tags\nclone: cut down on global variables in clone.c"]
	"57adf71b93efa9f9b4db5147e9fa1235f0a1d5ba" [label="57adf71" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:29 2025 -0800\n\nreftable/basics: adjust `hash_size()` to return `uint32_t`\n\nThe `hash_size()` function returns the number of bytes used by the hash\nfunction. Weirdly enough though, it returns a signed integer for its\nsize even though the size obviously cannot ever be negative. The only\ncase where it could be negative is if the function returned an error\nwhen asked for an unknown hash, but we assert(3p) instead.\n\nAdjust the type of `hash_size()` to be `uint32_t` and adapt all places\nthat use signed integers for the hash size to follow suit. This also\nallows us to get rid of a couple asserts that we had which verified that\nthe size was indeed positive, which further stresses the point that this\nrefactoring makes sense.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"57ebdd5af4031ddd0e012e68c5e423fd0671ed8c" [label="57ebdd5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:53 2025 -0800\n\nMerge branch 'jk/t7407-use-test-grep'\n\nTest clean-up.\n\n* jk/t7407-use-test-grep:\nt7407: use test_grep"]
	"584a16821b6998325b5cc60b970d69cf8faea950" [label="584a168" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:46 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:24 2025 -0800\n\ndiff: -G description: Correct copy/paste error\n\nCurrent description for -G is incorrect, seems like it was copied from\nthe description for -S.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"58b5801aa94ad5031978f8e42c1be1230b3d352f" [label="58b5801" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 17:42:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:16 2025 -0800\n\nThe sixth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"58f577ccc8ff870063da604b7c4e69b11425f8a0" [label="58f577c" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:57 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:33 2025 -0800\n\nenvironment: move access to \"core.bigFileThreshold\" into repo settings\n\nThe \"core.bigFileThreshold\" setting is stored in a global variable and\npopulated via `git_default_core_config()`. This may cause issues in\nthe case where one is handling multiple different repositories in a\nsingle process with different values for that config key, as we may or\nmay not see the correct value in that case. Furthermore, global state\nblocks our path towards libification.\n\nRefactor the code so that we instead store the value in `struct\nrepo_settings`, where the value is computed as-needed and cached.\n\nNote that this change requires us to adapt one test in t1050 that\nverifies that we die when parsing an invalid \"core.bigFileThreshold\"\nvalue. The exercised Git command doesn\'t use the value at all, and thus\nit won\'t hit the new code path that parses the value. This is addressed\nby using git-hash-object(1) instead, which does read the value.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"599a63409bed67d61c359d316da5a10bcddc954b" [label="599a634" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:03 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:46:30 2024 -0800\n\nci: exercise unsafe OpenSSL backend\n\nIn the preceding commit we have fixed a segfault when using an unsafe\nSHA1 backend that is different from the safe one. This segfault only\nwent by unnoticed because we never set up an unsafe backend in our CI\nsystems. Fix this ommission by setting `OPENSSL_SHA1_UNSAFE` in our\nTEST-vars job.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"59d26bd9619c1bb37b1ccb4a93a71221bec46e12" [label="59d26bd" color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nTue Feb 11 00:49:47 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 01:16:19 2025 -0800\n\nthunderbird-patch-inline: avoid bashism\n\nThe use of \"echo -e\" is not portable and not specified by POSIX.  dash\ndoes not support any options except \"-n\", and so this script will not\nwork on operating systems which use that as /bin/sh.\n\nFortunately, the solution is easy: switch to printf(1), which is\nspecified by POSIX and allows the escape sequences we want to use.  This\nwill allow the script to work with any POSIX shell.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"59d92809088f28b06b0cd102dd166ba8b3144fc7" [label="59d9280" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:08 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:21 2025 -0800\n\ntechnical/partial-clone: update reference to rev-list-options.adoc\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5a17181a3224c5bf83ea61ce6d023896a190f071" [label="5a17181" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:50 2025 -0800\n\nMerge branch \'jc/show-usage-help\' into next\n\nThe help text from \"git $cmd -h\" appear on the standard output for\nsome $cmd and the standard error for others.  The built-in commands\nhave been fixed to show them on the standard output consistently.\n\n* jc/show-usage-help:\nbuiltin: send usage() help text to standard output\noddballs: send usage() help text to standard output\nbuiltins: send usage_with_options() help text to standard output\nusage: add show_usage_if_asked()\nparse-options: add show_usage_with_options_if_asked()\nt0012: optionally check that \"-h\" output goes to stdout"]
	"5a526e5e18ddb9a7dfc5a2967d21d6154df64a4f" [label="5a526e5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 20:54:57 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:37 2025 -0800\n\nThe fourteenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5a59d1e1a004d1a449b5f490efa7918d2c3df812" [label="5a59d1e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:52 2025 -0800\n\nMerge branch 'jk/lsan-race-ignore-false-positive'\n\nThe code to check LSan results has been simplified and made more\nrobust.\n\n* jk/lsan-race-ignore-false-positive:\ntest-lib: add a few comments to LSan log checking\ntest-lib: simplify lsan results check\ntest-lib: invert return value of check_test_results_san_file_empty"]
	"5ac2c61b550eb801d3acab1aa68f52379f9ad33b" [label="5ac2c61" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:06 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:20 2025 -0800\n\nMyFirstObjectWalk: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5ac65f0d6b867ff031fda03779c2f2613f022b10" [label="5ac65f0" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:22 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:29 2025 -0800\n\nreftable/basics: adjust `common_prefix_size()` to return `size_t`\n\nThe `common_prefix_size()` function computes the length of the common\nprefix between two buffers. As such its return value will always be an\nunsigned integer, as the length cannot be negative. Regardless of that,\nthe function returns a signed integer, which is nonsensical and causes a\ncouple of -Wsign-compare warnings all over the place.\n\nAdjust the function to return a `size_t` instead.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5aea4ff36c58bd3c6d6c0852e6b3469261348e0d" [label="5aea4ff" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:02 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:38 2025 -0800\n\ngitlab-ci: remove the \"linux-old\" job\n\nThe \"linux-old\" job was historically testing against the oldest\nsupported LTS release of Ubuntu. But with c85bcb5de1 (gitlab-ci: switch\nfrom Ubuntu 16.04 to 20.04, 2024-10-31) it has been converted to test\nagainst Ubuntu 20.04, which already gets exercised in a couple of other\nCI jobs. It\'s thus not adding any significant test coverage.\n\nDrop the job.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5b34dd08d0ffc967b92abe187cc890d52ade5ac7" [label="5b34dd0" color=gold3 fillcolor=gold3 tooltip="author: Alexander Shopov <ash@kambanaria.org>\nSat Dec 28 12:42:18 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:55:24 2024 -0800\n\nparse-options: localize mark-up of placeholder text in the short help\n\ni18n: expose substitution hint chars in functions and macros to\ntranslators\n\nFor example (based on builtin/commit.c and shortened): the \"--author\"\noption takes a name.  In source this can be represented as:\n\nOPT_STRING(0, \"author\", &force_author, N_(\"author\"), N_(\"override author\")),\n\nWhen the command is run with \"-h\" (short help) option (git commit -h),\nthe above definition is displayed as:\n\n--[no-]author <author>    override author\n\nGit does not use translated option names so the first part of the\nabove, \"--[no-]author\", is given as-is (it is based on the 2nd\nargument of OPT_STRING).  However the string \"author\" in the pair of\n\"<>\", and the explanation \"override author for commit\" may be\ntranslated into user\'s language.\n\nThe user\'s language may use a convention to mark a replaceable part of\nthe command line (called a \"placeholder string\") differently from\nenclosing it inside a pair of \"<>\", but the implementation in\nparse-options.c hardcodes \"<%s>\".\n\nAllow translators to specify the presentation of a placeholder string\nfor their languages by overriding the \"<%s>\".\n\nIn case the translator\'s writing system is sufficiently different than\nLatin the \"<>\" characters can be substituted by an empty string thus\neffectively skipping them in the output.  For example languages with\nuppercase versions of characters can use that to deliniate\nreplaceability.\n\nAlternatively a translator can decide to use characters that are\nvisually close to \"<>\" but are not interpreted by the shell.\n\nSigned-off-by: Alexander Shopov <ash@kambanaria.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5b53c492157b34c83e9e4f10661d7a8c6dc38f65" [label="5b53c49" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:38 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:38 2025 -0800\n\nMerge branch 'ms/refspec-cleanup' into next\n\nCode clean-up.\n\n* ms/refspec-cleanup:\nrefspec: relocate apply_refspecs and related funtions\nrefspec: relocate matching related functions\nremote: rename query_refspecs functions\nrefspec: relocate refname_matches_negative_refspec_item\nremote: rename function omit_name_by_refspec"]
	"5b648b819c6fb3137850fc31c0ad80b2ff55f14d" [label="5b648b8" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:36 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:37 2025 -0800\n\nrefs/reftable: batch refname availability checks\n\nRefactor the \"reftable\" backend to batch the availability check for\nrefnames. This does not yet have an effect on performance as\n`refs_verify_refnames_available()` effectively still performs the\navailability check for each refname individually. But this will be\noptimized in subsequent commits, where we learn to optimize some parts\nof the logic when checking multiple refnames for availability.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5b9d01bc4d84a1e09087a0b9dad206e855f49bf2" [label="5b9d01b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:53 2025 -0800\n\nMerge branch \'zh/gc-expire-to\'\n\n\"git gc\" learned the \"--expire-to\" option and passes it down to\nunderlying \"git repack\".\n\n* zh/gc-expire-to:\ngc: add `--expire-to` option"]
	"5bd10b2adcf3a080169574dd08c5529de81eecb1" [label="5bd10b2" color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nFri Feb 28 22:33:45 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:17:47 2025 -0800\n\nbuiltin: introduce diff-pairs command\n\nThrough git-diff(1), a single diff can be generated from a pair of blob\nrevisions directly. Unfortunately, there is not a mechanism to compute\nbatches of specific file pair diffs in a single process. Such a feature\nis particularly useful on the server-side where diffing between a large\nset of changes is not feasible all at once due to timeout concerns.\n\nTo facilitate this, introduce git-diff-pairs(1) which acts as a backend\npassing its NUL-terminated raw diff format input from stdin through diff\nmachinery to produce various forms of output such as patch or raw.\n\nThe raw format was originally designed as an interchange format and\nrepresents the contents of the diff_queued_diff list making it possible\nto break the diff pipeline into separate stages. For example,\ngit-diff-tree(1) can be used as a frontend to compute file pairs to\nqueue and feed its raw output to git-diff-pairs(1) to compute patches.\nWith this, batches of diffs can be progressively generated without\nhaving to recompute renames or retrieve object context. Something like\nthe following:\n\ngit diff-tree -r -z -M $old $new |\ngit diff-pairs -p -z\n\nshould generate the same output as `git diff-tree -p -M`. Furthermore,\neach line of raw diff formatted input can also be individually fed to a\nseparate git-diff-pairs(1) process and still produce the same output.\n\nBased-on-patch-by: Jeff King <peff@peff.net>\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5c0375266594f19f3d73969718a5806662cd6d63" [label="5c03752" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:15 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:23 2025 -0800\n\ndiff.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5ce6e0e2421af8aaa2be5684176a66388561d44e" [label="5ce6e0e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\n\nMerge branch 'tb/new-make-fix'\n\nWorkaround the overly picky HT/SP rule in newer GNU Make.\n\n* tb/new-make-fix:\nMakefile: remove accidental recipe prefix in conditional"]
	"5d0cf6bb3a126725f70529f205a32b4720f81183" [label="5d0cf6b" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:48 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:33 2025 -0800\n\nmeson: wire up development environments\n\nThe Meson build system is able to wire up development environments. The\nintent is to make build artifacts of the project available. This is\ntypically used to export e.g. paths to linkable libraries, which isn't\nall that interesting in our context given that we don't have an official\nlibrary interface.\n\nBut what we can use this mechanism for is to expose the built Git\nexecutables as well as the build directory. This allows users to play\naround with the built Git version in the devenv, and allows them to\nexecute our test scripts directly with the built distribution.\n\nWire up this feature, which can then be used via `meson devenv` in the\nbuild directory.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5d6b46764e6cf7bd048645875c580452f8a9835e" [label="5d6b467" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:58:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:58:39 2025 -0800\n\nWhat's cooking (2025/02 #08)"]
	"5dd710cb628d10abe95fac61afb35cf798779589" [label="5dd710c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:33 2025 -0800\n\nMerge branch 'lo/t7603-path-is-file-update'\n\nTest clean-up.\n\n* lo/t7603-path-is-file-update:\nt7603: replace test -f by test_path_is_file"]
	"5e22728f25290677f8ef5f2938a7e0ee24d432ac" [label="5e22728" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nWed Mar 05 01:15:18 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 06:09:29 2025 -0800\n\nbuiltin/pack-objects.c: freshen objects from existing cruft packs\n\nOnce an object is written into a cruft pack, we can only freshen it by\nwriting a new loose or packed copy of that object with a more recent\nmtime.\n\nPrior to 61568efa95 (builtin/pack-objects.c: support `--max-pack-size`\nwith `--cruft`, 2023-08-28), we typically had at most one cruft pack in\na repository at any given time. So freshening unreachable objects was\nstraightforward when already rewriting the cruft pack (and its *.mtimes\nfile).\n\nBut 61568efa95 changes things: \'pack-objects\' now supports writing\nmultiple cruft packs when invoked with `--cruft` and the\n`--max-pack-size` flag. Cruft packs are rewritten until they reach some\nsize threshold, at which point they are considered \"frozen\", and will\nonly be modified in a pruning GC, or if the threshold itself is\nadjusted.\n\nPrior to this patch, however, this process breaks down when we attempt\nto freshen an object packed in an earlier cruft pack, and that cruft\npack is larger than the threshold and thus will survive the repack.\n\nWhen this is the case, it is impossible to freshen objects in cruft\npack(s) when those cruft packs are larger than the threshold. This is\nbecause we would avoid writing them in the new cruft pack entirely, for\na couple of reasons.\n\n1. When enumerating packed objects via \'add_objects_in_unpacked_packs()\'\nwe pass the SKIP_IN_CORE_KEPT_PACKS, which is used to avoid looping\nover the packs we\'re going to retain (which are marked as kept\nin-core by \'read_cruft_objects()\').\n\nThis means that we will avoid enumerating additional packed copies\nof objects found in any cruft packs which are larger than the given\nsize threshold. Thus there is no opportunity to call\n\'create_object_entry()\' whatsoever.\n\n2. We likewise will discard the loose copy (if one exists) of any\nunreachable object packed in a cruft pack that is larger than the\nthreshold. Here our call path is \'add_unreachable_loose_objects()\',\nwhich uses the \'add_loose_object()\' callback.\n\nThat function will eventually land us in \'want_object_in_pack()\'\n(via \'add_cruft_object_entry()\'), and we\'ll discard the object as it\nappears in one of the packs which we marked as kept in-core.\n\nThis means in effect that it is impossible to freshen an unreachable\nobject once it appears in a cruft pack larger than the given threshold.\n\nInstead, we should pack an additional copy of an unreachable object we\nwant to freshen even if it appears in a cruft pack, provided that the\ncruft copy has an mtime which is before the mtime of the copy we are\ntrying to pack/freshen. This is sub-optimal in the sense that it\nrequires keeping an additional copy of unreachable objects upon\nfreshening, but we don\'t have a better alternative without the ability\nto make in-place modifications to existing *.mtimes files.\n\nIn order to implement this, we have to adjust the behavior of\n\'want_found_object()\'. When \'pack-objects\' is told that we\'re *not*\ngoing to retain any cruft packs (i.e. the set of packs marked as kept\nin-core does not contain a cruft pack), the behavior is unchanged.\n\nBut when there *is* at least one cruft pack that we\'re holding onto, it\nis no longer sufficient to reject a copy of an object found in that\ncruft pack for that reason alone. In this case, we only want to reject a\ncandidate object when copies of that object either:\n\n- exists in a non-cruft pack that we are retaining, regardless of that\npack\'s mtime, or\n\n- exists in a cruft pack with an mtime at least as recent as the copy\nwe are debating whether or not to pack, in which case freshening\nwould be redundant.\n\nTo do this, keep track of whether or not we have any cruft packs in our\nin-core kept list with a new \'ignore_packed_keep_in_core_has_cruft\'\nflag. When we end up in this new special case, we replace a call to\n\'has_object_kept_pack()\' to \'want_cruft_object_mtime()\', and only reject\nobjects when we have a copy in an existing cruft pack with at least as\nrecent an mtime as our candidate (in which case \"freshening\" would be\nredundant).\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5e58db65750a20ae6d0c620f8a2010e038d408f5" [label="5e58db6" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Jan 18 18:11:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 18:06:15 2025 -0800\n\nref-filter: move ahead-behind bases into used_atom\n\nverify_ref_format() parses a ref-filter format string and stores\nrecognized items in the static array \"used_atom\".  For\n\"ahead-behind:<committish>\" it stores the committish part in a\nstring_list member \"bases\" of struct ref_format.\n\nref_sorting_options() also parses bare ref-filter format items and\nstores stores recognized ones in \"used_atom\" as well.  The committish\nparts go to a dummy struct ref_format in parse_sorting_atom(), though,\nand are leaked and forgotten.\n\nIf verify_ref_format() is called before ref_sorting_options(), like in\ngit for-each-ref, then all works well if the sort key is included in the\nformat string.  If it isn\'t then sorting cannot work as the committishes\nare missing.\n\nIf ref_sorting_options() is called first, like in git branch, then we\nhave the additional issue that if the sort key is included in the format\nstring then filter_ahead_behind() can\'t see its committish, will not\ngenerate any results for it and thus it will be expanded to an empty\nstring.\n\nFix those issues by replacing the string_list with a field in used_atom\nfor storing the committish.  This way it can be shared for handling both\nref-filter format strings and sorting options in the same command.\n\nReported-by: Ross Goldberg <ross.goldberg@gmail.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5e7fe8a7b89a07d8c3ab298ac69bc33f6ba88b47" [label="5e7fe8a" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:29 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:12:40 2024 -0800\n\ncommit-reach: use `size_t` to track indices when computing merge bases\n\nThe functions `repo_get_merge_bases_many()` and friends accepts an array\nof commits as well as a parameter that indicates how large that array\nis. This parameter is using a signed integer, which leads to a couple of\nwarnings with -Wsign-compare.\n\nRefactor the code to use `size_t` to track indices instead and adapt\ncallers accordingly. While most callers are trivial, there are two\ncallers that require a bit more scrutiny:\n\n- builtin/merge-base.c:show_merge_base() subtracts `1` from the\n`rev_nr` before calling `repo_get_merge_bases_many_dirty()`, so if\nthe variable was `0` it would wrap. This code is fine though because\nits only caller will execute that code only when `argc >= 2`, and it\nfollows that `rev_nr >= 2`, as well.\n\n- bisect.ccheck_merge_bases() similarly subtracts `1` from `rev_nr`.\nAgain, there is only a single caller that populates `rev_nr` with\n`good_revs.nr`. And because a bisection always requires at least one\ngood revision it follws that `rev_nr >= 1`.\n\nMark the file as -Wsign-compare-clean.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5eb02dd8f08fc3b7ff22320c3311cd1da6a5ab4d" [label="5eb02dd" color=gold3 fillcolor=gold3 tooltip="author: Karsten Blees <blees@dcon.de>\nSat Feb 04 21:54:36 2012 +0100\ncommitter: Johannes Schindelin <johannes.schindelin@gmx.de>\nSat Jan 11 18:17:42 2025 +0100\n\ngitk: Unicode file name support\n\nAssumes file names in git tree objects are UTF-8 encoded.\n\nOn most unix systems, the system encoding (and thus the TCL system\nencoding) will be UTF-8, so file names will be displayed correctly.\n\nOn Windows, it is impossible to set the system encoding to UTF-8.\nChanging the TCL system encoding (via 'encoding system ...', e.g. in the\nstartup code) is explicitly discouraged by the TCL docs.\n\nChange gitk functions dealing with file names to always convert\nfrom and to UTF-8.\n\nSigned-off-by: Karsten Blees <blees@dcon.de>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>"]
	"5efe7e2f5dd8a788ff03d69293ba2020dfec44c8" [label="5efe7e2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 21:07:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 21:07:36 2025 -0800\n\nMerge branch 'js/reftable-realloc-errors-fix' into next\n\n* js/reftable-realloc-errors-fix:\nt-reftable-basics: allow for `malloc` to be `#define`d"]
	"5f338eae76ea739954517292b8b057d1b6187926" [label="5f338ea" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:45 2025 -0800\n\nMerge branch 'ps/leakfixes-0129'\n\nA few more leakfixes.\n\n* ps/leakfixes-0129:\nscalar: free result of `remote_default_branch()`\nunix-socket: fix memory leak when chdir(3p) fails"]
	"5f8f7081f7761acdf83d0a4c6819fe3d724f01d7" [label="5f8f708" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 23:24:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:03 2025 -0800\n\nThe third batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5fa0c4dd296d3731bbbd1977d7bf9c50d8c4b7c1" [label="5fa0c4d" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nWed Jan 01 21:14:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:17:05 2025 -0800\n\ntest-lib: rely on logs to detect leaks\n\nWhen we run with sanitizers, we set abort_on_error=1 so that the tests\nthemselves can detect problems directly (when the buggy program exits\nwith SIGABRT). This has one blind spot, though: we don\'t always check\nthe exit codes for all programs (e.g., helpers like upload-pack invoked\nbehind the scenes).\n\nFor ASan and UBSan this is mostly fine; they exit as soon as they see an\nerror, so the unexpected abort of the program causes the test to fail\nanyway.\n\nBut for LSan, the program runs to completion, since we can only check\nfor leaks at the end. And in that case we could miss leak reports. And\nthus we started checking LSan logs in faececa53f (test-lib: have the\n\"check\" mode for SANITIZE=leak consider leak logs, 2022-07-28).\nOriginally the logs were optional, but logs are generated (and checked)\nalways as of 8c1d6691bc (test-lib: GIT_TEST_SANITIZE_LEAK_LOG enabled by\ndefault, 2024-07-11). And we even check them for each test snippet, as\nof cf1464331b (test-lib: check for leak logs after every test,\n2024-09-24).\n\nSo now aborting on error is superfluous for LSan! We can get everything\nwe need by checking the logs. And checking the logs is actually\npreferable, since it gives us more control over silencing false\npositives (something we do not yet do, but will soon).\n\nSo let\'s tell LSan to just exit normally, even if it finds leaks. We can\ndo so with exitcode=0, which also suppresses the abort_on_error flag.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5fa232d8520f577dbc41cc0414e884dbd85fa66b" [label="5fa232d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:42:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:42:43 2025 -0800\n\nWhat's cooking (2025/02 #06)"]
	"5fcc683338e947d1226a9426174e7c48ce849c47" [label="5fcc683" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:26 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:16 2025 -0800\n\ncsum-file.c: extract algop from hashfile_checksum_valid()\n\nPerform a similar transformation as in the previous commit, but focused\ninstead on hashfile_checksum_valid(). This function does not work with a\nhashfile structure itself, and instead validates the raw contents of a\nfile written using the hashfile API.\n\nWe'll want to be prepared for a similar change to this function in the\nfuture, so prepare ourselves for that by extracting 'the_hash_algo' into\nits own field for use within this function.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"5ffbd7fcf84b313bb07e91246eb9419ebd94a7e7" [label="5ffbd7f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:11:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:11:08 2025 -0800\n\nSync with 'master'"]
	"60017ef61a148b814867f3ca8f89f15a80916aaa" [label="60017ef" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\n\nMerge branch \'jk/pack-header-parse-alignment-fix\' into next\n\nIt was possible for \"git unpack-objects\" and \"git index-pack\" to\nmake an unaligned access, which has been corrected.\n\n* jk/pack-header-parse-alignment-fix:\nindex-pack, unpack-objects: use skip_prefix to avoid magic number\nindex-pack, unpack-objects: use get_be32() for reading pack header\nparse_pack_header_option(): avoid unaligned memory writes\npackfile: factor out --pack_header argument parsing\nbswap.h: squelch potential sparse -Wcast-truncate warnings"]
	"6024f321d491c4f37a2698239260757df64c611b" [label="6024f32" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:43 2025 -0800\n\nMerge branch 'sk/unit-test-oid'\n\nConvert a few unit tests to the clar framework.\n\n* sk/unit-test-oid:\nt/unit-tests: convert oidtree test to use clar test framework\nt/unit-tests: convert oidmap test to use clar test framework\nt/unit-tests: convert oid-array test to use clar test framework\nt/unit-tests: implement clar specific oid helper functions"]
	"60c208db584c5a1558acaef9c2ba2fdf15999bc9" [label="60c208d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Feb 03 07:29:37 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:58 2025 -0800\n\nt5543: atomic push reports exit code failure\n\nAdd new test cases in t5543 to avoid ignoring the exit code of\ngit-receive-pack(1) during atomic push with \"--porcelain\" flag.\n\nWe\'d typically notice this case because the refs would have their error\nmessage set. But there is an edge case when pushing refs succeeds, but\ngit-receive-pack(1) exits with a non-zero exit code at a later point in\ntime due to another error. An atomic git-push(1) would ignore that error\ncode, and consequently it would return successfully and not print any\nerror message at all.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"60cb8e79cbdb754af8cbd1e3c1bee755dcf07f2c" [label="60cb8e7" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:49 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:49 2025 -0800\n\nMerge branch 'ps/doc-http-upload-archive-service'\n\nDoc update.\n\n* ps/doc-http-upload-archive-service:\ndoc: documentation for http.uploadarchive config option"]
	"6128301075c90ac1d25badcc29771d1547fdf80f" [label=6128301 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:12 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:35 2025 -0800\n\nmeson: fix OpenSSL fallback when not explicitly required\n\nWhen OpenSSL isn't provided by the system we know to fall back to the\nsubproject wrapper. This is especially helpful on Windows systems, where\nyou typically don't have OpenSSL available, in order to reduce the\nnumber of required dependencies.\n\nThe fallback is broken though when the OpenSSL backend is set to 'auto'\nas we end up calling `dependency('openssl', required: false)` in that\ncase, which implicitly disables falling back to the wrapper.\n\nFix the issue by re-allowing the fallback in case either OpenSSL is\nrequired or in case the backend is set to 'auto'. While at it, fix\nreporting of the backend in case the user asked us to pick no HTTPS\nbackend at all.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"61cd812130bda9c8996c90283501ee00c029c7a4" [label="61cd812" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:32 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:27 2025 -0800\n\nxdiff: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"627208d89dea747b35cb848eb5e2c8eddf878dfd" [label="627208d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:51 2025 -0800\n\nSync with 'master'"]
	"62898b8f5e86b67dbc8f9092ae9ee0819823a0be" [label="62898b8" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nMon Feb 10 19:10:30 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 01:20:21 2025 -0800\n\nbuiltin/update-server-info: remove the_repository global variable\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/update-server-info.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_update_server_info()` function\nwith `repo` set to NULL and then early in the function, \"parse_options()\"\ncall will give the options help and exit, without having to consult much\nof the configuration file. So it is safe to omit reading the config when\n`repo` argument the caller gave us is NULL.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"629188ede7ee00c925ef28b85b1e68fc9e05fb93" [label="629188e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:22 2025 -0800\n\ncompat: introduce new \"zlib.h\" header\n\nIntroduce a new \"compat/zlib-compat.h\" header that we include instead of\nincluding <zlib.h> directly. This will allow us to wire up zlib-ng as an\nalternative backend for zlib compression in a subsequent commit.\n\nNote that we cannot just call the file \"compat/zlib.h\", as that may\notherwise cause us to include that file instead of <zlib.h>.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"62c58891e177bb3860ab19d2dc2e23909759c6ed" [label="62c5889" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:31 2025 -0800\n\nMerge branch 'tz/doc-txt-to-adoc-fixes'\n\nFallouts from recent renaming of documentation files from .txt\nsuffix to the new .adoc suffix have been corrected.\n\n* tz/doc-txt-to-adoc-fixes: (38 commits)\nxdiff: *.txt -> *.adoc fixes\nunpack-trees.c: *.txt -> *.adoc fixes\ntransport.h: *.txt -> *.adoc fixes\ntrace2/tr2_sysenv.c: *.txt -> *.adoc fixes\ntrace2.h: *.txt -> *.adoc fixes\nt6434: *.txt -> *.adoc fixes\nt6012: *.txt -> *.adoc fixes\nt/helper/test-rot13-filter.c: *.txt -> *.adoc fixes\nsimple-ipc.h: *.txt -> *.adoc fixes\nsetup.c: *.txt -> *.adoc fixes\nrefs.h: *.txt -> *.adoc fixes\npseudo-merge.h: *.txt -> *.adoc fixes\nparse-options.h: *.txt -> *.adoc fixes\nobject-name.c: *.txt -> *.adoc fixes\nlist-objects-filter-options.h: *.txt -> *.adoc fixes\nfsck.h: *.txt -> *.adoc fixes\ndiffcore.h: *.txt -> *.adoc fixes\ndiff.h: *.txt -> *.adoc fixes\ncontrib/long-running-filter: *.txt -> *.adoc fixes\nconfig.c: *.txt -> *.adoc fixes\n..."]
	"6311e1aa59fd9d7949ef622bc27aa8399ae1f76a" [label="6311e1a" color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nFri Mar 07 16:48:40 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:51:01 2025 -0800\n\nmerge-ort: add new merge_ort_generic() function\n\nmerge-recursive.[ch] have three entry points:\n* merge_trees()\n* merge_recursive()\n* merge_recursive_generic()\nmerge-ort*.[ch] only has equivalents for the first two.  Add an\nequivalent for the final entry point, so we can switch callers to\nuse it and remove merge-recursive.[ch].\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"637fb902283a2244f4c910fee179d46c1fe9e867" [label="637fb90" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\n\nMerge branch \'re/submodule-parse-opt\'\n\n\"git submodule\" learned various ways to spell the same option,\ne.g. \"--branch=B\" can be spelled \"--branch B\" or \"-bB\".\n\n* re/submodule-parse-opt:\ngit-submodule.sh: rename some variables\ngit-submodule.sh: improve variables readability\ngit-submodule.sh: add some comments\ngit-submodule.sh: get rid of unused variable\ngit-submodule.sh: get rid of isnumber\ngit-submodule.sh: improve parsing of short options\ngit-submodule.sh: improve parsing of some long options"]
	"638060dcb95ed7ef3b2f6e6038ac12744d8ba238" [label="638060d" color=gold3 fillcolor=gold3 tooltip="author: Bence Ferdinandy <bence@ferdinandy.com>\nSun Jan 26 23:02:10 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 17:16:45 2025 -0800\n\nfetch set_head: refactor to use remote directly\n\nAs a preparatory step to use even more properties from the remote\nstruct, refactor set_head to take the entire struct as a parameter,\ninstead of the necessary bits. This also allows consolidating the use of\ngtransport->remote in set_head, making the access of the remote's\nproperties consistent in the function.\n\nSigned-off-by: Bence Ferdinandy <bence@ferdinandy.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"63a597dd94079887a1b5ad72f64a8b0ee822dc27" [label="63a597d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:46:00 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 16:49:52 2025 -0800\n\nci: exercise credential helpers\n\nWire up credential helpers in our CI runs so that we can rest assured\nthat they compile and (if tests are available) function correctly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"63d555a2dcb4c308ede76b96be1239950768a7d1" [label="63d555a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\n\nMerge branch 'mh/connect-sign-compare'\n\nThe code in connect.c has been updated to work around complaints\nfrom -Wsign-compare.\n\n* mh/connect-sign-compare:\nconnect: address -Wsign-compare warnings"]
	"63db268d4778f250892479e7e517e23c54ac8eda" [label="63db268" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:32 2025 -0800\n\nMerge branch \'pw/rebase-i-ff-empty-commit\' into next\n\n\"git rebase -i\" failed to allow rewording an empty commit that has\nbeen fast-forwarded.\n\n* pw/rebase-i-ff-empty-commit:\nrebase -i: reword empty commit after fast-forward"]
	"64156589d9fc24afbc872a4dffb709926d67262f" [label=6415658 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:18:56 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:18:56 2025 -0800\n\nMerge branch 'ps/meson-weak-sha1-build' into ps/zlib-ng\n\n* ps/meson-weak-sha1-build:\nmeson: provide a summary of configured backends\nmeson: wire up unsafe SHA1 backend\nmeson: add missing dots for build options\nmeson: simplify conditions for HTTPS and SHA1 dependencies\nmeson: require SecurityFramework when it's used as SHA1 backend\nmeson: deduplicate access to SHA1/SHA256 backend options\nmeson: consistenlty spell 'CommonCrypto'"]
	"64f3ff3ffcfed10b8b5bf42cda3fc19776fb29f2" [label="64f3ff3" color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nFri Jan 10 12:48:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:50:53 2025 -0800\n\nGIT-VERSION-GEN: allow it to be run in parallel\n\n\"Why would one want to run it in parallel?\" I hear you ask. I am glad\nyou are curious, because a curious story is what it is, indeed.\n\nThe `GIT-VERSION-GEN` script is quite a pillar of Git\'s source code,\nwith most lines being unchanged for the past 15 years. Until the v2.48.0\nrelease candidate cycle.\n\nIts original purpose was to generate the version string and store it in\nthe `GIT-VERSION-FILE`.\n\nThis paradigm changed quite dramatically when support for building with\nMeson was introduced. Most crucially, a38edab7c88b (Makefile: generate\ndoc versions via GIT-VERSION-GEN, 2024-12-06) changed the way the\ndocumentation is built by using the `GIT-VERSION-GEN` file to write out\nthe `asciidocor-extensions.rb` and `asciidoc.conf` files with now\nhard-coded version strings.\n\nCrucially, the Makefile rule to generate those files needs to be run in\nevery build because `GIT_VERSION` could have been specified in the\n`make` command-line, which would require these files to be modified.\n\nThis introduced a surprising race condition!\n\nAnd this is how that race surfaces: When calling `make -j2 html man`\nfrom the top-level directory (a variant of which is invoked in Git for\nWindows\' release process), two sub-processes are spawned, a `make -C\nDocumentation html` one and a `make -C Documentation man` one. Both run\nthe rule to (re-)generate `asciidoctor-extensions.rb` or\n`asciidoc.conf`, invoking `GIT-VERSION-GEN` to do so. That script first\ngenerates a temporary file (appending the `+` character to the\nfilename), then looks whether it contains something different than the\nalready existing file (if it exists, that is), and either replaces it if\nneeded, or removes the temporary file. If one of the two parallel\ninvocations removes that temporary file before the other can compare it,\nor even worse: if one tries to replace the target file just after the\nother _started_ writing the temporary file (but did not finish writing\nit yet), that race condition now causes bad builds.\n\nThis may sound highly theoretical, but due to the design of Git\'s build\nprocess, Git for Windows is forced to use a (slow) POSIX emulation layer\nto run that script and in the blink of an eye it becomes very much not\ntheoretical at all. See Exhibit A: These GitHub workflow runs failed\nbecause one of the two competing `make` processes tried to remove the\ntemporary file when the other process had already done so:\n\nhttps://github.com/git-for-windows/git-sdk-32/actions/runs/12663456654\nhttps://github.com/git-for-windows/git-sdk-32/actions/runs/12683174970\nhttps://github.com/git-for-windows/git-sdk-64/actions/runs/12649348496\n\nWhile it is undesirable to run this script over and over again,\ncertainly when this involves above-mentioned slow POSIX emulation layer,\nthe stage of the release cycle in which we are presently finding\nourselves does not lend itself to a re-design where this script could be\nrun once, and once only, but instead dictates that a quick and reliable\nwork-around be implemented that prevents the race condition without\nchanging the overall architecture of the build process.\n\nThis patch does that: By using a filename suffix for the temporary file\nwhich is based on the currently-executing script\'s process ID, We\nguarantee that the two competing invocations cannot overwrite or remove\neach others\' temporary files.\n\nThe filename suffix still ends in `+` to ensure that the temporary\nartifacts are matched by the `*+` pattern in `.gitignore` that was added\nin f9bbaa384ef (Add intermediate build products to .gitignore,\n2009-11-08).\n\nHelped-by: Martin Ågren <martin.agren@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"65c10aa8d5000e0ecab34a9652056f0520fe51ed" [label="65c10aa" color=gold3 fillcolor=gold3 tooltip="author: Calvin Wan <calvinwan@google.com>\nWed Jan 29 22:50:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:06:50 2025 -0800\n\nlibgit: add higher-level libgit crate\n\nThe C functions exported by libgit-sys do not provide an idiomatic Rust\ninterface. To make it easier to use these functions via Rust, add a\nhigher-level \"libgit\" crate, that wraps the lower-level configset API\nwith an interface that is more Rust-y.\n\nThis combination of $X and $X-sys crates is a common pattern for FFI in\nRust, as documented in \"The Cargo Book\" [1].\n\n[1] https://doc.rust-lang.org/cargo/reference/build-scripts.html#-sys-packages\n\nCo-authored-by: Josh Steadmon <steadmon@google.com>\nSigned-off-by: Josh Steadmon <steadmon@google.com>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"65f586132bfa21c3e9fe7b2803ef526133a3b269" [label="65f5861" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:31:58 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:37 2025 -0800\n\nt7422: fix flaky test caused by buffered stdout\n\nOne test in t7422 asserts that `git submodule status --recursive`\nproperly handles SIGPIPE. This test is flaky though and may sometimes\nnot see a SIGPIPE at all:\n\nexpecting success of 7422.18 \'git submodule status --recursive propagates SIGPIPE\':\n{ git submodule status --recursive 2>err; echo $?>status; } |\ngrep -q X/S &&\ntest_must_be_empty err &&\ntest_match_signal 13 \"$(cat status)\"\n++ git submodule status --recursive\n++ grep -q X/S\n++ echo 0\n++ test_must_be_empty err\n++ test 1 -ne 1\n++ test_path_is_file err\n++ test 1 -ne 1\n++ test -f err\n++ test -s err\n+++ cat status\n++ test_match_signal 13 0\n++ test 0 = 141\n++ test 0 = 269\n++ return 1\nerror: last command exited with $?=1\nnot ok 18 - git submodule status --recursive propagates SIGPIPE\n\nThe issue is caused by a race between git-submodule(1) and grep(1):\n\n1. git-submodule(1) (or its child process) writes the first X/S line\nwe\'re trying to match.\n\n2. grep(1) matches the line.\n\n3a. grep(1) exits, closing the pipe.\n\n3b. git-submodule(1) (or its child process) writes the rest of its\nlines.\n\nSteps 3a and 3b happen at the same time without any guarantees. If 3a\nhappens first, we get SIGPIPE. Otherwise, we don\'t and the test fails.\n\nFix the issue by generating a couple thousand nested submodules and\nmatching on the first nested submodule. This ensures that the recursive\ngit-submodule(1) process completely fills its stdout buffer, which makes\nsubsequent writes block until the downstream consumer of the pipe either\nreads more or closes it.\n\nTo verify that this works as expected one can apply the following patch\nto the preimage of this commit, which used to reliably trigger the race:\n\ndiff --git a/t/t7422-submodule-output.sh b/t/t7422-submodule-output.sh\nindex 3c5177cc30..df6001f8a0 100755\n--- a/t/t7422-submodule-output.sh\n+++ b/t/t7422-submodule-output.sh\n@@ -202,7 +202,7 @@ test_expect_success !MINGW \'git submodule status --recursive propagates SIGPIPE\'\ncd repo &&\nGIT_ALLOW_PROTOCOL=file git submodule add \"$(pwd)\"/../submodule &&\n{ git submodule status --recursive 2>err; echo $?>status; } |\n-\t\t\tgrep -q recursive-submodule-path-1 &&\n+\t\t\t{ sleep 1 && grep -q recursive-submodule-path-1 && sleep 1; } &&\ntest_must_be_empty err &&\ntest_match_signal 13 \"$(cat status)\"\n)\n\nWith the pipe-stuffing workaround the test runs successfully.\n\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"65faad6d841c29d4545e9cf3676d75f4e6e4872c" [label="65faad6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 21:55:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 21:55:26 2025 -0800\n\nmergetag object e1fbebe347426ef7974dc2198f8a277b7c31c8fe\ntype commit\ntag v2.47.2\ntagger Junio C Hamano <gitster@pobox.com> 1734627163 -0800\n\nGit 2.47.2\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmdkT1sACgkQsLXohpav\n5svdhRAAq0WoZIg+33vYNNVSTm3Ux9RJslmXs3lQuhuUJ61hK/28drSLU29GH7x7\n3nmmjp1cegnXRVLBAfoYDdzPprNNrQFQEHQEzgG/GDZw0OXn+WTZuNyrrUYoa+sd\nQSLlElRj2qrpHIMOsMIBKBSNB+qjJHOMGdxcBAS768TfnQpGIpc1KJa24TxsVBzC\nScP4uvrFfPyQrqFUgiUhCeqLnO/6T5i/QAn/8cS5a1+zor5ZHSlw28TZTOxN2odo\nRulp/FtehiDEzmRowgD3M4fImAPY6Ib6VORCYASqpJFFla30tu2bQqEi6raOMTec\nhg5Ibkmj6fHFONaYvoTMRkYHmtUnNgIPU/CYPwswNk8w1+PPQfJ+TYjBXOQgdTLW\nF0azHBHh7NRmEHVydiF9CqjgNVRzjO4IEZfGqXNFPPMvR6UUzDaIkrpYbwXBFMin\nGNPV3QISeXj9ROjJoCv0nclXETwWemykjZlD6b5krXn5TaJlFb+69qJvXrCLq5WY\nEoevSqKkB9HVK9si7P8Sh1cPGOr3kfiFPmMNKFVI8l0+iDFgBywOomWNS/JEzqu1\nnN142DKdL1W/rkeMUhbX2h11CZNvHKIOy3iaA4MTOing8/eMzyUUQ73Ck7odYs4f\nrZ0tTXKJhxojPvBpTxYe9SxM0bDLREiOv0zX76+sIuhbAQCmk0o=\n=MNNf\n-----END PGP SIGNATURE-----\nSync with Git 2.47.2\nGit 2.47.2\n\n# -----BEGIN PGP SIGNATURE-----\n#\n# iQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmdkT1sACgkQsLXohpav\n# 5svdhRAAq0WoZIg+33vYNNVSTm3Ux9RJslmXs3lQuhuUJ61hK/28drSLU29GH7x7\n# 3nmmjp1cegnXRVLBAfoYDdzPprNNrQFQEHQEzgG/GDZw0OXn+WTZuNyrrUYoa+sd\n# QSLlElRj2qrpHIMOsMIBKBSNB+qjJHOMGdxcBAS768TfnQpGIpc1KJa24TxsVBzC\n# ScP4uvrFfPyQrqFUgiUhCeqLnO/6T5i/QAn/8cS5a1+zor5ZHSlw28TZTOxN2odo\n# Rulp/FtehiDEzmRowgD3M4fImAPY6Ib6VORCYASqpJFFla30tu2bQqEi6raOMTec\n# hg5Ibkmj6fHFONaYvoTMRkYHmtUnNgIPU/CYPwswNk8w1+PPQfJ+TYjBXOQgdTLW\n# F0azHBHh7NRmEHVydiF9CqjgNVRzjO4IEZfGqXNFPPMvR6UUzDaIkrpYbwXBFMin\n# GNPV3QISeXj9ROjJoCv0nclXETwWemykjZlD6b5krXn5TaJlFb+69qJvXrCLq5WY\n# EoevSqKkB9HVK9si7P8Sh1cPGOr3kfiFPmMNKFVI8l0+iDFgBywOomWNS/JEzqu1\n# nN142DKdL1W/rkeMUhbX2h11CZNvHKIOy3iaA4MTOing8/eMzyUUQ73Ck7odYs4f\n# rZ0tTXKJhxojPvBpTxYe9SxM0bDLREiOv0zX76+sIuhbAQCmk0o=\n# =MNNf\n# -----END PGP SIGNATURE-----\n# gpg: Signature made Thu 19 Dec 2024 08:52:43 AM PST\n# gpg:                using RSA key E1F036B1FEE7221FC778ECEFB0B5E88696AFE6CB\n# gpg: Good signature from \"Junio C Hamano <gitster@pobox.com>\" [ultimate]\n# gpg:                 aka \"Junio C Hamano <junio@pobox.com>\" [ultimate]\n# gpg:                 aka \"Junio C Hamano <jch@google.com>\" [ultimate]\n\n* tag \'v2.47.2\':\nGit 2.47.2\nGit 2.46.3\nGit 2.45.3\nGit 2.44.3\nGit 2.43.6\nGit 2.42.4\nGit 2.41.3\nGit 2.40.4\ncredential: disallow Carriage Returns in the protocol by default\ncredential: sanitize the user prompt\ncredential_format(): also encode <host>[:<port>]\nt7300: work around platform-specific behaviour with long paths on MinGW\ncompat/regex: fix argument order to calloc(3)\nmingw: drop bogus (and unneeded) declaration of `_pgmptr`\nci: remove \'Upload failed tests\' directories\' step from linux32 jobs"]
	"6632bcba514f4a195447eb77264f75fed3a768e6" [label="6632bcb" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:54:05 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:26 2025 -0800\n\ntree-diff: simplify emit_path() list management\n\nIn emit_path() we may append a new combine_diff_path entry to our list,\ndecide that we don't want it (because opt->pathchange() told us so) and\nthen roll it back.\n\nBetween the addition and the rollback, it doesn't matter if it's in the\nlist or not (no functions can even tell, since it's a singly-linked list\nand we pass around just the tail entry).\n\nSo it's much simpler to just wait until opt->pathchange() tells us\nwhether to keep it, and either attach it (or free it) then. We do still\nhave to allocate it up front since it's that struct itself which is\npassed to the pathchange callback.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"663485ae52c79430708592789f1bc4d96066e7b3" [label="663485a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:12 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:12 2025 -0800\n\nMerge branch 'cc/lop-remote' into next\n\nLarge-object promisor protocol extension.\n\n* cc/lop-remote:\ndoc: add technical design doc for large object promisors\npromisor-remote: check advertised name or URL\nAdd 'promisor-remote' capability to protocol v2"]
	"66e01e510a7cca4235489eac128913b069fa58a4" [label="66e01e5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\n\nMerge branch 'ps/object-collision-check'\n\nCI jobs gave sporadic failures, which turns out that that the\nobject finalization code was giving an error when it did not have\nto.\n\n* ps/object-collision-check:\nobject-file: retry linking file into place when occluding file vanishes\nobject-file: don't special-case missing source file in collision check\nobject-file: rename variables in `check_collision()`\nobject-file: fix race in object collision check"]
	"6764f8d562be65cdd822e1394a10aaea5f2f10dc" [label="6764f8d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:42 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:39 2025 -0800\n\nrefs/iterator: implement seeking for merged iterators\n\nImplement seeking on merged iterators. The implementation is rather\nstraight forward, with the only exception that we must not deallocate\nthe underlying iterators once they have been exhausted.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"678b22f528d533ab49944a696639e664d301a7e7" [label="678b22f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:04 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:38 2025 -0800\n\nci: stop special-casing for Ubuntu 16.04\n\nWith c85bcb5de1 (gitlab-ci: switch from Ubuntu 16.04 to 20.04,\n2024-10-31) we have adapted the last CI job to stop using Ubuntu 16.04\nin favor of Ubuntu 20.04. Remove the special-casing we still have in our\nCI scripts.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"67a6b1aeb82fd4685e862a3a7807d4ed8ea5d899" [label="67a6b1a" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:30:56 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:55 2025 -0800\n\nunpack_loose_header(): avoid numeric comparison of zlib status\n\nWhen unpacking a loose header, we try to inflate the first 32 bytes.\nWe\'d expect either Z_OK (we filled up the output buffer, but there are\nmore bytes in the object) or Z_STREAM_END (this is a tiny object whose\nheader and content fit in the buffer).\n\nWe check for that with \"if (status < Z_OK)\", making the assumption that\nall of the errors we\'d see have negative values (as Z_OK itself is \"0\",\nand Z_STREAM_END is \"1\").\n\nBut there\'s at least one case this misses: Z_NEED_DICT is \"2\". This\nisn\'t something we\'d ever expect to see, but if we do see it, we should\nconsider it an error (since we have no dictionary to load).\n\nInstead, the current code interprets Z_NEED_DICT as success and looks\nfor the object header\'s terminating NUL in the bytes we\'ve read. This\nwill generaly be zero bytes if the dictionary is mentioned at the start\nof the stream. So we\'ll fail to find it and complain \"the header is too\nlong\" (ULHR_LONG). But really, the problem is that the object is\nmalformed, and we should return ULHR_BAD.\n\nThis is a minor bug, as we consider both cases to be an error. But it\ndoes mean we print the wrong error message. The test case added in the\nprevious patch triggers this code, so we can just confirm the error\nmessage we see here.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6840fe9ee29ab51ffd7d924c624dc62da22c50bf" [label="6840fe9" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <derrickstolee@github.com>\nMon Feb 03 18:11:05 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:42 2025 -0800\n\nbackfill: add --min-batch-size=<n> option\n\nUsers may want to specify a minimum batch size for their needs. This is only\na minimum: the path-walk API provides a list of OIDs that correspond to the\nsame path, and thus it is optimal to allow delta compression across those\nobjects in a single server request.\n\nWe could consider limiting the request to have a maximum batch size in the\nfuture. For now, we let the path-walk API batches determine the\nboundaries.\n\nTo get a feeling for the value of specifying the --min-batch-size parameter,\nI tested a number of open source repositories available on GitHub. The\nprocedure was generally:\n\n1. git clone --filter=blob:none <url>\n2. git backfill\n\nChecking the number of packfiles and the size of the .git/objects/pack\ndirectory helps to identify the effects of different batch sizes.\n\nFor the Git repository, we get these results:\n\n| Batch Size      | Pack Count | Pack Size | Time  |\n|-----------------|------------|-----------|-------|\n| (Initial clone) | 2          | 119 MB    |       |\n| 25K             | 8          | 290 MB    | 24s   |\n| 50K             | 5          | 290 MB    | 24s   |\n| 100K            | 4          | 290 MB    | 29s   |\n\nOther than the packfile counts decreasing as we need fewer batches, the\nsize and time required is not changing much for this small example.\n\nFor the nodejs/node repository, we see these results:\n\n| Batch Size      | Pack Count | Pack Size | Time   |\n|-----------------|------------|-----------|--------|\n| (Initial clone) | 2          | 330 MB    |        |\n| 25K             | 19         | 1,222 MB  | 1m 22s |\n| 50K             | 11         | 1,221 MB  | 1m 24s |\n| 100K            | 7          | 1,223 MB  | 1m 40s |\n| 250K            | 4          | 1,224 MB  | 2m 23s |\n| 500K            | 3          | 1,216 MB  | 4m 38s |\n\nHere, we don't have much difference in the size of the repo, though the\n500K batch size results in a few MB gained. That comes at a cost of a\nmuch longer time. This extra time is due to server-side delta\ncompression happening as the on-disk deltas don't appear to be reusable\nall the time. But for smaller batch sizes, the server is able to find\nreasonable deltas partly because we are asking for objects that appear\nin the same region of the directory tree and include all versions of a\nfile at a specific path.\n\nTo contrast this example, I tested the microsoft/fluentui repo, which\nhas been known to have inefficient packing due to name hash collisions.\nThese results are found before GitHub had the opportunity to repack the\nserver with more advanced name hash versions:\n\n| Batch Size      | Pack Count | Pack Size | Time   |\n|-----------------|------------|-----------|--------|\n| (Initial clone) | 2          | 105 MB    |        |\n| 5K              | 53         | 348 MB    | 2m 26s |\n| 10K             | 28         | 365 MB    | 2m 22s |\n| 15K             | 19         | 407 MB    | 2m 21s |\n| 20K             | 15         | 393 MB    | 2m 28s |\n| 25K             | 13         | 417 MB    | 2m 06s |\n| 50K             | 8          | 509 MB    | 1m 34s |\n| 100K            | 5          | 535 MB    | 1m 56s |\n| 250K            | 4          | 698 MB    | 1m 33s |\n| 500K            | 3          | 696 MB    | 1m 42s |\n\nHere, a larger variety of batch sizes were chosen because of the great\nvariation in results. By asking the server to download small batches\ncorresponding to fewer paths at a time, the server is able to provide\nbetter compression for these batches than it would for a regular clone.\nA typical full clone for this repository would require 738 MB.\n\nThis example justifies the choice to batch requests by path name,\nleading to improved communication with a server that is not optimally\npacked.\n\nFinally, the same experiment for the Linux repository had these results:\n\n| Batch Size      | Pack Count | Pack Size | Time    |\n|-----------------|------------|-----------|---------|\n| (Initial clone) | 2          | 2,153 MB  |         |\n| 25K             | 63         | 6,380 MB  | 14m 08s |\n| 50K             | 58         | 6,126 MB  | 15m 11s |\n| 100K            | 30         | 6,135 MB  | 18m 11s |\n| 250K            | 14         | 6,146 MB  | 18m 22s |\n| 500K            | 8          | 6,143 MB  | 33m 29s |\n\nEven in this example, where the default name hash algorithm leads to\ndecent compression of the Linux kernel repository, there is value for\nselecting a smaller batch size, to a limit. The 25K batch size has the\nfastest time, but uses 250 MB more than the 50K batch size. The 500K\nbatch size took much more time due to server compression time and thus\nwe should avoid large batch sizes like this.\n\nBased on these experiments, a batch size of 50,000 was chosen as the\ndefault value.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"68c3be61fc58cafe3786625f5a2b5cf8e7186392" [label="68c3be6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:01 2025 -0800\n\nMerge branch 'bc/http-push-auth-netrc-fix'\n\nThe netrc support (via the cURL library) for the HTTP transport has\nbeen re-enabled.\n\n* bc/http-push-auth-netrc-fix:\nhttp: allow using netrc for WebDAV-based HTTP protocol"]
	"68f51871df87d82a504cbcca3230aba570719ba6" [label="68f5187" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 12:31:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:34:05 2025 -0800\n\nbuiltin/pack-redundant: remove subcommand with breaking changes\n\nThe git-pack-redundant(1) subcommand has been castrated to require\nthe \"--i-still-use-this\" option to do anything since 4406522b\n(pack-redundant: escalate deprecation warning to an error,\n2023-03-23), which appeared in Git 2.41 and was announced for\nremoval with 53a92c9552 (Documentation/BreakingChanges: announce\nremoval of git-pack-redundant(1), 2024-09-02). Stop compiling the\nsubcommand in case the `WITH_BREAKING_CHANGES` build flag is set.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"69666e6746e4e87535ebf89c463980a9c655bae7" [label="69666e6" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nFri Jan 10 11:09:19 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:21:21 2025 -0800\n\ndoc: convert git-restore to new style format\n\n- Switch the synopsis to a 'synopsis' block which will\nautomatically format placeholders in italics and keywords in\nmonospace\n\n- Use _<placeholder>_ instead of <placeholder> in the description\n\n- Use backticks for keywords and more complex option\ndescriptions. The new rendering engine will apply synopsis rules to\nthese spans.\n\nWhile at it, also convert an option description to imperative mood.\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6979bf6f8f5e831ef38214edb158c7fb493540f7" [label="6979bf6" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:57:00 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:27 2025 -0800\n\ntree-diff: make list tail-passing more explicit\n\nThe ll_diff_tree_paths() function and its helpers all take a pointer to\na list tail, possibly add to it, and then return the new tail. This\nworks but has two downsides:\n\n- The top-level caller (diff_tree_paths() in this case) has to make a\nfake combine_diff_path struct to act as the list head. This is\nespecially weird here, as it\'s a flexible-sized struct which will\nhave an empty FLEX_ARRAY field. That used to be a portability\nproblem, though these days it is legal because our FLEX_ARRAY macro\nover-allocates if necessary. It\'s still kind of ugly, though.\n\n- Besides the name \"tail\", it\'s not immediately obvious that the entry\nwe pass around will not be examined by each function. Using a\npointer-to-pointer or similar makes it more obvious we only care\nabout the pointer itself, not its contents.\n\nWe can solve both by passing around a pointer to the tail instead. That\ngets rid of the return value entirely, though note that because of the\nrecursion we actually need a three-star pointer for this to work.\n\nThe result is fairly readable, as we only need to dereference the tail\nin one spot. If we wanted to make it simpler we could wrap the tail in a\nstruct, which we pass around.\n\nAnother option is to convert combine_diff to use our generic list_head\nAPI. I tried that and found the result became much harder to read\noverall. It means that _all_ code that looks at combine_diff_path\nstructs needs to be modified, since the \"next\" pointer is now inside a\nlist_head which has to be dereferenced with list_entry(). And we lose\nsome type safety, since we\'re just passing around a list_head struct\neverywhere, and everybody who looks at it has to specify the type to\nlist_entry themselves.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"69bc044def16e8d8f85cd321b00ae53abe96a567" [label="69bc044" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Feb 25 11:10:43 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:31:22 2025 -0800\n\nt/unit-tests: convert oidmap test to use clar test framework\n\nAdapt oidmap test script to clar framework by using clar assertions\nwhere necessary. `cl_parse_any_oid()` ensures the hash algorithm is set\nbefore parsing. This prevents issues from an uninitialized or invalid\nhash algorithm.\n\nIntroduce 'test_oidmap__initialize` handles the to set up of the global\noidmap map with predefined key-value pairs, and `test_oidmap__cleanup`\nfrees the oidmap and its entries when all tests are completed.\n\nThe test loops through all entries to detect multiple errors. With this\nchange, it stops at the first error encountered, making it easier to\naddress it.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"69f6dea44cf272dc80be6dffd0ac8db5c50585b4" [label="69f6dea" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:50:19 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:26 2025 -0800\n\ncombine-diff: drop public declaration of combine_diff_path_size()\n\nWe want callers to use combine_diff_path_new() to allocate structs,\nrather than using combine_diff_path_size() and xmalloc(). That gives us\nmore consistency over the initialization of the fields.\n\nNow that the final external user of combine_diff_path_size() is gone, we\ncan stop declaring it publicly. And since our constructor is the only\ncaller, we can just inline it there.\n\nBreaking the size computation into two parts also lets us reuse the\nintermediate multiplication result of the parent length, since we need\nto know it to perform our memset(). The result is a little easier to\nread.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6a0ee54f9a3ebf667e86f7110c36b2240df96166" [label="6a0ee54" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:10 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:49 2024 -0800\n\nmeson: provide a summary of configured backends\n\nThere are a couple of backends from which the user can choose for HTTPS,\nSHA1, its unsafe variant as well as SHA256. Provide a summary of the\nconfigured values to make these more discoverable.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6a63995335e7a941d34bdafb93a56f789ebeed75" [label="6a63995" color=gold3 fillcolor=gold3 tooltip="author: Matthew Hughes <matthewhughes934@gmail.com>\nTue Jan 07 22:24:21 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 00:11:36 2025 -0800\n\ndocs: fix typesetting of merge driver placeholders\n\nFollowing the `CodingGuidlines`, since these placeholders are literal\nthey should be typeset verbatim, so fix some that aren't.\n\nSigned-off-by: Matthew Hughes <matthewhughes934@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6a64ac7b014fa2cfa7a69af3c253bcd53a94b428" [label="6a64ac7" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:19:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:19:20 2025 -0800\n\nGit 2.49-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6a9ae8101525360b8f79ed20d2f483616bd39c90" [label="6a9ae81" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 18 17:24:39 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:52:40 2025 -0800\n\nmerge-tree: fix link formatting in html docs\n\nIn the html documentation the link to the \"OUTPUT\" section is surrounded\nby square brackets. Fix this by adding explicit link text to the cross\nreference.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6aa09fd8726b7e8de37c0187a83c2c0fca280358" [label="6aa09fd" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:50 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:05:12 2025 -0800\n\nversion: extend get_uname_info() to hide system details\n\nCurrently, get_uname_info() function provides the full OS information.\nIn a following commit, we will need it to provide only the OS name.\n\nLet\'s extend it to accept a \"full\" flag that makes it switch between\nproviding full OS information and providing only the OS name.\n\nWe may need to refactor this function in the future if an\n`osVersion.format` is added.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6af23ac66cc5050aa4aa2adb5037196536c824e3" [label="6af23ac" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:53 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:41 2025 -0800\n\nreftable: decouple from Git codebase by pulling in \"compat/posix.h\"\n\nThe reftable library includes \"git-compat-util.h\" in order to get a\nPOSIX-like programming environment that papers over various differences\nbetween platforms. The header also brings with it a couple of helpers\nspecific to the Git codebase though, and over time we have started to\nuse these helpers in the reftable library, as well.\n\nThis makes it very hard to use the reftable library as a standalone\nlibrary without the rest of the Git codebase, so other libraries like\ne.g. libgit2 cannot easily use it. But now that we have removed all\ncalls to Git-specific functionality and have split out \"compat/posix.h\"\nas a separate header we can address this.\n\nStop including \"git-compat-util.h\" and instead include \"compat/posix.h\"\nto finalize the decoupling of the reftable library from the rest of the\nGit codebase. The only bits which remain specific to Git are \"system.h\"\nand \"system.c\", which projects will have to provide.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6b2655567dedb24571ef309c45f9ec45caf67933" [label="6b26555" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:40 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:38 2025 -0800\n\nrefs/iterator: separate lifecycle from iteration\n\nThe ref and reflog iterators have their lifecycle attached to iteration:\nonce the iterator reaches its end, it is automatically released and the\ncaller doesn't have to care about that anymore. When the iterator should\nbe released before it has been exhausted, callers must explicitly abort\nthe iterator via `ref_iterator_abort()`.\n\nThis lifecycle is somewhat unusual in the Git codebase and creates two\nproblems:\n\n- Callsites need to be very careful about when exactly they call\n`ref_iterator_abort()`, as calling the function is only valid when\nthe iterator itself still is. This leads to somewhat awkward calling\npatterns in some situations.\n\n- It is impossible to reuse iterators and re-seek them to a different\nprefix. This feature isn't supported by any iterator implementation\nexcept for the reftable iterators anyway, but if it was implemented\nit would allow us to optimize cases where we need to search for\nspecific references repeatedly by reusing internal state.\n\nDetangle the lifecycle from iteration so that we don't deallocate the\niterator anymore once it is exhausted. Instead, callers are now expected\nto always call a newly introduce `ref_iterator_free()` function that\ndeallocates the iterator and its internal state.\n\nNote that the `dir_iterator` is somewhat special because it does not\nimplement the `ref_iterator` interface, but is only used to implement\nother iterators. Consequently, we have to provide `dir_iterator_free()`\ninstead of `dir_iterator_release()` as the allocated structure itself is\nmanaged by the `dir_iterator` interfaces, as well, and not freed by\n`ref_iterator_free()` like in all the other cases.\n\nWhile at it, drop the return value of `ref_iterator_abort()`, which\nwasn't really required by any of the iterator implementations anyway.\nFurthermore, stop calling `base_ref_iterator_free()` in any of the\nbackends, but instead call it in `ref_iterator_free()`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6b2aa7fd371c93df44cebff072bef193104f43f8" [label="6b2aa7f" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nSun Jan 19 12:19:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:36:34 2025 -0800\n\npack-write: pass hash_algo to `write_rev_file()`\n\nThe `write_rev_file()` function uses the global `the_hash_algo` variable\nto access the repository's hash_algo. To avoid global variable usage,\npass a hash_algo from the layers above. Also modify children functions\n`write_rev_file_order()` and `write_rev_header()` to accept\n'the_hash_algo'.\n\nAltough the layers above could have access to the hash_algo internally,\nsimply pass in `the_hash_algo`. This avoids any compatibility issues and\nbubbles up global variable usage to upper layers which can be eventually\nresolved.\n\nHowever, in `midx-write.c`, since all usage of global variables is\nremoved, don't reintroduce them and instead use the `repo` available in\nthe context.\n\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6b64ee2d16d3226b28d727d6b77c860d404d2898" [label="6b64ee2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 19:03:19 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 19:03:19 2025 -0800\n\nWhat's cooking (2025/02 #05)"]
	"6bba6f604ba1658ad9b6b1de6eab299fb9fb35de" [label="6bba6f6" color=gold3 fillcolor=gold3 tooltip="author: Julian Prein <julian@druckdev.xyz>\nThu Jan 09 14:25:42 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 21:37:43 2025 -0800\n\nconfig.txt: add trailer.* variables\n\nThe trailer.* configuration variables are currently only described in\ngit-interpret-trailers(1) but affect git-commit and git-tag as well.\nMove that section into its own config/trailer.txt file and also include\nit in git-config(1).\n\nSigned-off-by: Julian Prein <julian@druckdev.xyz>\nAcked-by: Eric Sesterhenn <eric.sesterhenn@x41-dsec.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6bc06e8f20a8cd67d6e49d31472d5bc8c048cae0" [label="6bc06e8" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:05 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:38 2025 -0800\n\nci: use latest Ubuntu release\n\nBoth GitHub Actions and GitLab CI use the \"ubuntu:latest\" tag as the\ndefault image for most jobs. This tag is somewhat misleading though, as\nit does not refer to the latest release of Ubuntu, but to the latest LTS\nrelease thereof. But as we already have a couple of jobs exercising the\noldest LTS release of Ubuntu that Git still supports, it would make more\nsense to test the oldest and youngest versions of Ubuntu.\n\nAdapt these jobs to instead use the \"ubuntu:rolling\" tag, which refers\nto the actual latest release, which currently is Ubuntu 24.10.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6bd1c91b067bc73fdcedcc85aa2367f340cf3a2b" [label="6bd1c91" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:34 2025 -0800\n\nMerge branch 'ac/t5401-use-test-path-is-file' into next\n\nTest clean-up.\n\n* ac/t5401-use-test-path-is-file:\nt5401: prefer test_path_is_* helper function"]
	"6bea9376c4351ec0c6672131cf3b8c30b520dea3" [label="6bea937" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 22:23:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 22:23:26 2025 -0800\n\nMerge branch \'sj/ref-consistency-checks-more\' into next\n\n\"git fsck\" becomes more careful when checking the refs.\n\n* sj/ref-consistency-checks-more:\nbuiltin/fsck: add `git refs verify` child process\npacked-backend: check whether the \"packed-refs\" is sorted\npacked-backend: add \"packed-refs\" entry consistency check\npacked-backend: check whether the refname contains NUL characters\npacked-backend: add \"packed-refs\" header consistency check\npacked-backend: check if header starts with \"# pack-refs with: \"\npacked-backend: check whether the \"packed-refs\" is regular file\nbuiltin/refs: get worktrees without reading head information\nt0602: use subshell to ensure working directory unchanged"]
	"6c04ab211ccd52829e0658fb08bd9a9f9b0d655b" [label="6c04ab2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:38:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:38:43 2025 -0800\n\nSync with 'master'"]
	"6cd5b60792c63fcf958b0a48813a84830a5764d6" [label="6cd5b60" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:37 2025 -0800\n\nMerge branch 'ps/build-meson-fixes-0130' into next\n\nAssorted fixes and improvements to the build procedure based on\nmeson.\n\n* ps/build-meson-fixes-0130:\ngitlab-ci: restrict maximum number of link jobs on Windows\nmeson: consistently use custom program paths to resolve programs\nmeson: fix overwritten `git` variable\nmeson: prevent finding sed(1) in a loop\nmeson: improve handling of `sane_tool_path` option\nmeson: improve PATH handling\nmeson: drop separate version library\nmeson: stop linking libcurl into all executables\nmeson: introduce `libgit_curl` dependency\nmeson: simplify use of the common-main library\nmeson: inline the static 'git' library\nmeson: fix OpenSSL fallback when not explicitly required\nmeson: fix exec path with enabled runtime prefix"]
	"6d385fe277a467fea1c24adbc0d7b77472896904" [label="6d385fe" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:33 2025 -0800\n\nMerge branch 'bc/contrib-thunderbird-patch-inline-fix'\n\nA thunderbird helper script lost its bashism.\n\n* bc/contrib-thunderbird-patch-inline-fix:\nthunderbird-patch-inline: avoid bashism"]
	"6d872e6042484f8883c097f9ee8cef34dc4c0629" [label="6d872e6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\n\nMerge branch 'mh/connect-sign-compare' into next\n\nThe code in connect.c has been updated to work around complaints\nfrom -Wsign-compare.\n\n* mh/connect-sign-compare:\nconnect: address -Wsign-compare warnings"]
	"6d8aa2aec81abf4935c72745790bc5f9bf7541b9" [label="6d8aa2a" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:07 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:46 2024 -0800\n\nmeson: simplify conditions for HTTPS and SHA1 dependencies\n\nThe conditions used to figure out whteher the Security framework or\nOpenSSL library is required are a bit convoluted because they can be\npulled in via the HTTPS, SHA1 or SHA256 backends. Refactor them to be\neasier to read.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6dc24dfdaff5e6b5c5e185345c87a74383198d4a" [label="6dc24df" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:57:25 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:57:25 2025 -0800\n\nMerge branch 'ps/leakfixes-0129' into next\n\nA few more leakfixes.\n\n* ps/leakfixes-0129:\nscalar: free result of `remote_default_branch()`\nunix-socket: fix memory leak when chdir(3p) fails"]
	"6defb0235c6e7c46974d7d65de7530e559ddcf0c" [label="6defb02" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:57:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:57:16 2025 -0800\n\nSync with 'master'"]
	"6dff5de1da7157de20310b10e5a0c09953dbb4bb" [label="6dff5de" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 23:51:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 23:51:29 2025 -0800\n\nrefs: show --no-reflog in the help text\n\nWe forgot that we must keep the documentation and help text in sync.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6e3ea71639a3541523f2be8f950325c8a0aa6768" [label="6e3ea71" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:37 2025 -0800\n\nreftable/basics: stop using `st_mult()` in array allocators\n\nWe're using `st_mult()` as part of our macro helpers that allocate\narrays. This is bad due two two reasons:\n\n- `st_mult()` causes us to die in case the multiplication overflows.\n\n- `st_mult()` ties us to the Git codebase.\n\nRefactor the code to instead detect overflows manually and return an\nerror in such cases.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6ecb4fc149c725e16392dc88f1f419dd56aaddcc" [label="6ecb4fc" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\n\nMerge branch 'mh/doc-credential-helpers-with-pat'\n\nDocument that it is insecure to use Personal Access Tokens, which\nsome hosting providers take as username/password, embedded in URLs.\n\n* mh/doc-credential-helpers-with-pat:\ndocs: discuss caching personal access tokens\ndocs: list popular credential helpers"]
	"6f0b72205d6da3ae20fd9834b3ba5fb2e3d15811" [label="6f0b722" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:18:31 2025 -0800\n\nMerge branch 'sk/unit-tests-0130'\n\nConvert a handful of unit tests to work with the clar framework.\n\n* sk/unit-tests-0130:\nt/unit-tests: convert strcmp-offset test to use clar test framework\nt/unit-tests: convert strbuf test to use clar test framework\nt/unit-tests: adapt example decorate test to use clar test framework\nt/unit-tests: convert hashmap test to use clar test framework"]
	"6f3fbed8eda577703426d77dacc71ce0ba46634e" [label="6f3fbed" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:39 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\nenvironment: move access to \"core.hooksPath\" into repo settings\n\nThe \"core.hooksPath\" setting is stored in a global variable and\npopulated via the `git_default_core_config`. This may cause issues in\nthe case where one is handling multiple different repositories in a\nsingle process with different values for that config key, as we may or\nmay not see the correct value in that case. Furthermore, global state\nblocks our path towards libification.\n\nRefactor the code so that we instead store the value in `struct\nrepo_settings`. The value is computed as-needed and cached. The result\nshould be functionally the same as there aren\'t ever any code paths\nwhere we\'d execute hooks outside the context of a repository.\n\nNote that this requires us to change the passed-in repository in the\n`repo_git_path()` family of functions to be non-constant, as we call\n`adjust_git_path()` there.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6f4f191fd104d28584edf39c3394f11b8b8c72e3" [label="6f4f191" color=gold3 fillcolor=gold3 tooltip="author: Calvin Wan <calvinwan@google.com>\nFri Feb 21 20:04:47 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:11 2025 -0800\n\nserve: advertise object-info feature\n\nIn order for a client to know what object-info components a server can\nprovide, advertise supported object-info features. This will allow a\nclient to decide whether to query the server for object-info or fetch\nas a fallback.\n\nHelped-by: Jonathan Tan <jonathantanmy@google.com>\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Eric Ju  <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6f6127decde6785b9ba5f22a07a7754d1fda1a59" [label="6f6127d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:42 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:36 2025 -0800\n\nreftable/record: don't `BUG()` in `reftable_record_cmp()`\n\nThe reftable library aborts with a bug in case `reftable_record_cmp()`\nis invoked with two records of differing types. This would cause the\nprogram to die without the caller being able to handle the error, which\nis not something we want in the context of library code. And it ties us\nto the Git codebase.\n\nRefactor the code such that `reftable_record_cmp()` returns an error\ncode separate from the actual comparison result. This requires us to\nalso adapt some callers up the callchain in a similar fashion.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6f8ae955bda8ad246cc1f5f7a15f1c3b1c04696a" [label="6f8ae95" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:29 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:29 2024 -0800\n\nMerge branch \'kn/reflog-migration\'\n\n\"git refs migrate\" learned to also migrate the reflog data across\nbackends.\n\n* kn/reflog-migration:\nrefs: mark invalid refname message for translation\nrefs: add support for migrating reflogs\nrefs: allow multiple reflog entries for the same refname\nrefs: introduce the `ref_transaction_update_reflog` function\nrefs: add `committer_info` to `ref_transaction_add_update()`\nrefs: extract out refname verification in transactions\nrefs/files: add count field to ref_lock\nrefs: add `index` field to `struct ref_udpate`\nrefs: include committer info in `ref_update` struct"]
	"6f91663493cf992b692e681fb020a8a0b98729d8" [label="6f91663" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 01 00:23:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 01 00:23:29 2025 -0800\n\nWhat's cooking (2025/01 #09)"]
	"6f97affbc47713589631ee58027b956ed723e2a1" [label="6f97aff" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 01:12:06 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 01:12:06 2025 -0800\n\nRevert \"Merge branch \'ps/build-meson-fixes-0130\' into next\"\n\nThis reverts commit 6cd5b60792c63fcf958b0a48813a84830a5764d6, reversing\nchanges made to 89ad48db1442b5f60b4d0bd02a5edf2044ef411b."]
	"6fb8cb3d685382089a2e34ba35a30e898d63ab26" [label="6fb8cb3" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nWed Jan 01 21:18:28 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:17:05 2025 -0800\n\ntest-lib: check leak logs for presence of DEDUP_TOKEN\n\nWhen we check the leak logs, our original strategy was to check for any\nnon-empty log file produced by LSan. We later amended that to ignore\nnoisy lines in 370ef7e40d (test-lib: ignore uninteresting LSan output,\n2023-08-28).\n\nThis makes it hard to ignore noise which is more than a single line;\nwe'd have to actually parse the file to determine the meaning of each\nline.\n\nBut there's an easy line-oriented solution. Because we always pass the\ndedup_token_length option, the output will contain a DEDUP_TOKEN line\nfor each leak that has been found. So if we invert our strategy to stop\nignoring useless lines and only look for useful ones, we can just count\nthe number of DEDUP_TOKEN lines. If it's non-zero, then we found at\nleast one leak (it would even give us a count of unique leaks, but we\nreally only care if it is non-zero).\n\nThis should yield the same outcome, but will help us build more false\npositive detection on top.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6ff99174d152f0e1359c30e30ef08ab75b137037" [label="6ff9917" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:46 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:32 2025 -0800\n\nmeson: populate project version via GIT-VERSION-GEN\n\nThe Git version for Meson is currently wired up manually. It can thus\ngrow (and already has grown) stale quite easily, as having multiple\nsources of truth is never a good idea. This issue is mostly of cosmetic\nnature as we don\'t use the project version anywhere, and instead use the\nGIT-VERSION-GEN script to propagate the correct version into our build.\nBut it is somewhat puzzling when `meson setup` announces to build an old\nGit release.\n\nThere are a couple of alternatives for how to solve this:\n\n- We can keep the version undefined, but this makes Meson output\n\"undefined\" for the version, as well.\n\n- We can use GIT-VERSION-GEN to generate the version for us. At the\npoint of configuring the project we haven\'t yet figured out host\ndetails though, and thus we didn\'t yet set up the shell environment.\nWhile not an issue for Unix-based systems, this would be an issue in\nWindows, where the shell typically gets provided via Git for Windows\nand thus requires some special setup.\n\n- We can pull the default version out of GIT-VERSION-GEN and move it\ninto its own file. This likely requires some adjustments for scripts\nthat bump the version, but allows Meson to read the version from\nthat file trivially.\n\nPick the second option and use GIT-VERSION-GEN as it gives us the most\naccurate version. In order to fix the bootstrapping issue on Windows\nsystems we simply set the version to \'unknown\' in case no shell was\nfound. As the version is only of cosmetic value this isn\'t really much\nof an issue.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"6ffe58157f8cdec5de7add4d7e35065e9a38b870" [label="6ffe581" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 01:03:19 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 01:03:19 2025 -0800\n\nWhat's cooking (2025/02 #01)"]
	"706779344155823518745a19515601905877c41f" [label=7067793 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:32:36 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 18:57:44 2025 -0800\n\ncombine-diff: add combine_diff_path_new()\n\nThe combine_diff_path struct has variable size, since it embeds both the\nmemory allocation for the path field as well as a variable-sized parent\narray. This makes allocating one a bit tricky.\n\nWe have a helper to compute the required size, but it\'s up to individual\nsites to actually initialize all of the fields. Let\'s provide a\nconstructor function to make that a little nicer. Besides being shorter,\nit also hides away tricky bits like the computation of the \"path\"\npointer (which is right after the \"parent\" flex array).\n\nAs a bonus, using the same constructor everywhere means that we\'ll\nconsistently initialize all parts of the struct. A few code paths left\nthe parent array unitialized. This didn\'t cause any bugs, but we\'ll be\nable to simplify some code in the next few patches knowing that the\nparent fields have all been zero\'d.\n\nThis also gets rid of some questionable uses of \"int\" to store buffer\nlengths. Though we do use them to allocate, I don\'t think there are any\ninteger overflow vulnerabilities here (the allocation helper promotes\nthem to size_t and checks arithmetic for overflow, and the actual memcpy\nof the bytes is done using the possibly-truncated \"int\" value).\n\nSadly we can\'t use the FLEX_* macros to simplify the allocation here,\nbecause there are two variable-sized parts to the struct (and those\nmacros only handle one).\n\nNor can we get stop publicly declaring combine_diff_path_size(). This\npatch does not touch the code in path_appendnew() at all, which is not\nready to be moved to our new constructor for a few reasons:\n\n- path_appendnew() has a memory-reuse optimization where it tries to\nreuse combine_diff_path structs rather than freeing and\nreallocating.\n\n- path_appendnew() does not create the struct from a single path\nstring, but rather allocates and copies into the buffer from\nmultiple sources.\n\nThese can be addressed by some refactoring, but let\'s leave it as-is for\nnow.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"708d69bd9454e83486c3889e282559ba03f80ed0" [label="708d69b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 19:52:40 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 19:52:40 2024 -0800\n\nWhat's cooking (2024/12 #08)"]
	"70a16ff8a162ad0b6a39d17a1699a2949e2a2674" [label="70a16ff" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:21 2025 -0800\n\npath: refactor `repo_common_path()` family of functions\n\nThe functions provided by the \"path\" subsystem to derive repository\npaths for the commondir, gitdir, worktrees and submodules are quite\ninconsistent. Some functions have a `strbuf_` prefix, others have\ndifferent return values, some don\'t provide a variant working on top of\n`strbuf`s.\n\nWe\'re thus about to refactor all of these family of functions so that\nthey follow a common pattern:\n\n- `repo_*_path()` returns an allocated string.\n\n- `repo_*_path_append()` appends the path to the caller-provided\nbuffer while returning a constant pointer to the buffer. This\nclarifies whether the buffer is being appended to or rewritten,\nwhich otherwise wasn\'t immediately obvious.\n\n- `repo_*_path_replace()` replaces contents of the buffer with the\ncomputed path, again returning a pointer to the buffer contents.\n\nThe returned constant pointer isn\'t being used anywhere yet, but it will\nbe used in subsequent commits. Its intent is to allow calling patterns\nlike the following somewhat contrived example:\n\nif (!stat(&st, repo_common_path_replace(repo, &buf, ...)) &&\n!unlink(repo_common_path_replace(repo, &buf, ...)))\n...\n\nRefactor the commondir family of functions accordingly and adapt all\ncallers.\n\nNote that `repo_common_pathv()` is converted into an internal\nimplementation detail. It is only used to implement `the_repository`\ncompatibility shims and will eventually be removed from the public\ninterface.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"70afa6fa318db517adb0cc7d4cb66260061bb684" [label="70afa6f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:39 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:35 2025 -0800\n\nreftable/blocksource: stop using `xmmap()`\n\nWe use `xmmap()` to map reftables into memory. This function has two\nproblems:\n\n- It causes us to die in case the mmap fails.\n\n- It ties us to the Git codebase.\n\nRefactor the code to use mmap(3p) instead with manual error checking.\nNote that this function may not be the system-provided mmap(3p), but may\npoint to our `git_mmap()` wrapper that emulates the syscall on systems\nthat do not have mmap(3p) available.\n\nFix `reftable_block_source_from_file()` to properly bubble up the error\ncode in case the map(3p) call fails.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"70bdbde0d8d43ac32506877ab3a45783cb38651f" [label="70bdbde" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:50 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:06 2025 -0800\n\nbuiltin/ls-files: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/ls-files.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_ls_files()` function with `repo` set\nto NULL and then early in the function, `show_usage_with_options_if_asked()`\ncall will give the options help and exit.\n\nPass the repository available in the calling context to both\n`expand_objectsize()` and `show_ru_info()` to remove their\ndependency on the global `the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"70ef27a53fad21da39345973258be23bc3d80dcb" [label="70ef27a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\n\nMerge branch 'en/merge-process-renames-crash-fix' into jch\n\nThe merge-recursive and merge-ort machinery crashed in corner cases\nwhen certain renames are involved.\n\n* en/merge-process-renames-crash-fix:\nmerge-ort: fix slightly overzealous assertion for rename-to-self\nt6423: add a testcase causing a failed assertion in process_renames"]
	"712f6cfe5411fdbbf46688c22a40fac7e0a8839b" [label="712f6cf" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:47 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:38 2025 -0800\n\nreftable/system: introduce `reftable_rand()`\n\nIntroduce a new system-level `reftable_rand()` function that generates a\nsingle unsigned integer for us. The implementation of this function is\nto be provided by the calling codebase, which allows us to more easily\nhook into pre-seeded random number generators.\n\nAdapt the two callsites where we generated random data.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"714518543f337d2b946562c0ba92b7ef742e0b7a" [label=7145185 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:00 2025 -0800\n\nMerge branch \'rs/ref-fitler-used-atoms-value-fix\' into next\n\n\"git branch --sort=...\" and \"git for-each-ref --format=... --sort=...\"\ndid not work as expected with some atoms, which has been corrected.\n\n* rs/ref-fitler-used-atoms-value-fix:\nref-filter: remove ref_format_clear()\nref-filter: move is-base tip to used_atom\nref-filter: move ahead-behind bases into used_atom"]
	"715e8ca8f0be3cd2e52db230bdb82a77e63a5cf5" [label="715e8ca" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:07 2025 -0800\n\nmeson: fix OpenSSL fallback when not explicitly required\n\nWhen OpenSSL isn't provided by the system we know to fall back to the\nsubproject wrapper. This is especially helpful on Windows systems, where\nyou typically don't have OpenSSL available, in order to reduce the\nnumber of required dependencies.\n\nThe fallback is broken though when the OpenSSL backend is set to 'auto'\nas we end up calling `dependency('openssl', required: false)` in that\ncase, which implicitly disables falling back to the wrapper.\n\nFix the issue by re-allowing the fallback in case either OpenSSL is\nrequired or in case the backend is set to 'auto'. While at it, fix\nreporting of the backend in case the user asked us to pick no HTTPS\nbackend at all.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"716b00e6e9e661c055de1b5baf440279c23f2da0" [label="716b00e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\n\nMerge branch \'da/difftool-sans-the-repository\'\n\n\"git difftool\" code clean-up.\n\n* da/difftool-sans-the-repository:\ndifftool: eliminate use of USE_THE_REPOSITORY_VARIABLE\ndifftool: eliminate use of the_repository\ndifftool: eliminate use of global variables"]
	"717d13af3633b765c629f91a0c3c1c2af8818a2e" [label="717d13a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\n\nMerge branch 'ms/rename-match-name-with-pattern' into next\n\nCode renaming.\n\n* ms/rename-match-name-with-pattern:\nrefspec: clarify function naming and documentation"]
	"71e19a003197960cec38d30e71b49d182bcf8510" [label="71e19a0" color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nMon Jan 13 18:13:36 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 20:48:28 2025 -0800\n\nobject-name: fix resolution of object names containing curly braces\n\nGiven a branch name of \'foo{bar\', commands like\n\ngit cat-file -p foo{bar:README.md\n\nshould succeed (assuming that branch had a README.md file, of course).\nHowever, the change in cce91a2caef9 (Change \'master@noon\' syntax to\n\'master@{noon}\'., 2006-05-19) presumed that curly braces would always\ncome after an \'@\' or \'^\' and be paired, causing e.g. \'foo{bar:README.md\'\nto entirely miss the \':\' and assume there\'s no object being referenced.\nIn short, git would report:\n\nfatal: Not a valid object name foo{bar:README.md\n\nChange the parsing to only make the assumption of paired curly braces\nimmediately after either a \'@\' or \'^\' character appears.\n\nAdd tests for this, as well as for a few other test cases that initial\nversions of this patch broke:\n* \'foo@@{...}\'\n* \'foo^{/${SEARCH_TEXT_WITH_COLON}}:${PATH}\'\n\nNote that we\'d prefer not duplicating the special logic for \"@^\" characters\nhere, because if get_oid_basic() or interpret_nth_prior_checkout() or\nget_oid_basic() or similar gain extra methods of using curly braces,\nthen the logic in get_oid_with_context_1() would need to be updated as\nwell.  But it\'s not clear how to refactor all of these to have a simple\ncommon callpoint with the specialized logic.\n\nReported-by: Gabriel Amaral <gabriel-amaral@github.com>\nHelped-by: Michael Haggerty <mhagger@github.com>\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"71f41b00d8cac733315206fddf476d8bed484a36" [label="71f41b0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:37 2025 -0800\n\nMerge branch 'jc/cli-doc-option-and-config' into next\n\nDoc update.\n\n* jc/cli-doc-option-and-config:\ngitcli: document that command line trumps config and env"]
	"72749cdeaf475612deb2ca4a959a59b0e9425c0e" [label="72749cd" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:50:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:50:29 2025 -0800\n\nWhat's cooking (2025/03 #02)"]
	"72b47a15e918065d3df5ff68594d3890697f3db6" [label="72b47a1" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:53:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:53:18 2025 -0800\n\nMerge branch 'rs/reftable-reader-new-leakfix' into next\n\nLeakfix.\n\n* rs/reftable-reader-new-leakfix:\nreftable: release name on reftable_reader_new() error"]
	"72d385824a75e1d39b2a4395852dc954907fcc7d" [label="72d3858" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:22 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:24 2025 -0800\n\nrefs.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"72f1ddfbc95b47c6011bb423e6947418d1d72709" [label="72f1ddf" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:33:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:53:50 2025 -0800\n\nMerge branch 'ps/build-meson-fixes' into ps/build-meson-fixes-0130\n\n* ps/build-meson-fixes:\nci: wire up Visual Studio build with Meson\nci: raise error when Meson generates warnings\nmeson: fix compilation with Visual Studio\nmeson: make the CSPRNG backend configurable\nmeson: wire up fuzzers\nmeson: wire up generation of distribution archive\nmeson: wire up development environments\nmeson: fix dependencies for generated headers\nmeson: populate project version via GIT-VERSION-GEN\nGIT-VERSION-GEN: allow running without input and output files\nGIT-VERSION-GEN: simplify computing the dirty marker"]
	"72fe8bfac832a1f1b9b7cdc4efa793c48e13933e" [label="72fe8bf" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:04 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:01 2025 -0800\n\nbuiltin/pack-refs: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/pack-refs.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_pack_refs()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7304bd2bc390aa6cf27f7a2527d7806dd3fad53e" [label="7304bd2" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:35 2025 -0800\n\nci: wire up Visual Studio build with Meson\n\nAdd a new job to GitHub Actions and GitLab CI that builds and tests\nMeson-based builds with Visual Studio.\n\nA couple notes:\n\n- While the build job is mandatory, the test job is marked as \"manual\"\non GitLab so that it doesn\'t run by default. We already have a bunch\nof Windows-based jobs, and the computational overhead that these\ncause is simply out of proportion to run the test suite twice.\n\nThe same isn\'t true for GitHub as I could not find a way to make a\nsubset of jobs manually triggered.\n\n- We disable Perl. This is because we pick up Perl from Git for\nWindows, which outputs different paths (\"/c/\" instead of \"C:\\\") than\nwhat we expect in our tests.\n\n- We don\'t use the Git for Windows SDK. Instead, the build only\ndepends on Visual Studio, Meson and Git for Windows. All the other\ndependencies like curl, pcre2 and zlib get pulled in and compiled\nautomatically by Meson and thus do not have to be provided by the\nsystem.\n\n- We open-code \"ci/run-test-slice.sh\". This is because we only have\ndirect access to PowerShell, so we manually implement the logic.\nThere is an upstream pull request for the Meson build system [1] to\nimplement test slicing in Meson directly.\n\n- We don\'t process test artifacts for failed CI jobs. This is done to\nkeep down prerequisites to a minimum.\n\nAll tests are passing.\n\n[1]: https://github.com/mesonbuild/meson/pull/14092\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7346e340f147131ca32089f61f7d0f502f80d19d" [label="7346e34" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 31 13:55:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:06:10 2025 -0800\n\nhash: stop typedeffing the hash context\n\nWe generally avoid using `typedef` in the Git codebase. One exception\nthough is the `git_hash_ctx`, likely because it used to be a union\nrather than a struct until the preceding commit refactored it. But now\nthat it is a normal `struct` there isn't really a need for a typedef\nanymore.\n\nDrop the typedef and adapt all callers accordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"737049d33235a7e1b5395cfdde28e09eb0c8b565" [label="737049d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:46 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:46 2025 -0800\n\nMerge branch \'bc/doc-adoc-not-txt\' into next\n\nAll the documentation .txt files have been renamed to .adoc to help\ncontent aware editors.\n\n* bc/doc-adoc-not-txt:\nRemove obsolete \".txt\" extensions for AsciiDoc files\ndoc: use .adoc extension for AsciiDoc files\ngitattributes: mark AsciiDoc files as LF-only\neditorconfig: add .adoc extension\ndoc: update gitignore for .adoc extension"]
	"73897bcc729bd26ea18552b27e1ed5ffad93a951" [label="73897bc" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:47:00 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:47:09 2024 -0800\n\nSync with Git 2.48-rc1"]
	"73c152e6106c3ead1f15f920f4b4f4c38fbfcdb3" [label="73c152e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\n\nMerge branch 'mh/gitattr-doc-markup-fix'\n\nDoc markup fix.\n\n* mh/gitattr-doc-markup-fix:\ndocs: fix typesetting of merge driver placeholders"]
	"73e055d71ea39c54e78b6e9a28ea0d8e7999a5cb" [label="73e055d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\n\nMerge branch \'mh/credential-cache-authtype-request-fix\'\n\nThe \"cache\" credential back-end did not handle authtype correctly,\nwhich has been corrected.\n\n* mh/credential-cache-authtype-request-fix:\ncredential-cache: respect authtype capability"]
	"73e35b172a74cfab8f1db450113f2bf826b40b60" [label="73e35b1" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:13 2025 -0800\n\nMerge branch 'rs/reftable-realloc-errors'\n\nThe custom allocator code in the reftable library did not handle\nfailing realloc() very well, which has been addressed.\n\n* rs/reftable-realloc-errors:\nt-reftable-merged: handle realloc errors\nreftable: handle realloc error in parse_names()\nreftable: fix allocation count on realloc error\nreftable: avoid leaks on realloc error"]
	"746ef86a415990beed959ab8f5adb54c4a1ebc90" [label="746ef86" color=gold3 fillcolor=gold3 tooltip="author: David Mandelberg <david@mandelberg.org>\nWed Mar 05 01:09:28 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 18:06:06 2025 -0800\n\ncompletion: fix bugs with slashes in remote names\n\nPreviously, some calls to for-each-ref passed fixed numbers of path\ncomponents to strip from refs, assuming that remote names had no slashes\nin them. This made completions like:\n\ngit push github/dseomn :com<Tab>\n\nResult in:\n\ngit push github/dseomn :dseomn/completion-remote-slash\n\nWith this patch, it instead results in:\n\ngit push github/dseomn :completion-remote-slash\n\nSigned-off-by: David Mandelberg <david@mandelberg.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"74a3c43834882219aa12aa1815d441a1762ba558" [label="74a3c43" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:39 2025 -0800\n\nMerge branch \'da/help-autocorrect-one-fix\' into next\n\n\"git -c help.autocorrect=0 psuh\" shows the suggested typofix,\nunlike the previous attempt in the base topic.\n\n* da/help-autocorrect-one-fix:\nhelp: add \"show\" as a valid configuration value\nhelp: show the suggested command when help.autocorrect is false"]
	"757161efcca150a9a96b312d9e780a071e601a03" [label="757161e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:02:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:02:01 2025 -0800\n\nmergetag object f93ff170b93a1782659637824b25923245ac9dd1\ntype commit\ntag v2.48.1\ntagger Junio C Hamano <gitster@pobox.com> 1736801863 -0800\n\nGit 2.48.1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmeFfkcACgkQsLXohpav\n5ssp6g//UZovY9wBY/yTEpDoIfJURbahazUA8+1uvxkbkOREIZdZqboj4TiiUg+o\n0UyVSCYniFaSlE4ToO4ISg0r7sgBMtBDkNH5ZHtVVfr9LFnRYH8/zSv87CzteEhQ\nmZiwPVVnVDmxplbZXsmXi+elAzpbNWXyfmCdFnPxfJht4pcj0pjwDQoIRZr2p7/9\n2hwMPzLvQhqul2j501DA1YvGAxdJ4nLuYO+0Yg2//nmTs9XN2jjvk4kQvoiOULnM\n0aWfNNBOCs2I7BvnDguEdsGG3u9pKgBEqXWSYbb8V9FcoR06tMWmSYAGvViUcCMu\n/sB08VKxymF9KPC4xf9ktoyHLfV3AahF6/T6hEGMvmdqYmrwAUjDr7T+LLwfATS1\nfBPfuMjVRiveMO/mXEv5KPpDMeSyCeZsMWk/Gu0WFE8XXRf9O96CrH7jvMwjeZI3\nc/qOFKPjhjED2GrNptH/WKnrdm6O9eMO7dhEBMU5nacSJcNRDLLWO+W2EhJfEDo3\nluQ/y+PBkvukRVrj4SjUkr7yTHNktcMvk8UhLwgjdZ7wcPKU2VcLaStFRi6ge0JH\nnegkIdhaYM08GFoURx5/fnbURQaP60qCftEOc9rprIjeqH3uCyUqD2M9zUPJPkjS\nHeNdyl2lxdSiTxjWPo4GG360G0yuL25VQScuwm9NKuv3RSXrJOs=\n=v7/L\n-----END PGP SIGNATURE-----\nSync with Git 2.48.1"]
	"7583a8b724bd38889376a90fb593cadbd8a97e9c" [label="7583a8b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 19:45:49 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 19:45:49 2025 -0800\n\nMerge branch 'js/win-2.49-build-fixes' into next\n\n* js/win-2.49-build-fixes:\ncmake: generalize the handling of the `CLAR_TEST_OBJS` list\nmeson: fix sorting\nident: stop assuming that `gw_gecos` is writable"]
	"759d2a534a2ca290f3dce24a29b1e5390781706c" [label="759d2a5" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:18:00 2025 -0800\n\nbuiltin/reflog: make functions regarding `reflog_expire_options` public\n\nMake functions that are required to manage `reflog_expire_options`\navailable elsewhere by moving them into \"reflog.c\" and exposing them in\nthe corresponding header. The functions will be used in a subsequent\ncommit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"75a044f748f2c37a2a08854acd49ed1fbdb86bb1" [label="75a044f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:52 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:40 2025 -0800\n\ngit-compat-util.h: split out POSIX-emulating bits\n\nThe \"git-compat-util.h\" header is a treasure trove of various bits and\npieces used throughout the project. It basically mixes two different\nthings into one:\n\n- Providing a POSIX-like interface even on platforms that aren\'t\nPOSIX-compliant.\n\n- Providing low-level functionality that is specific to Git.\n\nThis intermixing is a bit of a problem for the reftable library as we\ndon\'t want to recreate the POSIX-like interface there. But neither do we\nwant to pull in the Git-specific functionality, as it is otherwise quite\neasy to start depending on the Git codebase again.\n\nSplit out a new header \"compat/posix.h\" that only contains the bits and\npieces relevant for the emulation of POSIX, which we will start using in\nthe next commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7653e9af9b9ddfc465df50203c78f5c8569d8c79" [label="7653e9a" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nSun Jan 19 12:19:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:36:34 2025 -0800\n\npack-write: pass hash_algo to `write_idx_file()`\n\nThe `write_idx_file()` function uses the global `the_hash_algo` variable\nto access the repository's hash_algo. To avoid global variable usage,\npass a hash_algo from the layers above.\n\nSince `stage_tmp_packfiles()` also resides in 'pack-write.c' and calls\n`write_idx_file()`, update it to accept a `struct git_hash_algo` as a\nparameter and pass it through to the callee.\n\nAltough the layers above could have access to the hash_algo internally,\nsimply pass in `the_hash_algo`. This avoids any compatibility issues and\nbubbles up global variable usage to upper layers which can be eventually\nresolved.\n\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"76baf97fa13c4109c335180b121140c8ba1bf97b" [label="76baf97" color=gold3 fillcolor=gold3 tooltip="author: Alecs King <alecsk@gmail.com>\nFri Jan 10 11:13:46 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:27:52 2025 -0800\n\ninstaweb: fix ip binding for the python http.server\n\n`git instaweb -d python` should bind the server to 0.0.0.0, while\n`git instaweb -d python -l` should bind the server to 127.0.0.1.\n\nThe code had them backwards by mistake since 2eb14bb2d4\n(git-instaweb: add Python builtin http.server support, 2019-01-28).\n\nSigned-off-by: Alecs King <alecsk@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"76cf4f61c87855ebf0784b88aaf737d6b09f504b" [label="76cf4f6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:02:23 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:02:23 2024 -0800\n\nMerge https://github.com/j6t/git-gui\n\n* 'master' of https://github.com/j6t/git-gui:\ngit-gui: use system encoding to show console output\ngit-gui: Remove forced rescan of stat-dirty files."]
	"76db3e05d55a7d485e776ee1981179b10871051e" [label="76db3e0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:33 2025 -0800\n\nMerge branch \'jc/3.0-branches-remotes-update\' into next\n\nRephrase removal of \".git/branches\" and \".git/remotes\" support in\nthe BreakingChanges document.\n\nComments?\n\n* jc/3.0-branches-remotes-update:\nBreakingChanges: clarify branches/ and remotes/"]
	"76e9e8173680e7454adbda82391affa3a2a567ab" [label="76e9e81" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\n\nMerge branch 'tc/meson-use-our-version-def-h' into next\n\nThe meson build procedure looked for the 'version-def.h' file in a\nwrong directory, which has been corrected.\n\n* tc/meson-use-our-version-def-h:\nmeson: ensure correct version-def.h is used"]
	"7722b997c65b99aa824f83fd8e674ae77ea698f3" [label="7722b99" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:32 2025 -0800\n\nMerge branch \'jt/rev-list-missing-print-info\'\n\n\"git rev-list --missing=\" learned to accept \"print-info\" that gives\nknown details expected of the missing objects, like path and type.\n\n* jt/rev-list-missing-print-info:\nrev-list: extend print-info to print missing object type\nrev-list: add print-info action to print missing object path"]
	"77b2d29e91c568dc3b08adbfc48fea641d4e39f7" [label="77b2d29" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nFri Jan 10 11:08:23 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:19:52 2025 -0800\n\ndoc: convert git-notes to new documentation format\n\n- Switch the synopsis to a synopsis block which will automatically\nformat placeholders in italics and keywords in monospace\n- Use _<placeholder>_ instead of <placeholder> in the description\n- Use `backticks` for keywords and more complex option\ndescriptions. The new rendering engine will apply synopsis rules to\nthese spans.\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"780f7fdaa36b70d08fb26191904c3103207cc40d" [label="780f7fd" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:54 2025 -0800\n\nMerge branch 'aj/difftool-config-doc-fix'\n\nDocfix.\n\n* aj/difftool-config-doc-fix:\ndifftool docs: restore correct position of tool list"]
	"782243c5383dd40d26d75dc97d7fc39900fb60a7" [label="782243c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:52 2025 -0800\n\nSync with 'master'"]
	"78a95e0d806677fbb1d436c2985e39c1f8ce3c00" [label="78a95e0" color=gold3 fillcolor=gold3 tooltip="author: Olga Pilipenco <olga.pilipenco@shopify.com>\nWed Feb 05 07:30:13 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 18:46:23 2025 -0800\n\nworktree: detect from secondary worktree if main worktree is bare\n\nWhen extensions.worktreeConfig is true and the main worktree is\nbare -- that is, its config.worktree file contains core.bare=true\n-- commands run from secondary worktrees incorrectly see the main\nworktree as not bare. As such, those commands incorrectly think\nthat the repository\'s default branch (typically \"main\" or\n\"master\") is checked out in the bare repository even though it\'s\nnot. This makes it impossible, for instance, to checkout or delete\nthe default branch from a secondary worktree, among other\nshortcomings.\n\nThis problem occurs because, when extensions.worktreeConfig is\ntrue, commands run in secondary worktrees only consult\n$commondir/config and $commondir/worktrees/<id>/config.worktree,\nthus they never see the main worktree\'s core.bare=true setting in\n$commondir/config.worktree.\n\nFix this problem by consulting the main worktree\'s config.worktree\nfile when checking whether it is bare. (This extra work is\nperformed only when running from a secondary worktree.)\n\nHelped-by: Eric Sunshine <sunshine@sunshineco.com>\nSigned-off-by: Olga Pilipenco <olga.pilipenco@shopify.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"78cdeed4c79d165c915e8de0355cc3fb7f5797c5" [label="78cdeed" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:36 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:23 2025 -0800\n\nci: make \"linux-musl\" job use zlib-ng\n\nWe don\'t yet have any test coverage for the new zlib-ng backend as part\nof our CI. Add it by installing zlib-ng in Alpine Linux, which causes\nMeson to pick it up automatically.\n\nNote that we are somewhat limited with regards to where we run that job:\nDebian-based distributions don\'t have zlib-ng in their repositories,\nFedora has it but doesn\'t run tests, and Alma Linux doesn\'t have the\npackage either. Alpine Linux does have it available and is running our\ntest suite, which is why it was picked.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"791677a5ddce9730a1203188938406ae030ed170" [label="791677a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\n\nMerge branch 'jp/doc-trailer-config'\n\nDocumentaiton updates.\n\n* jp/doc-trailer-config:\nconfig.txt: add trailer.* variables"]
	"796fda3f786b3cd5518462b46895244dfecad63c" [label="796fda3" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 17:24:18 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:36:40 2025 -0800\n\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_REF_FORMAT\n\nThe GIT_DEFAULT_REF_FORMAT environment variable can be set to influence\nthe default ref format that new repostiories shall be initialized with.\nWhile this is the expected behaviour when creating a new repository, it\nis not when reinitializing a repository: we should retain the ref format\ncurrently used by it in that case.\n\nThis doesn\'t work correctly right now:\n\n$ git init --ref-format=files repo\nInitialized empty Git repository in /tmp/repo/.git/\n$ GIT_DEFAULT_REF_FORMAT=reftable git init repo\nfatal: could not open \'/tmp/repo/.git/refs/heads\' for writing: Is a directory\n\nInstead of retaining the current ref format, the reinitialization tries\nto reinitialize the repository with the different format. This action\nfails when git-init(1) tries to write the \".git/refs/heads\" stub, which\nin the context of the reftable backend is always written as a file so\nthat we can detect clients which inadvertently try to access the repo\nwith the wrong ref format. Seems like the protection mechanism works for\nthis case, as well.\n\nFix the issue by ignoring the environment variable in case the repo has\nalready been initialized with a ref storage format.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"798e0f451661f81f4568dce4033cf1c9076f224f" [label="798e0f4" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nSun Jan 19 14:23:37 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:42:55 2025 -0800\n\npackfile: factor out --pack_header argument parsing\n\nBoth index-pack and unpack-objects accept a --pack_header argument. This\nis an undocumented internal argument used by receive-pack and fetch to\npass along information about the header of the pack, which they've\nalready read from the incoming stream.\n\nIn preparation for a bugfix, let's factor the duplicated code into a\ncommon helper.\n\nThe callers are still responsible for identifying the option. While this\ncould likewise be factored out, it is more flexible this way (e.g., if\nthey ever started using parse-options and wanted to handle both the\nstuck and unstuck forms).\n\nLikewise, the callers are responsible for reporting errors, though they\nboth just call die(). I've tweaked unpack-objects to match index-pack in\nmarking the error for translation.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"799bbc6b82d223e23e2550aba4ccca4dec29d0c2" [label="799bbc6" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:50 2025 -0800\n\nMerge branch 'sk/unit-tests' into next\n\nMove a few more unit tests to the clar test framework.\n\n* sk/unit-tests:\nt/unit-tests: convert reftable tree test to use clar test framework\nt/unit-tests: adapt priority queue test to use clar test framework\nt/unit-tests: convert mem-pool test to use clar test framework\nt/unit-tests: handle dashes in test suite filenames"]
	"79be31650910025eaaec448221191bf37cc4776f" [label="79be316" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:53 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:07 2025 -0800\n\nmeson: fix exec path with enabled runtime prefix\n\nWhen the runtime prefix option is enabled, Git is built such that it\nknows to locate its binaries relative to the directory a binary is being\nexecuted from. This requires us to figure out relative paths, which is\nhandled in `system_prefix()` by trying to strip a couple of well-known\npaths.\n\nOne of these paths, GIT_EXEC_PATH, is expected to be absolute when\nruntime prefixes are enabled, but relative otherwise. And while our\nMakefile gets this correctly, in Meson we always wire up the absolute\npath, which may result in us not being able to find binaries.\n\nFix this by conditionally injecting the paths depending on whether or\nnot the `runtime_prefix` option is enabled.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7a3136e5c713c4a5ed2af51ccb8abb5cfa3d98bf" [label="7a3136e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:38 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:11 2024 -0800\n\nmeson: install static files for HTML documentation\n\nNow that we generate man pages, articles and user manual with Meson the\nonly thing that is still missing in an installation of HTML documents is\na couple of static files. Wire these up to finalize Meson\'s support for\ngenerating HTML documentation.\n\nDiffing an installation that uses our Makefile with an installation that\nuses Meson only surfaces a couple of discepancies now:\n\n- Meson doesn\'t install \"everyday.html\" and \"git-remote-helpers.html\".\nThese files are marked as obsolete and don\'t contain any useful\ninformation anymore: they simply point to their modern equivalents.\n\n- Meson doesn\'t install \"*.txt\" files when asking for HTML docs. I\'m\nnot sure why our Makefiles do this in the first place, and it does\nseem like the resulting installation is fully functional even\nwithout those files.\n\nOther than that, both layout and file contents are the exact same.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7a52a8c7d855d3ed779059af160248934ac2c6b0" [label="7a52a8c" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:54 2025 -0800\n\nclone: introduce struct clone_opts in builtin/clone.c\n\nThere is a lot of state stored in global variables in builtin/clone.c.\nIn the long run we'd like to remove many of those.\n\nIntroduce `struct clone_opts` in this file. This struct will be used to\ncontain all details needed to perform the clone. The struct object can\nbe thrown around to all the functions that need these details.\n\nThe first field we're adding is `wants_head`. In some scenarios\n(specifically when both `--single-branch` and `--branch` are given) we\nare not interested in `HEAD` on the remote. The field `wants_head` in\n`struct clone_opts` will hold this information. We could have put\n`option_branch` and `option_single_branch` into that struct instead, but\nin a following commit we'll be using `wants_head` as well.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7a8d9efc26f194eb20114d1f639ec9fa48d70bff" [label="7a8d9ef" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nMon Dec 30 05:30:26 2024 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:18:58 2024 -0800\n\ngrep: work around LSan threading race with barrier\n\nThere's a race with LSan when spawning threads and one of the threads\ncalls die(). We worked around one such problem with index-pack in the\nprevious commit, but it exists in git-grep, too. You can see it with:\n\nmake SANITIZE=leak THREAD_BARRIER_PTHREAD=YesOnLinux\ncd t\n./t0003-attributes.sh --stress\n\nwhich fails pretty quickly with:\n\n==git==4096424==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 32 byte(s) in 1 object(s) allocated from:\n#0 0x7f906de14556 in realloc ../../../../src/libsanitizer/lsan/lsan_interceptors.cpp:98\n#1 0x7f906dc9d2c1 in __pthread_getattr_np nptl/pthread_getattr_np.c:180\n#2 0x7f906de2500d in __sanitizer::GetThreadStackTopAndBottom(bool, unsigned long*, unsigned long*) ../../../../src/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp:150\n#3 0x7f906de25187 in __sanitizer::GetThreadStackAndTls(bool, unsigned long*, unsigned long*, unsigned long*, unsigned long*) ../../../../src/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp:614\n#4 0x7f906de17d18 in __lsan::ThreadStart(unsigned int, unsigned long long, __sanitizer::ThreadType) ../../../../src/libsanitizer/lsan/lsan_posix.cpp:53\n#5 0x7f906de143a9 in ThreadStartFunc<false> ../../../../src/libsanitizer/lsan/lsan_interceptors.cpp:431\n#6 0x7f906dc9bf51 in start_thread nptl/pthread_create.c:447\n#7 0x7f906dd1a677 in __clone3 ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78\n\nAs with the previous commit, we can fix this by inserting a barrier that\nmakes sure all threads have finished their setup before continuing. But\nthere's one twist in this case: the thread which calls die() is not one\nof the worker threads, but the main thread itself!\n\nSo we need the main thread to wait in the barrier, too, until all\nthreads have gotten to it. And thus we initialize the barrier for\nnum_threads+1, to account for all of the worker threads plus the main\none.\n\nIf we then test as above, t0003 should run indefinitely.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7b081d2f70feb7eadd1e93f52146e5d68371451d" [label="7b081d2" color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:29 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:16 2025 -0800\n\nhash.h: introduce `unsafe_hash_algo()`\n\nIn 253ed9ecff (hash.h: scaffolding for _unsafe hashing variants,\n2024-09-26), we introduced \"unsafe\" variants of the SHA-1 hashing\nfunctions by introducing new functions like \"unsafe_init_fn()\" and so\non.\n\nThis approach has a major shortcoming that callers must remember to\nconsistently use one variant or the other. Failing to consistently use\n(or not use) the unsafe variants can lead to crashes at best, or subtle\nmemory corruption issues at worst.\n\nIn the hashfile API, this isn\'t difficult to achieve, but verifying that\nall callers consistently use the unsafe variants is somewhat of a chore\ngiven how spread out all of the callers are. In the sha1 and sha1-unsafe\ntest helpers, all of the calls to various hash functions are guarded by\nan \"if (unsafe)\" conditional, which is repetitive and cumbersome.\n\nAddress these issues by introducing a new pattern whereby one\n\'git_hash_algo\' can return a pointer to another \'git_hash_algo\' that\nrepresents the unsafe version of itself. So instead of having something\nlike:\n\nif (unsafe)\nthe_hash_algo->init_fn(...);\nthe_hash_algo->update_fn(...);\nthe_hash_algo->final_fn(...);\nelse\nthe_hash_algo->unsafe_init_fn(...);\nthe_hash_algo->unsafe_update_fn(...);\nthe_hash_algo->unsafe_final_fn(...);\n\nwe can instead write:\n\nstruct git_hash_algo *algop = the_hash_algo;\nif (unsafe)\nalgop = unsafe_hash_algo(algop);\n\nalgop->init_fn(...);\nalgop->update_fn(...);\nalgop->final_fn(...);\n\nThis removes the existing shortcoming by no longer forcing the caller to\n\"remember\" which variant of the hash functions it wants to call, only to\nhold onto a \'struct git_hash_algo\' pointer that is initialized once.\n\nSimilarly, while there currently is still a way to \"mix\" safe and unsafe\nfunctions, this too will go away after subsequent commits remove all\ndirect calls to the unsafe_ variants.\n\nNote that hash_algo_by_ptr() needs an adjustment to allow passing in the\nunsafe variant of a hash function. All other query functions on the\nhash_algos array will continue to return the safe variants of any\nfunction.\n\nSuggested-by: Jeff King <peff@peff.net>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7b24a170d2c36c83c3669d194af46a09ccdeec43" [label="7b24a17" color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 05:05:57 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:51:41 2025 -0800\n\nrefspec: relocate matching related functions\n\nMove the functions `refspec_find_match()`, `refspec_find_all_matches()`\nand `refspec_find_negative_match()` from `remote.c` to `refspec.c`.\nThese functions focus on matching refspecs, so centralizing them in\n`refspec.c` improves code organization by keeping refspec-related logic\nin one place.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7b39a128c814a2362d0533c7df0ab7a2fef6fa4b" [label="7b39a12" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:54 2025 -0800\n\nMerge branch 'ps/the-repository'\n\nMore code paths have a repository passed through the callchain,\ninstead of assuming the primary the_repository object.\n\n* ps/the-repository:\nmatch-trees: stop using `the_repository`\ngraph: stop using `the_repository`\nadd-interactive: stop using `the_repository`\ntmp-objdir: stop using `the_repository`\nresolve-undo: stop using `the_repository`\ncredential: stop using `the_repository`\nmailinfo: stop using `the_repository`\ndiagnose: stop using `the_repository`\nserver-info: stop using `the_repository`\nsend-pack: stop using `the_repository`\nserve: stop using `the_repository`\ntrace: stop using `the_repository`\npager: stop using `the_repository`\nprogress: stop using `the_repository`"]
	"7b5c9e281e2596d40d152c7df309ac90d574df66" [label="7b5c9e2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 17:22:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 17:22:55 2025 -0800\n\nMerge branch 'jk/lsan-race-ignore-false-positive' into next\n\nCI jobs that run threaded programs under LSan has been giving false\npositives from time to time, which has been worked around.\n\nThis is an alternative to the jk/lsan-race-with-barrier topic with\nmuch smaller change to the production code.\n\n* jk/lsan-race-ignore-false-positive:\ntest-lib: ignore leaks in the sanitizer's thread code\ntest-lib: check leak logs for presence of DEDUP_TOKEN\ntest-lib: simplify leak-log checking\ntest-lib: rely on logs to detect leaks\nRevert barrier-based LSan threading race workaround"]
	"7b9397e6b1db991107f91c762642d064adc990e3" [label="7b9397e" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:36 2025 -0800\n\nobject-name: introduce `repo_get_oid_with_flags()`\n\nIntroduce a new function `repo_get_oid_with_flags()`. This function\nbehaves the same as `repo_get_oid()`, except that it takes an extra\n`flags` parameter that it ends up passing to `get_oid_with_context()`.\n\nThis function will be used in a subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7bbd51e504b715034afeea2e0d294224c516fb24" [label="7bbd51e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:38 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:38 2025 -0800\n\nMerge branch 'jp/doc-trailer-config' into next\n\nDocumentaiton updates.\n\n* jp/doc-trailer-config:\nconfig.txt: add trailer.* variables"]
	"7c075d304c5a215465fa1962b95dd8b3ee6520cc" [label="7c075d3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:28 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:28 2025 -0800\n\nRevert \"Merge branch \'ua/some-builtins-wo-the-repository\' into next\"\n\nThis reverts commit b0520af5047038f5c257ad8ba5f74e981aaf07e4, reversing\nchanges made to 50707f29dbb2fce94666d9fcd390d64079dbf547."]
	"7c1d34fe5d1229362f2c3ecf2d493167a1f555a2" [label="7c1d34f" color=gold3 fillcolor=gold3 tooltip="author: Ayush Chandekar <ayu.chandekar@gmail.com>\nSun Feb 02 13:09:26 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:23:15 2025 -0800\n\nt6423: fix suppression of Git’s exit code in tests\n\nSome test in t6423 supress Git's exit code, which can cause test\nfailures go unnoticed. Specifically using git <subcommand> |\n<other-command> masks potential failures of the Git command.\n\nThis commit ensures that Git's exit status is correctly propogated by:\n- Avoiding pipes that suppress exit codes.\n\nSigned-off-by: Ayush Chandekar <ayu.chandekar@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7c2f2919434b0b9d8df79f469903d0bca815557b" [label="7c2f291" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nThu Feb 06 05:20:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 22:00:21 2025 -0800\n\ndifftool: eliminate use of USE_THE_REPOSITORY_VARIABLE\n\nRemove the USE_THE_REPOSITORY_VARIABLE #define now that all\nstate is passed to each function from callers.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7c4c1cbc0b94665d6a94ac7df385459346af5265" [label="7c4c1cb" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:30 2025 -0800\n\nreftable/blocksource: adjust `read_block()` to return `ssize_t`\n\nThe `block_source_read_block()` function and its implementations return\nan integer as a result that reflects either the number of bytes read, or\nan error. As such its return type, a signed integer, isn't wrong, but it\ndoesn't give the reader a good hint what it actually returns.\n\nRefactor the function to return an `ssize_t` instead, which is typical\nfor functions similar to read(3p) and should thus give readers a better\nsignal what they can expect as a result.\n\nAdjust callers to better handle the returned value to avoid warnings\nwith -Wsign-compare. One of these callers is `reader_get_block()`, whose\nreturn value is only ever used by its callers to figure out whether or\nnot the read was successful. So instead of bubbling up the `ssize_t`\nthere, too, we adapt it to only indicate success or errors.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7c67d2a07055150b76e81efa8850221d52705305" [label="7c67d2a" color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nFri Feb 28 22:33:43 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:17:47 2025 -0800\n\ndiff: return diff_filepair from diff queue helpers\n\nThe `diff_addremove()` and `diff_change()` functions set up and queue\ndiffs, but do not return the `diff_filepair` added to the queue. In a\nsubsequent commit, modifications to `diff_filepair` need to occur in\ncertain cases after being queued.\n\nSince the existing `diff_addremove()` and `diff_change()` are also used\nfor callbacks in `diff_options` as types `add_remove_fn_t` and\n`change_fn_t`, modifying the existing function signatures requires\nfurther changes. The diff options for pruning use `file_add_remove()`\nand `file_change()` where file pairs do not even get queued. Thus,\nseparate functions are implemented instead.\n\nSplit out the queuing operations into `diff_queue_addremove()` and\n`diff_queue_change()` which also return a handle to the queued\n`diff_filepair`. Both `diff_addremove()` and `diff_change()` are\nreimplemented as thin wrappers around the new functions.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7c78c599bb9b51e5cbdae3e7dc1d723eefcf7c61" [label="7c78c59" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:04 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:20 2025 -0800\n\nCodingGuidelines: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7d0037b59ae0d22a2718c28d8e70e3ef3f3f991e" [label="7d0037b" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nMon Dec 30 05:28:30 2024 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:18:57 2024 -0800\n\nthread-utils: introduce optional barrier type\n\nOne thread primitive we don\'t yet support is a barrier: it waits for all\nthreads to reach a synchronization point before letting any of them\ncontinue. This would be useful for avoiding the LSan race we see in\nindex-pack (and other places) by having all threads complete their\ninitialization before any of them start to do real work.\n\nPOSIX introduced a pthread_barrier_t in 2004, which does what we want.\nBut if we want to rely on it:\n\n1. Our Windows pthread emulation would need a new set of wrapper\nfunctions. There\'s a Synchronization Barrier primitive there, which\nwas introduced in Windows 8 (which is old enough for us to depend\non).\n\n2. macOS (and possibly other systems) has pthreads but not\npthread_barrier_t. So there we\'d have to implement our own barrier\nbased on the mutex and cond primitives.\n\nThose are do-able, but since we only care about avoiding races in our\nLSan builds, there\'s an easier way: make it a noop on systems without a\nnative pthread barrier.\n\nThis patch introduces a \"maybe_thread_barrier\" API. The clunky name\n(rather than just using pthread_barrier directly) should hopefully clue\npeople in that on some systems it will do nothing. It\'s wired to a\nMakefile knob which has to be triggered manually, and we enable it for\nthe linux-leaks CI jobs (since we know we\'ll have it there).\n\nThere are some other possible options:\n\n- we could turn it on all the time for Linux systems based on uname.\nBut we really only care about it for LSan builds, and there is no\nneed to add extra code to regular builds.\n\n- we could turn it on only for LSan builds. But that would break\nbuilds on non-Linux platforms (like macOS) that otherwise should\nsupport sanitizers.\n\n- we could trigger only on the combination of Linux and LSan together.\nThis isn\'t too hard to do, but the uname check isn\'t completely\naccurate. It is really about what your libc supports, and non-glibc\nsystems might not have it (though at least musl seems to).\n\nSo we\'d risk breaking builds on those systems, which would need to\nadd a new knob. Though the upside would be that running local \"make\nSANITIZE=leak test\" would be protected automatically.\n\nAnd of course none of this protects LSan runs from races on systems\nwithout pthread barriers. It\'s probably OK in practice to protect only\nour CI jobs, though. The race is rare-ish and most leak-checking happens\nthrough CI.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7d4212b8f376ddf1aa403e51b46c92106d079b2d" [label="7d4212b" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Mar 04 12:33:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:01:43 2025 -0800\n\nt/unit-tests: convert urlmatch-normalization test to clar\n\nAdapt urlmatch-normalization test file to use clar testing framework by\nusing clar assertions where necessary.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7d90a272ac4f9a2755d7b4f5807d670e0212e70f" [label="7d90a27" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:01 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:19 2025 -0800\n\ndoc: remove unneeded .gitattributes\n\nThe top-level .gitattributes file contains entries for the Documentation\ntree.  Documentation/.gitattributes has not been touched since it was\nadded in 14f9e128d3 (Define the project whitespace policy, 2008-02-10).\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7d93e5ad978ba1d3fb88d5395bdf32201b3bdd36" [label="7d93e5a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:34 2025 -0800\n\nMerge branch \'ps/send-pack-unhide-error-in-atomic-push\' into next\n\n\"git push --atomic --porcelain\" used to ignore failures from the\nother side, losing the error status from the child process, which\nhas been corrected.\n\n* ps/send-pack-unhide-error-in-atomic-push:\nsend-pack: gracefully close the connection for atomic push\nt5543: atomic push reports exit code failure\nsend-pack: new return code \"ERROR_SEND_PACK_BAD_REF_STATUS\"\nt5548: add porcelain push test cases for dry-run mode\nt5548: add new porcelain test cases\nt5548: refactor test cases by resetting upstream\nt5548: refactor to reuse setup_upstream() function\nt5504: modernize test by moving heredocs into test bodies"]
	"7dc4bdaea8fee93e3653ceed32d2d89d502d67cd" [label="7dc4bda" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:01 2025 -0800\n\nMerge branch 'am/trace2-with-valueless-true' into next\n\nThe trace2 code was not prepared to show a configuration variable\nthat is set to true using the valueless true syntax, which has been\ncorrected.\n\n* am/trace2-with-valueless-true:\ntrace2: prevent segfault on config collection with valueless true"]
	"7e3cb2e515ea2e2bc11d80bdb9a20f0daebc19a2" [label="7e3cb2e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:01 2025 -0800\n\nMerge branch \'en/object-name-with-funny-refname-fix\'\n\nExtended SHA-1 expression parser did not work well when a branch\nwith an unusual name (e.g. \"foo{bar\") is involved.\n\n* en/object-name-with-funny-refname-fix:\nobject-name: be more strict in parsing describe-like output\nobject-name: fix resolution of object names containing curly braces"]
	"7e8431ab257e4492cf65950dd066524370c30347" [label="7e8431a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:56:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:56:15 2025 -0800\n\nMerge branch \'ps/build-meson-fixes\' into next\n\nCI fix.\n\n* ps/build-meson-fixes:\ngitlab-ci: fix \"msvc-meson\" test job succeeding despite test failures"]
	"7e88640cd1801b6fe0288f744da7310b4749c0c8" [label="7e88640" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 17:24:19 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:36:41 2025 -0800\n\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_HASH\n\nThe exact same issue as described in the preceding commit also exists\nfor GIT_DEFAULT_HASH. Thus, reinitializing a repository that e.g. uses\nSHA1 with `GIT_DEFAULT_HASH=sha256 git init` will cause the object\nformat of that repository to change to SHA256. This is of course bogus\nas any existing objects and refs will not be converted, thus causing\nrepository corruption:\n\n$ git init repo\nInitialized empty Git repository in /tmp/repo/.git/\n$ cd repo/\n$ git commit --allow-empty -m message\n[main (root-commit) 35a7344] message\n$ GIT_DEFAULT_HASH=sha256 git init\nReinitialized existing Git repository in /tmp/repo/.git/\n$ git show\nfatal: your current branch appears to be broken\n\nFix the issue by ignoring the environment variable in case the repo has\nalready been initialized with an object hash.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7ee4fd18ace71d187ee3ea5ba745a6a3493e0e0a" [label="7ee4fd1" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Jan 18 18:11:51 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 18:06:20 2025 -0800\n\nref-filter: move is-base tip to used_atom\n\nThe string_list \"is_base_tips\" in struct ref_format stores the\ncommittish part of \"is-base:<committish>\".  It has the same problems\nthat its sibling string_list \"bases\" had.  Fix them the same way as the\nprevious commit did for the latter, by replacing the string_list with\nfields in \"used_atom\".\n\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7f17900b5ba2569d9d07352be51ce90a249a0b46" [label="7f17900" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:22 2025 -0800\n\npath: drop unused `strbuf_git_path()` function\n\nThe `strbuf_git_path()` function isn't used anywhere, and neither should\nit grow any callers because it depends on `the_repository`. Remove it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7f420a6bda9704684ccc924070e8404dac55ffdf" [label="7f420a6" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:53 2025 -0800\n\nclone: cut down on global variables in clone.c\n\nIn clone.c the `struct option` which is used to parse the input options\nfor git-clone(1) is a global variable. Due to this, many variables that\nare used to parse the value into, are also global.\n\nMake `builtin_clone_options` a local variable in cmd_clone() and carry\nalong all variables that are only used in that function.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"7f9870794f743922aff6caa24e1991d5600b1b8a" [label="7f98707" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:33 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:43 2025 -0800\n\ntest-tool: add helper for name-hash values\n\nAdd a new test-tool helper, name-hash, to output the value of the\nname-hash algorithms for the input list of strings, one per line.\n\nSince the name-hash values can be stored in the .bitmap files, it is\nimportant that these hash functions do not change across Git versions.\nAdd a simple test to t5310-pack-bitmaps.sh to provide some testing of\nthe current values. Due to how these functions are implemented, it would\nbe difficult to change them without disturbing these values. The paths\nused for this test are carefully selected to demonstrate some of the\nbehavior differences of the two current name hash versions, including\nwhich conditions will cause them to collide.\n\nCreate a performance test that uses test_size to demonstrate how\ncollisions occur for these hash algorithms. This test helps inform\nsomeone as to the behavior of the name-hash algorithms for their repo\nbased on the paths at HEAD.\n\nMy copy of the Git repository shows modest statistics around the\ncollisions of the default name-hash algorithm:\n\nTest                               this tree\n--------------------------------------------------\n5314.1: paths at head                         4.5K\n5314.2: distinct hash value: v1               4.1K\n5314.3: maximum multiplicity: v1                13\n5314.4: distinct hash value: v2               4.2K\n5314.5: maximum multiplicity: v2                 9\n\nHere, the maximum collision multiplicity is 13, but around 10% of paths\nhave a collision with another path.\n\nIn a more interesting example, the microsoft/fluentui [1] repo had these\nstatistics at time of committing:\n\nTest                               this tree\n--------------------------------------------------\n5314.1: paths at head                        19.5K\n5314.2: distinct hash value: v1               8.2K\n5314.3: maximum multiplicity: v1               279\n5314.4: distinct hash value: v2              17.8K\n5314.5: maximum multiplicity: v2                44\n\n[1] https://github.com/microsoft/fluentui\n\nThat demonstrates that of the nearly twenty thousand path names, they\nare assigned around eight thousand distinct values. 279 paths are\nassigned to a single value, leading the packing algorithm to sort\nobjects from those paths together, by size.\n\nWith the v2 name hash function, the maximum multiplicity lowers to 44,\nleaving some room for further improvement.\n\nIn a more extreme example, an internal monorepo had a much worse\ncollision rate:\n\nTest                               this tree\n--------------------------------------------------\n5314.1: paths at head                       227.3K\n5314.2: distinct hash value: v1              72.3K\n5314.3: maximum multiplicity: v1             14.4K\n5314.4: distinct hash value: v2             166.5K\n5314.5: maximum multiplicity: v2               138\n\nHere, we can see that the v2 name hash function provides somem\nimprovements, but there are still a number of collisions that could lead\nto repacking problems at this scale.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"802a553add113ff0fe93eb3690d88ac97aa91c99" [label="802a553" color=gold3 fillcolor=gold3 tooltip="author: Eric Ju <eric.peijian@gmail.com>\nFri Feb 21 20:04:49 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:11 2025 -0800\n\ncat-file: add remote-object-info to batch-command\n\nSince the `info` command in `cat-file --batch-command` prints object\ninfo for a given object, it is natural to add another command in\n`cat-file --batch-command` to print object info for a given object\nfrom a remote.\n\nAdd `remote-object-info` to `cat-file --batch-command`.\n\nWhile `info` takes object ids one at a time, this creates\noverhead when making requests to a server. So `remote-object-info`\ninstead can take multiple object ids at once.\n\nThe `cat-file --batch-command` command is generally implemented in\nthe following manner:\n\n- Receive and parse input from user\n- Call respective function attached to command\n- Get object info, print object info\n\nIn --buffer mode, this changes to:\n\n- Receive and parse input from user\n- Store respective function attached to command in a queue\n- After flush, loop through commands in queue\n- Call respective function attached to command\n- Get object info, print object info\n\nNotice how the getting and printing of object info is accomplished one\nat a time. As described above, this creates a problem for making\nrequests to a server. Therefore, `remote-object-info` is implemented in\nthe following manner:\n\n- Receive and parse input from user\nIf command is `remote-object-info`:\n- Get object info from remote\n- Loop through and print each object info\nElse:\n- Call respective function attached to command\n- Parse input, get object info, print object info\n\nAnd finally for --buffer mode `remote-object-info`:\n- Receive and parse input from user\n- Store respective function attached to command in a queue\n- After flush, loop through commands in queue:\nIf command is `remote-object-info`:\n- Get object info from remote\n- Loop through and print each object info\nElse:\n- Call respective function attached to command\n- Get object info, print object info\n\nTo summarize, `remote-object-info` gets object info from the remote and\nthen loops through the object info passed in, printing the info.\n\nIn order for `remote-object-info` to avoid remote communication\noverhead in the non-buffer mode, the objects are passed in as such:\n\nremote-object-info <remote> <oid> <oid> ... <oid>\n\nrather than\n\nremote-object-info <remote> <oid>\nremote-object-info <remote> <oid>\n...\nremote-object-info <remote> <oid>\n\nHelped-by: Jonathan Tan <jonathantanmy@google.com>\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Eric Ju  <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"803b5acaa7cb979b5d623270af18d6d8354fce9b" [label="803b5ac" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:33 2025 -0800\n\nMerge branch \'ps/3.0-remote-deprecation\'\n\nFollowing the procedure we established to introduce breaking\nchanges for Git 3.0, allow an early opt-in for removing support of\n$GIT_DIR/branches/ and $GIT_DIR/remotes/ directories to configure\nremotes.\n\n* ps/3.0-remote-deprecation:\nremote: announce removal of \"branches/\" and \"remotes/\"\nbuiltin/pack-redundant: remove subcommand with breaking changes\nci: repurpose \"linux-gcc\" job for deprecations\nci: merge linux-gcc-default into linux-gcc\nMakefile: wire up build option for deprecated features"]
	"8086c4ca6055b80c96a420b717be6b2915f210a1" [label="8086c4c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:31 2025 -0800\n\nMerge branch 'lo/doc-merge-submodule-update' into next\n\nWhat happens to submodules during merge has been documented in a\nbit more detail.\n\n* lo/doc-merge-submodule-update:\nmerge-strategies.adoc: detail submodule merge"]
	"80b09099f88bb73430e785a6ff4272a616a129e3" [label="80b0909" color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: --pickaxe-{all,regex} help: Add --patch-{grep,modifies}\n\nFor less experienced users --patch-{grep,modifies} should be easier to\nunderstand than just -S or -G.  By mentioning the long argument names in\nthe help messages we save those users from having to search the list of\noptions for an explanation of what -S or -G stand for.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"81309f424b095b788449e640be913fd002c572f7" [label="81309f4" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:16 2025 -0800\n\nMerge branch \'jc/show-index-h-update\'\n\nDoc and short-help text for \"show-index\" has been clarified to\nstress that the command reads its data from the standard input.\n\n* jc/show-index-h-update:\nshow-index: the short help should say the command reads from its input"]
	"819fdd6e76d6dbd3410e9614be843cd50f8a6c75" [label="819fdd6" color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nWed Jan 15 21:23:47 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 23:43:36 2025 -0800\n\ndoc: convert git commit config to new format\n\nAlso prevent git-commit manpage to refer to itself in the config\ndescription by using a variable.\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8214e27d275915079ddf7c294c379515e34e8efb" [label="8214e27" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:04 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:45 2024 -0800\n\nmeson: consistenlty spell 'CommonCrypto'\n\nThe 'CommonCrypto' backend can be specified as HTTPS and SHA1 backends,\nbut the value that one needs to use is inconsistent across those two\nbuild options. Unify it to 'CommonCrypto'.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8216cf9419a3a8dfcd65b4caad72c4e6cb9c0513" [label="8216cf9" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:28:24 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:54 2025 -0800\n\nloose_object_info(): BUG() on inflating content with unknown type\n\nAfter unpack_loose_header() returns, it will have inflated not only the\nobject header, but possibly some bytes of the object content. When we\ncall unpack_loose_rest() to extract the actual content, it finds those\nextra bytes by skipping past the header\'s terminating NUL in the buffer.\nLike this:\n\nint bytes = strlen(buffer) + 1;\nn = stream->total_out - bytes;\n...\nmemcpy(buf, (char *) buffer + bytes, n);\n\nThis won\'t work with the OBJECT_INFO_ALLOW_UNKNOWN_TYPE flag, as there\nwe allow a header of arbitrary size. We put into a strbuf, but feed only\nthe final 32-byte chunk we read to unpack_loose_rest(). In that case\nstream->total_out may unexpectedly large, and thus our \"n\" will be\nlarge, causing an out-of-bounds read (we do check it against our\nallocated buffer size, which prevents an out-of-bounds write).\n\nProbably this could be made to work by feeding the strbuf to\nunpack_loose_rest(), along with adjusting some types (e.g., \"bytes\"\nwould need to be a size_t, since it is no longer operating on a 32-byte\nbuffer).\n\nBut I don\'t think it\'s possible to actually trigger this in practice.\nThe only caller who passes ALLOW_UNKNOWN_TYPE is cat-file, which only\nallows it with the \"-t\" and \"-s\" options (neither of which access the\ncontent). There is one way you can _almost_ trigger it: the oid compat\nroutines (i.e., accessing sha1 via sha256 names and vice versa) will\nconvert objects on the fly (which requires access to the content) using\nthe same flags that were passed in. So in theory this:\n\nt=\'some very large type field that causes an extra inflate call\'\nsha1_oid=$(git hash-object -w -t \"$t\" file)\nsha256_oid=$(git rev-parse --output-object-format=sha256 $sha1_oid)\ngit cat-file --allow-unknown-type -s $sha256_oid\n\nwould try to access the content. But it doesn\'t work, because using\ncompat objects requires an entry in the .git/objects/loose-object-idx\nfile, and we don\'t generate such an entry for non-standard types (see\nthe \"compat\" section of write_object_file_literally()).\n\nIf we use \"t=blob\" instead, then it does access the compat object, but\nit doesn\'t trigger the problem (because \"blob\" is a standard short type\nname, and it fits in the initial 32-byte buffer).\n\nSo given that this is almost a memory error bug, I think it\'s worth\naddressing. But because we can\'t actually trigger the situation, I\'m\nhesitant to try a fix that we can\'t run. Instead let\'s document the\nrestriction and protect ourselves from the out-of-bounds read by adding\na BUG() check.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8241ae63d821efc7906d13654cb63523dc4f0a3a" [label="8241ae6" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nThu Feb 06 05:20:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 22:00:21 2025 -0800\n\ndifftool: eliminate use of global variables\n\nMove difftool's global variables into a difftools_option struct\nin preparation for removal of USE_THE_REPOSITORY_VARIABLE.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8244d01de6402606c9fb588ce2143aa629aa7d0e" [label="8244d01" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nSun Jan 19 12:19:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:36:34 2025 -0800\n\npack-write: pass hash_algo to `fixup_pack_header_footer()`\n\nThe `fixup_pack_header_footer()` function uses the global\n`the_hash_algo` variable to access the repository's hash function. To\navoid global variable usage, pass a hash_algo from the layers above.\n\nAltough the layers above could have access to the hash_algo internally,\nsimply pass in `the_hash_algo`. This avoids any compatibility issues and\nbubbles up global variable usage to upper layers which can be eventually\nresolved.\n\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"82522a9e2ce3e2b400a217a21b05204a2034edbc" [label="82522a9" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\n\nMerge branch 'kn/reflog-migration-fix-followup'\n\nCode clean-up.\n\n* kn/reflog-migration-fix-followup:\nreftable: prevent 'update_index' changes after adding records\nrefs: use 'uint64_t' for 'ref_update.index'\nrefs: mark `ref_transaction_update_reflog()` as static"]
	"82deaae3b94d59caf13ea21c980ab386df6dac9e" [label="82deaae" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:43:59 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:18 2025 -0800\n\nt0450: *.txt -> *.adoc fixes\n\nAfter 1f010d6bdf (doc: use .adoc extension for AsciiDoc files,\n2025-01-20), we no longer matched any files in this test.  The result is\nthat we did not test for mismatches in the documentation and --help\noutput.\n\nAdjust the test to look at the renamed *.adoc files.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"831296c55738229a56ac0eb4be6c0cdaafa821d5" [label="831296c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:53:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 19:53:18 2025 -0800\n\nMerge branch 'tz/doc-txt-to-adoc-fixes' into next\n\nFallouts from recent renaming of documentation files from .txt\nsuffix to the new .adoc suffix have been corrected.\n\n* tz/doc-txt-to-adoc-fixes: (38 commits)\nxdiff: *.txt -> *.adoc fixes\nunpack-trees.c: *.txt -> *.adoc fixes\ntransport.h: *.txt -> *.adoc fixes\ntrace2/tr2_sysenv.c: *.txt -> *.adoc fixes\ntrace2.h: *.txt -> *.adoc fixes\nt6434: *.txt -> *.adoc fixes\nt6012: *.txt -> *.adoc fixes\nt/helper/test-rot13-filter.c: *.txt -> *.adoc fixes\nsimple-ipc.h: *.txt -> *.adoc fixes\nsetup.c: *.txt -> *.adoc fixes\nrefs.h: *.txt -> *.adoc fixes\npseudo-merge.h: *.txt -> *.adoc fixes\nparse-options.h: *.txt -> *.adoc fixes\nobject-name.c: *.txt -> *.adoc fixes\nlist-objects-filter-options.h: *.txt -> *.adoc fixes\nfsck.h: *.txt -> *.adoc fixes\ndiffcore.h: *.txt -> *.adoc fixes\ndiff.h: *.txt -> *.adoc fixes\ncontrib/long-running-filter: *.txt -> *.adoc fixes\nconfig.c: *.txt -> *.adoc fixes\n..."]
	"832f56f06a5910b2f41a2e0dd8b382b6c709de07" [label="832f56f" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 18:20:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 19:12:04 2025 -0800\n\ndoc: centrally document various ways tospell `true` and `false`\n\nWe do not seem to centrally document exhaustively ways to spell\nBoolean values.\n\nThe description in the Environment Variables of git(1) section\nassumes that the reader is already familiar with how \"Boolean valued\nconfiguration variables\" are specified, without referring to\nanything, so there is no way for the readers to find out more.\n\nThe description of `bool` in the section on \"--type\n<type>\" in \"git config --help\" might be the place to do so, but it\nis not telling us all that much.\n\nThe description of Boolean valued placeholders in the pretty formats\nsection of \"git log --help\" enumerates the possible values with \"etc.\"\nimplying there may be other synonyms; shrink the list of samples and\ninstead refer to the canonical and authoritative source of truth, which\nnow is git-config(1).\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"83834291fa7c15234c3de59dd8459903b144d00e" [label=8383429 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 19:13:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 19:13:55 2025 -0800\n\nWhat's cooking (2025/01 #07)"]
	"839741ad40b010b4c8ac49a53117562b062e906f" [label="839741a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:31 2025 -0800\n\nMerge branch 'ms/merge-recursive-string-list-micro-optimization' into next\n\nRename processing in the recursive merge backend has seen a micro\noptimization.\n\n* ms/merge-recursive-string-list-micro-optimization:\nmerge-recursive: optimize time complexity for process_renames"]
	"841c3a38a616df29b69e556e431a42bf9dbe23f3" [label="841c3a3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:04 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:04 2025 -0800\n\nMerge branch \'bf/fetch-set-head-config\' into next\n\n\"git fetch\" honors \"remote.<remote>.followRemoteHEAD\" settings to\ntweak the remote-tracking HEAD in \"refs/remotes/<remote>/HEAD\".\n\n* bf/fetch-set-head-config:\nfetch: fix erroneous set_head advice message"]
	"8454b42f947e185a65b2950123493928558f2f5e" [label="8454b42" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 17 10:56:07 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 18:56:38 2025 -0800\n\nmeson: wire up the git-subtree(1) command\n\nWire up the git-subtree(1) command, which is part of \"contrib/\". Note\nthat we have to move around the exact location where we include the\n\"contrib/\" subdirectory so that it comes after building the docs so that\nwe have access to some of the common functionality.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"84a5ce3f03aa409d9b0b22f532a943ddb3e11740" [label="84a5ce3" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:54 2025 -0800\n\nMerge branch 'ac/doc-http-ssl-type-config'\n\nTwo configuration variables about SSL authentication material that\nweren't mentioned in the documentations are now mentioned.\n\n* ac/doc-http-ssl-type-config:\ndocs: indicate http.sslCertType and sslKeyType"]
	"84b5c1a099e6df35f4b54d651b425a894513e62b" [label="84b5c1a" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:33:12 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:25:49 2025 -0800\n\nunpack_loose_rest(): never clean up zstream\n\nThe unpack_loose_rest() function has funny ownership semantics: we pass\nin a z_stream opened by the caller, but then only _sometimes_ close it.\n\nThis oddity has developed over time. When the function was originally\nsplit out in 5180cacc20 (Split up unpack_sha1_file() some more,\n2005-06-02), it always called inflateEnd() to clean up the stream\n(though nowadays it is a git_zstream and we call git_inflate_end()).\n\nBut in 7efbff7531 (unpack_sha1_file(): detect corrupt loose object\nfiles., 2007-03-05) we added error code paths which don\'t close the\nstream. This makes some sense, as we\'d still look at parts of the stream\nstruct to decide which error to show (though I am not sure in practice\nif inflateEnd() even touches those fields).\n\nThis subtlety makes it hard to know when the caller has to clean up the\nstream and when it does not. That led to the leak fixed by aa9ef614dc\n(object-file: fix memory leak when reading corrupted headers,\n2024-08-14).\n\nLet\'s instead always leave the stream intact, forcing the caller to\nclean it up. You might think that would create more work for the\ncallers, but it actually ends up simplifying them, since they can put\nthe call to git_inflate_end() in the common cleanup code path.\n\nTwo things to note, though:\n\n- The check_stream_oid() function is used as a replacement for\nunpack_loose_rest() in read_loose_object() to read blobs. It\ninherited the same funny semantics, and we should fix it here, too\n(to keep the cleanup in read_loose_object() consistent).\n\n- In read_loose_object() we need a second \"out\" label, as we can jump\nto the existing label before opening the stream at all (and since\nthe struct is opaque, there is no way to if it was initialized or\nnot, so we must not call git_inflate_end() in that case).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"84bb5eeace7f797c3898ad6ee6c4909200be0c77" [label="84bb5ee" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:23 2025 -0800\n\nci: switch linux-musl to use Meson\n\nSwitch over the \"linux-musl\" job to use Meson instead of Makefiles. This\nis done due to multiple reasons:\n\n- It simplifies our CI infrastructure a bit as we don\'t have to\nmanually specify a couple of build options anymore.\n\n- It verifies that Meson detects and sets those build options\nautomatically.\n\n- It makes it easier for us to wire up a new CI job using zlib-ng as\nbackend.\n\nOne platform compatibility that Meson cannot easily detect automatically\nis the `GIT_TEST_UTF8_LOCALE` variable used in tests. Wire up a build\noption for it, which we set via a new \"MESONFLAGS\" environment variable.\n\nNote that we also drop the CC variable, which is set to \"gcc\". We\nalready default to GCC when CC is unset in \"ci/lib.sh\", so this is not\nneeded.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"85127bcdeab5ab34f9c738da3fcc88d637f39089" [label="85127bc" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <derrickstolee@github.com>\nMon Feb 03 18:11:07 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:42 2025 -0800\n\nbackfill: assume --sparse when sparse-checkout is enabled\n\nThe previous change introduced the '--[no-]sparse' option for the 'git\nbackfill' command, but did not assume it as enabled by default. However,\nthis is likely the behavior that users will most often want to happen.\nWithout this default, users with a small sparse-checkout may be confused\nwhen 'git backfill' downloads every version of every object in the full\nhistory.\n\nHowever, this is left as a separate change so this decision can be reviewed\nindependently of the value of the '--[no-]sparse' option.\n\nAdd a test of adding the '--sparse' option to a repo without sparse-checkout\nto make it clear that supplying it without a sparse-checkout is an error.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"851ecc4290cbdb57f36f10b77da9c1ae13c10469" [label="851ecc4" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:33 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:10 2024 -0800\n\nDocumentation: inline user-manual.conf\n\nWhen generating our user manual we set up a bit of extra configuration\ncompared to our normal configuration. This is done by having an extra\n\"user-manual.conf\" file that Asciidoc seems to pull in automatically due\nto matching filenames with \"user-manual.txt\". This dependency is quite\nhidden though and thus easy to miss. Furthermore, it seems that Asciidoc\ndoes not know to pull it in for out-of-tree builds where we use relative\npaths.\n\nThe setup in AsciiDoctor is somewhat different: instead of having two\nsets of configuration, we condition the use of manual-specific configs\nbased on whether the document type is \"book\". And as we only build our\nuser manual with that type this is sufficient.\n\nUse the same trick for our user manual by inlining the configuration\ninto \"asciidoc.conf.in\" and making it conditional on whether or not\n\"doctype-book\" is defined.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"85cc9f2d1ee4d65cb1edb00d4f56863185a53e0f" [label="85cc9f2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:22:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 22:22:08 2025 -0800\n\nSync with 'master'"]
	"85cf8801c8839f42a68cef584a522de69a3b02ed" [label="85cf880" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\n\nMerge branch 'sk/unit-test-hash'\n\nTest update.\n\n* sk/unit-test-hash:\nt/unit-tests: convert hash to use clar test framework"]
	"85d8a43baa5b4d93dce18f8c2261cb001571779a" [label="85d8a43" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:46 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:46 2025 -0800\n\nMerge branch \'bc/diff-reject-empty-arg-to-pickaxe\' into next\n\nThe -G/-S options to the \"diff\" family of commands caused us to hit\na BUG() when they get no values; they have been corrected.\n\n* bc/diff-reject-empty-arg-to-pickaxe:\ndiff: don\'t crash with empty argument to -G or -S"]
	"85e342adbdea3adbd70d607c0748c8a036d26c34" [label="85e342a" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\n\nMerge branch 'ms/merge-recursive-string-list-micro-optimization'\n\nRename processing in the recursive merge backend has seen a micro\noptimization.\n\n* ms/merge-recursive-string-list-micro-optimization:\nmerge-recursive: optimize time complexity for process_renames"]
	"85ee0680e2d5d667919e06394ca7622f09652310" [label="85ee068" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:25 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:45 2024 -0800\n\ncommit-reach: use `size_t` to track indices in `get_reachable_subset()`\n\nSimilar as with the preceding commit, adapt `get_reachable_subset()` so\nthat it tracks array indices via `size_t` instead of using signed\nintegers to fix a couple of -Wsign-compare warnings. Adapt callers\naccordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"865b1218246386580c57d3fed915310d1168e86c" [label="865b121" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 19:21:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 19:21:17 2025 -0800\n\nMerge branch 'sk/unit-test-hash' into next\n\nTest update.\n\n* sk/unit-test-hash:\nt/unit-tests: convert hash to use clar test framework"]
	"8668b5f11941223dcb449205930fb141be7bb92a" [label="8668b5f" color=gold3 fillcolor=gold3 tooltip="author: David Mandelberg <david@mandelberg.org>\nWed Mar 05 01:08:25 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 18:06:05 2025 -0800\n\ncompletion: add helper to count path components\n\nA follow-up commit will use this with for-each-ref to strip the right\nnumber of path components from refnames.\n\nSigned-off-by: David Mandelberg <david@mandelberg.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"866ea877036ce581e0d3c130f527631cd8b36bdf" [label="866ea87" color=gold3 fillcolor=gold3 tooltip="author: Matteo Bagnolini <matteobagnolini2003@gmail.com>\nFri Jan 03 14:00:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 19:35:13 2025 -0800\n\nt7110: replace `test -f` with `test_path_is_*` helpers\n\n`test -f` and `! test -f` do not provide clear error messages when they fail.\nTo enhance debuggability, use `test_path_is_file` and `test_path_is_missing`,\nwhich instead provide more informative error messages.\n\nNote that `! test -f` checks if a path is not a file, while\n`test_path_is_missing` verifies that a path does not exist. In this specific\ncase the tests are meant to check the absence of the path, making\n`test_path_is_missing` a valid replacement.\n\nSigned-off-by: Matteo Bagnolini <matteobagnolini2003@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8677dc54d23642379db0014f8fa76565a086b1d5" [label="8677dc5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:31:01 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:31:01 2024 -0800\n\nmergetag object bc2c65770dca70c1d4e151fad971bc7c7235a702\ntype commit\ntag v2.48.0-rc1\ntagger Junio C Hamano <gitster@pobox.com> 1735570730 -0800\n\nGit 2.48-rc1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmdytSoACgkQsLXohpav\n5stfuxAArGK7F0IRRzgA59HXl2YHnPs7qtVMHAJFhErTRKfFf9RoawZS0T9B7QpU\ntktW75Mjk4MjQbdLgqyN7vYa5OnffU9YAZJ1dG3/WaiwVOKZCSA1hswiNKEJTxSH\ns9XFT1qbsG7uFcrgMTmewRLs08DsG7VYcW2RkXFMO5Woh+eRFIemFYV10XyOVOxD\nHu47b3OqXczr6a/rzFW+B25d4YiTJtG5iDSZnO5qOo65iHBQ155J3jL0vbkYIJ7K\njeqYgqcP14Y432Mx2ECp7jn4Z1z/qBWeemT9/vMgnFq5rUmyQd2li/sl6zX99pZK\nxgJPwKr+35dcAnmgE4TC4o0pBZwqeKKSBsLGtruVJgLpmAWnUyYkJ/pfRCdXGVuK\nH4qGNVHHzXC768ONzmh1tv3Dw0snhSyuecViGvQ/zZ8TAm0S4Lj+8CUHJPHB16Xv\nplwOB5Qjmz1RZrOyIISg6LSLyLwaWmiYlFd87DTXOVQnrwGxAFBfAwzRn1YhPe8G\nr7phBLrGiGBtECyytyRzlpIN3PlAmGnXukyyyxD+4ZmB7eig/0q1Kb+K0nkcSTdf\nFsxU4KWU0iE6cgWdn/sxpaYE30UGF1B9QOi2LxtBs9feyIwEIU3RhysZOi11Gjyo\nE+M381llKeRobYB3w2eaQRSGW+pkvA5yhfQRlXlT8UiF7UJ02l0=\n=8m64\n-----END PGP SIGNATURE-----\nSync with Git 2.48-rc1"]
	"869a1edf4470fab379fdead671036d6906112da2" [label="869a1ed" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Feb 25 11:10:42 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:31:22 2025 -0800\n\nt/unit-tests: convert oid-array test to use clar test framework\n\nAdapt oid-array test script to clar framework by using clar assertions\nwhere necessary. Remove descriptions from macros to reduce\nredundancy, and move test input arrays to global scope for reuse across\nmultiple test functions. Introduce `test_oid_array__initialize()` to\nexplicitly initialize the hash algorithm.\n\nThese changes streamline the test suite, making individual tests\nself-contained and reducing redundant code.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8705c9bd139028aae148251420da27c9bf1c4745" [label="8705c9b" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nSun Jan 19 12:19:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:36:35 2025 -0800\n\npack-write: pass hash_algo to internal functions\n\nThe internal functions `write_rev_trailer()`, `write_rev_trailer()`,\n`write_mtimes_header()` and write_mtimes_trailer()` use the global\n`the_hash_algo` variable to access the repository's hash function. Pass\nthe hash_algo down from callers, all of which already have access to the\nvariable.\n\nThis removes all global variables from the 'pack-write.c' file, so\nremove the 'USE_THE_REPOSITORY_VARIABLE' macro.\n\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8765508c349a7c225a96d7c7a8bd2045945e5ff0" [label=8765508 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:48:01 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:48:01 2024 -0800\n\nWhat's cooking (2024/12 #11)"]
	"8776470cf379f31d483d8512d28a0eaa47d2e3f2" [label=8776470 color=gold3 fillcolor=gold3 tooltip="author: D. Ben Knoble <ben.knoble+github@gmail.com>\nMon Jan 06 22:47:06 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 23:21:26 2025 -0800\n\ncompletion: repair config completion for Zsh\n\nCommit 1e0ee4087e (completion: add and use\n__git_compute_first_level_config_vars_for_section, 2024-02-10) uses an\nindirect variable syntax that is only valid for Bash, but the Zsh\ncompletion code relies on the Bash completion code to function. Zsh\nsupports a different indirect variable expansion using ${(P)var}, but in\n`emulate ksh` mode does not support Bash\'s ${!var}.\n\nThis manifests as completing strange config options like\n\"__git_first_level_config_vars_for_section_remote\" as a choice for the\ncommand line\n\ngit config set remote.\n\nUsing Zsh\'s C-x ? _complete_debug widget with the cursor at the end of\nthat command line captures a trace, in which we see (some details\nelided):\n\n+__git_complete_config_variable_name:7> __git_compute_first_level_config_vars_for_section remote\n+__git_compute_first_level_config_vars_for_section:7> local section=remote\n+__git_compute_first_level_config_vars_for_section:7> __git_compute_config_vars\n+__git_compute_config_vars:7> test -n $\'add.ignoreErrors\\nadvice.addEmbeddedRepo\\nadvice.addEmptyPathspec\\nadvice.addIgnoredFile[…]\'\n+__git_compute_first_level_config_vars_for_section:7> local this_section=__git_first_level_config_vars_for_section_remote\n+__git_compute_first_level_config_vars_for_section:7> test -n __git_first_level_config_vars_for_section_remote\n+__git_complete_config_variable_name:7> local this_section=__git_first_level_config_vars_for_section_remote\n+__git_complete_config_variable_name:7> __gitcomp_nl_append __git_first_level_config_vars_for_section_remote remote. \'\' \' \'\n+__gitcomp_nl_append:7> __gitcomp_nl __git_first_level_config_vars_for_section_remote remote. \'\' \' \'\n+__gitcomp_nl:7> emulate -L zsh\n+__gitcomp_nl:7> compset -P \'*[=:]\'\n+__gitcomp_nl:7> compadd -Q -S \' \' -p remote. -- __git_first_level_config_vars_for_section_remote\n\nWe perform the test for __git_compute_config_vars correctly, but the\n${!this_section} references are not expanded as expected.\n\nInstead, portably expand indirect references through the new\n__git_indirect. Contrary to some versions you might find online [1],\nthis version avoids echo non-portabilities [2] [3] and correctly quotes\nthe indirect expansion after eval (so that the result is not split or\nglobbed before being handed to printf).\n\n[1]: https://unix.stackexchange.com/a/41409/301073\n[2]: https://askubuntu.com/questions/715765/mysterious-behavior-of-echo-command#comment1056038_715769\n[3]: https://mywiki.wooledge.org/CatEchoLs\n\nThe following demo program demonstrates how this works:\n\nb=1\nindirect() {\neval printf \'%s\' \"\\\"\\$$1\\\"\"\n}\nf() {\n# Comment this out to see that it works for globals, too. Or, use\n# a value with spaces like \'2 3 4\' to see how it handles those.\nlocal b=2\nlocal a=b\ntest -n \"$(indirect $a)\" && echo nice\n}\nf\n\nWhen placed in a file \"demo\", then both\nbash -x demo\nand\nzsh -xc \'emulate ksh -c \". ./demo\"\' |& tail\nprovide traces showing that \"$(indirect $a)\" produces 2 (or 1, with the\nglobal, or \"2 3 4\" as a single string, etc.).\n\nSigned-off-by: D. Ben Knoble <ben.knoble+github@gmail.com>\nAcked-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"879780f9a15177ed703f56bf347e0a410c22e9d1" [label="879780f" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:53 2025 -0800\n\nclone: refactor wanted_peer_refs()\n\nThe function wanted_peer_refs() is used to map the refs returned by the\nserver to refs we will save in our clone.\n\nOver time this function grown to be very complex. Refactor it.\n\nPreviously, there was a separate code path for when\n`option_single_branch` was set. It resulted in duplicated code and\ndeeper nested conditions. After this refactor the code path for when\n`option_single_branch` is truthy modifies `refs` and then falls through\nto the common code path. This approach relies on the `refspec` being set\ncorrectly and thus only mapping refs that are relevant.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"87e0910fb821d125fc06d25a8309d3c668045f57" [label="87e0910" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:14 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:22 2025 -0800\n\ncontrib/long-running-filter: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"87eccc3a81d133e636150268c24d2220cad70fe5" [label="87eccc3" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nSun Mar 02 17:02:30 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:38:05 2025 -0800\n\nmeson: fix building technical and howto docs\n\nWhen our asciidoc files were renamed from \"*.txt\" to \"*.adoc\" in\n1f010d6bdf7 (doc: use .adoc extension for AsciiDoc files, 2025-01-20)\nthe \"meson.build\" file in \"Documentation\" was updated but the\n\"meson.build\" files in the \"technical\" and \"howto\" subdirectories were\nnot. This causes the meson build to fail when configured with\n-Ddocs=html. Fix this by updating the relevant \"meson.build\" files.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"887758c998c31a7f461c808cb3931318f4e5ea3f" [label="887758c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:45:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:48:16 2025 -0800\n\nBreakingChanges: clarify branches/ and remotes/\n\nAs we have created an empty .git/branches/ hierarchy until fairly\nrecently, these directories may be found in modern repositories, but\nit is highly unlikely that they are being used.\n\nReported-by: Jakub Wilk <jwilk@jwilk.net>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"88955fe5b4b1dc7505854d9ee138915a27e8210d" [label="88955fe" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:34 2025 -0800\n\nMerge branch \'jt/rev-list-missing-print-info\' into next\n\n\"git rev-list --missing=\" learned to accept \"print-info\" that gives\nknown details expected of the missing objects, like path and type.\n\n* jt/rev-list-missing-print-info:\nrev-list: extend print-info to print missing object type\nrev-list: add print-info action to print missing object path"]
	"88d4bff8c376cae3029b7da94a21c4fd4ac0249e" [label="88d4bff" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:49 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:33 2025 -0800\n\nmeson: wire up generation of distribution archive\n\nMeson knows to generate distribution archives via `meson dist`. In\naddition to generating the archive itself, this target also knows to\ncompile and execute tests from that archive, which helps to ensure that\nthe result is an adequate drop-in replacement for the versioned project.\n\nWhile this already works as-is, one omission is that we don\'t propagate\nthe commit that this is built from into the resulting archive. This can\nbe fixed though by adding a distribution script that propagates the\nversion into the \"version\" file, which GIT-VERSION-GEN knows to read if\npresent.\n\nUse GIT-VERSION-GEN to populate that file. As the script is executed in\nthe build directory, not in the directory where we generate the archive,\nwe have to use a shell to resolve the \"MESON_DIST_ROOT\" environment\nvariable.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"88dd321cfedc6ee190dfafe4670a83ea33cdf4a3" [label="88dd321" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:37 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\npath: drop `git_path()` in favor of `repo_git_path()`\n\nRemove `git_path()` in favor of the `repo_git_path()` family of\nfunctions, which makes the implicit dependency on `the_repository` go\naway.\n\nNote that `git_path()` returned a string allocated via `get_pathname()`,\nwhich uses a rotating set of statically allocated buffers. Consequently,\ncallers didn't have to free the returned string. The same isn't true for\n`repo_common_path()`, so we also have to add logic to free the returned\nstrings.\n\nThis refactoring also allows us to remove `repo_common_pathv()` as well\nas `get_pathname()` from the public interface.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"88e08b92e9a55fa453d44b26061a6a67a7eefafc" [label="88e08b9" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:35 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:10 2024 -0800\n\nDocumentation: refactor \"api-index.sh\" for out-of-tree builds\n\nThe \"api-index.sh\" script generates an index of API-related\ndocumentation. The script does not handle out-of-tree builds and thus\ncannot be used easily by Meson.\n\nRefactor it to be independent of locations by both accepting a source\ndirectory where the API docs live as well as a path to an output file.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8922506cb2c34527f8b2321b4f7a4b454a325a07" [label=8922506 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:36 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:11 2024 -0800\n\nDocumentation: refactor \"howto-index.sh\" for out-of-tree builds\n\nThe \"howto-index.sh\" is used to generate an index of our how-to docs. It\nreceives as input the paths to these documents, which would typically be\nrelative to the \"Documentation/\" directory in Makefile-based builds. In\nan out-of-tree build though it will get relative that may be rooted\nsomewhere else entirely.\n\nThe file paths do end up in the generated index, and the expectation is\nthat they should always start with \"howto/\". But for out-of-tree builds\nwe would populate it with the paths relative to the build directory,\nwhich is wrong.\n\nFix the issue by using `$(basename \"$file\")` to generate the path. While\nat it, move the script into \"howto/\" to align it with the location of\nthe comparable \"api-index.sh\" script.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"89ad48db1442b5f60b4d0bd02a5edf2044ef411b" [label="89ad48d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:36 2025 -0800\n\nMerge branch \'ua/os-version-capability\' into next\n\nThe value of \"uname -s\" is by default sent over the wire as a new\ncapability, with an opt-out for privacy-concious folks.\n\n* ua/os-version-capability:\nagent: advertise OS name via agent capability\nt5701: add setup test to remove side-effect dependency\nversion: extend get_uname_info() to hide system details\nversion: refactor get_uname_info()\nversion: refactor redact_non_printables()\nversion: replace manual ASCII checks with isprint() for clarity"]
	"89be7d2774f81f3d8663999975a6ab64d46bf42e" [label="89be7d2" color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nFri Feb 21 11:04:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 18:55:02 2025 -0800\n\nbuiltin/refs: add \'--no-reflog\' flag to drop reflogs\n\nThe \"git refs migrate\" subcommand converts the backend used for ref\nstorage. It always migrates reflog data as well as refs. Introduce an\noption to exclude reflogs from migration, allowing them to be discarded\nwhen they are unnecessary.\n\nThis is particularly useful in server-side repositories, where reflogs\nare typically not expected. However, some repositories may still have\nthem due to historical reasons, such as bugs, misconfigurations, or\nadministrative decisions to enable reflogs for debugging. In such\nrepositories, it would be optimal to drop reflogs during the migration.\n\nTo address this, introduce the \'--no-reflog\' flag, which prevents reflog\nmigration. When this flag is used, reflogs from the original reference\nbackend are migrated. Since only the new reference backend remains in\nthe repository, all previous reflogs are permanently discarded.\n\nHelped-by: Junio C Hamano <gitster@pobox.com>\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"89cd7778c9694b36085f31f195fc598a0130d65d" [label="89cd777" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\n\nMerge branch \'en/object-name-with-funny-refname-fix\' into next\n\nExtended SHA-1 expression parser did not work well when a branch\nwith an unusual name (e.g. \"foo{bar\") is involved.\n\n* en/object-name-with-funny-refname-fix:\nobject-name: be more strict in parsing describe-like output\nobject-name: fix resolution of object names containing curly braces"]
	"89cdbffa8619b0f5e87bacf12dfa400259511b1e" [label="89cdbff" color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Jan 20 02:55:59 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:56:05 2025 -0800\n\ndoc: update gitignore for .adoc extension\n\nWe presently use the \".txt\" extension for our AsciiDoc files.  While not\nwrong, most editors do not associate this extension with AsciiDoc,\nmeaning that contributors don\'t get automatic editor functionality that\ncould be useful, such as syntax highlighting and prose linting.\n\nInstead, in a future commit, we\'re going to move to using the more\ncommon \".adoc\" extension for these files, which many editors\nintrinsically recognize as an AsciiDoc file.  To avoid contributors\naccidentally checking in generated files, ignore the new extension for\ngenerated files in the documentation .gitignore files.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8a867933946ca8ca306ef9bed35f6a7d5a91e909" [label="8a86793" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:00 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:34 2025 -0800\n\npack-bitmap-write: stop depending on `the_repository`\n\nThere are multiple sites in \"pack-bitmap-write.c\" where we use the\nglobal `the_repository` variable, either explicitly or implicitly by\nusing `the_hash_algo`.\n\nRefactor the code so that the `struct bitmap_writer` stores the\nrepository it is getting initialized with. Like this, we can adapt\ncallsites that use `the_repository` to instead use the repository\nprovided by the writer.\n\nRemove the `USE_THE_REPOSITORY_VARIABLE` define.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8a9f3a5cdca8beda7b0ba5c019d652683327a923" [label="8a9f3a5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 20:05:37 2025 -0800\n\nMerge branch 'ek/mingw-rename-symlink' into next\n\nSymlink renaming fix.\n\n* ek/mingw-rename-symlink:\ncompat/mingw: rename the symlink, not the target"]
	"8abf3ad23cb1008aeadaa2e1ed68a2649be74bb0" [label="8abf3ad" color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:48 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:05 2025 -0800\n\nbuiltin/send-pack: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/send-pack.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_send_pack()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8b4b41aefb87c9b3dbdf40bb65686cb37038cb71" [label="8b4b41a" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:05 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:20 2025 -0800\n\nMyFirstContribution: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8b4d916cbf5f85685bcaa75648f6034b008a017a" [label="8b4d916" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:33 2025 -0800\n\nMerge branch \'ps/build-sign-compare\' into next\n\nLast-minute fix for a regression in \"git blame --abbrev=<length>\"\nwhen insane <length> is specified; we used to correctly cap it to\nthe hash output length but broke it during the cycle.\n\n* ps/build-sign-compare:\nbuiltin/blame: fix out-of-bounds write with blank boundary commits\nbuiltin/blame: fix out-of-bounds read with excessive `--abbrev`"]
	"8b702f93dd4d239acd07f9a4991be3297ef333c9" [label="8b702f9" color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 17 13:29:25 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 23:35:12 2025 -0800\n\nt/unit-tests: adapt priority queue test to use clar test framework\n\nConvert the prio-queue test script to clar framework by using clar\nassertions where necessary. Test functions are created as a standalone\nto test different cases.\n\nupdate the type of the variable `j` from int to `size_t`, this ensures\ncompatibility with the type used for result_size, which is also size_t,\npreventing a potential warning or error caused by comparisons between\nsigned and unsigned integers.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8c53354658462aa6783022def86750ab0b79eb6f" [label="8c53354" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:49:07 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:25 2025 -0800\n\ntree-diff: pass whole path string to path_appendnew()\n\nWhen diffing trees, we\'ll have a strbuf \"base\" containing the\nslash-separted names of our parent trees, and a \"path\" string\nrepresenting an entry name from the current tree. We pass these\nseparately to path_appendnew(), which combines them to form a single\npath string in the combine_diff_path struct.\n\nInstead, let\'s append the path string to our base strbuf ourselves, pass\nin the result, and then roll it back with strbuf_setlen(). This lets us\nsimplify path_appendnew() a bit, enabling further refactoring.\n\nAnd while it might seem like this causes extra wasted allocations, it\ndoes not in practice. We reuse the same strbuf for each tree entry, so\nwe only have to allocate it to match the largest name. Plus, in a\nrecursive diff we\'ll end up doing this same operation to extend the base\nfor the next level of recursion. So we\'re really just incurring a small\nmemcpy().\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8ccc75c2452b5814d2445d60d54266293ca48674" [label="8ccc75c" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 12:31:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:08:56 2025 -0800\n\nremote: announce removal of \"branches/\" and \"remotes/\"\n\nBack when Git was in its infancy, remotes were configured via separate\nfiles in \"branches/\" (back in 2005). This mechanism was replaced later\nthat year with the \"remotes/\" directory. Both mechanisms have eventually\nbeen replaced by config-based remotes, and it is very unlikely that\nanybody still uses these directories to configure their remotes.\n\nBoth of these directories have been marked as deprecated, one in 2005\nand the other one in 2011. Follow through with the deprecation and\nfinally announce the removal of these features in Git 3.0.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\n[jc: with a small tweak to the help message]\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8ce506d9ab7ac14a28d365ce150de191da956eb1" [label="8ce506d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:05 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\ngitlab-ci: restrict maximum number of link jobs on Windows\n\nThe hosted Windows runners on GitLab.com only have 7.5GB of RAM. Given\nthat \"link.exe\" provided by Microsoft Visual Studio is multi-threaded by\nitself already and thus quite memory hungry this can quickly lead to\nmemory starvation, out-of-memory situations and thus failed CI jobs.\n\nFix the issue by limiting the number of concurrent linker jobs. The same\nissue hasn\'t been observed on GitHub Actions yet, probably because it\ngot more than twice the amount of RAM with 16GB.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8d24d56ce1da13caff82cfa8950413309e08da13" [label="8d24d56" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Jan 07 08:05:01 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:09:14 2025 -0800\n\ntest-lib: invert return value of check_test_results_san_file_empty\n\nWe have a function to check whether LSan logged any leaks. It returns\nsuccess for no leaks, and non-zero otherwise. This is the simplest thing\nfor its callers, who want to say \"if no leaks then return early\". But\nbecause it\'s implemented as a shell pipeline, you end up with the\nawkward:\n\n! find ... |\nxargs grep leaks |\ngrep -v false-positives\n\nwhere the \"!\" is actually negating the final grep. Switch the return\nvalue (and name) to return success when there are leaks. This should\nmake the code a little easier to read, and the negation in the callers\nstill reads pretty naturally.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8d335468eca3c8b37d7b939f7d7f17b31c514e8f" [label="8d33546" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:22 2025 -0800\n\nMerge branch 'sk/unit-tests'\n\nMove a few more unit tests to the clar test framework.\n\n* sk/unit-tests:\nt/unit-tests: convert reftable tree test to use clar test framework\nt/unit-tests: adapt priority queue test to use clar test framework\nt/unit-tests: convert mem-pool test to use clar test framework\nt/unit-tests: handle dashes in test suite filenames"]
	"8d6240d4c68e2d2aa372a116bdab8bcf3ff6d66b" [label="8d6240d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\n\nMerge branch \'rs/ref-fitler-used-atoms-value-fix\'\n\n\"git branch --sort=...\" and \"git for-each-ref --format=... --sort=...\"\ndid not work as expected with some atoms, which has been corrected.\n\n* rs/ref-fitler-used-atoms-value-fix:\nref-filter: remove ref_format_clear()\nref-filter: move is-base tip to used_atom\nref-filter: move ahead-behind bases into used_atom"]
	"8db127d43f5b0eff254a851f9c966b7b85d91992" [label="8db127d" color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Dec 28 10:47:05 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 17:00:44 2024 -0800\n\nreftable: avoid leaks on realloc error\n\nWhen realloc(3) fails, it returns NULL and keeps the original allocation\nintact.  REFTABLE_ALLOC_GROW overwrites both the original pointer and\nthe allocation count variable in that case, simultaneously leaking the\noriginal allocation and misrepresenting the number of storable items.\n\nparse_names() and reftable_buf_add() avoid leaking by restoring the\noriginal pointer value on failure, but all other callers seem to be OK\nwith losing the old allocation.  Add a new variant of the macro,\nREFTABLE_ALLOC_GROW_OR_NULL, which plugs the leak and zeros the\nallocation counter.  Use it for those callers.\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8ddca35c13898d9698973d48fb71ac6b35f54c9b" [label="8ddca35" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:37:51 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:37:51 2025 +0800\n\nMerge branch 'po-id' of github.com:bagasme/git-po\n\n* 'po-id' of github.com:bagasme/git-po:\nl10n: po-id for 2.48"]
	"8e4710f011dce286d24838fdafd5ce52cfac5285" [label="8e4710f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:23 2025 -0800\n\nworktree: return allocated string from `get_worktree_git_dir()`\n\nThe `get_worktree_git_dir()` function returns a string constant that\ndoes not need to be free\'d by the caller. This string is computed for\nthree different cases:\n\n- If we don\'t have a worktree we return a path into the Git directory.\nThe returned string is owned by `the_repository`, so there is no\nneed for the caller to free it.\n\n- If we have a worktree, but no worktree ID then the caller requests\nthe main worktree. In this case we return a path into the common\ndirectory, which again is owned by `the_repository` and thus does\nnot need to be free\'d.\n\n- In the third case, where we have an actual worktree, we compute the\npath relative to \"$GIT_COMMON_DIR/worktrees/\". This string does not\nneed to be released either, even though `git_common_path()` ends up\nallocating memory. But this doesn\'t result in a memory leak either\nbecause we write into a buffer returned by `get_pathname()`, which\nreturns one out of four static buffers.\n\nWe\'re about to drop `git_common_path()` in favor of `repo_common_path()`,\nwhich doesn\'t use the same mechanism but instead returns an allocated\nstring owned by the caller. While we could adapt `get_worktree_git_dir()`\nto also use `get_pathname()` and print the derived common path into that\nbuffer, the whole schema feels a lot like premature optimization in this\ncontext. There are some callsites where we call `get_worktree_git_dir()`\nin a loop that iterates through all worktrees. But none of these loops\nseem to be even remotely in the hot path, so saving a single allocation\nthere does not feel worth it.\n\nRefactor the function to instead consistently return an allocated path\nso that we can start using `repo_common_path()` in a subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8ea7d41f171fd52d3c920d40fdb390fd969a3270" [label="8ea7d41" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:26 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:26 2025 -0800\n\nt6012: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8ee018d863e521f32a9cb92db66c25e848b5e0d0" [label="8ee018d" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:36 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\nrerere: let `rerere_path()` write paths into a caller-provided buffer\n\nSame as with `get_worktree_git_dir()` a couple of commits ago, the\n`rerere_path()` function returns paths that need not be free'd by the\ncaller because `git_path()` internally uses `get_pathname()`.\n\nRefactor the function to instead accept a caller-provided buffer that\nthe path will be written into, passing on ownership to the caller. This\nrefactoring prepares us for the removal of `git_path()`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8f38331e32f8ce20b45be4edef428dcecf6a768a" [label="8f38331" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:30 2025 -0800\n\nMerge branch 'en/merge-process-renames-crash-fix' into next\n\nThe merge-recursive and merge-ort machinery crashed in corner cases\nwhen certain renames are involved.\n\n* en/merge-process-renames-crash-fix:\nmerge-ort: fix slightly overzealous assertion for rename-to-self\nt6423: add a testcase causing a failed assertion in process_renames"]
	"8f6a2dbe34017e616f8bb35bc668538eb11a8d33" [label="8f6a2db" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:41 2025 -0800\n\nMakefile: skip reftable library for Coccinelle\n\nThe reftable library does not use any of the common helpers that the Git\nproject has. Consequently, most of the rules that we have in Coccinelle\ndo not apply to the library at all and may even generate false positives\nwhen a pattern can be converted to use a Git helper function.\n\nExclude reftable library sources from being checked by Coccinelle to\navoid such false positives.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"8fd74ceeed3d1ed2e0e1e085f8ba944d9f57e816" [label="8fd74ce" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:29 2025 -0800\n\nMerge branch 'tb/new-make-fix' into next\n\nWorkaround the overly picky HT/SP rule in newer GNU Make.\n\n* tb/new-make-fix:\nMakefile: remove accidental recipe prefix in conditional"]
	"900c79808fbd0ccd17e0aaa37c1f93f60af13aa6" [label="900c798" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:40 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:40 2024 -0800\n\nMerge branch \'as/long-option-help-i18n\' into next\n\nTweak the help text used for the option value placeholders by\nparse-options API so that translations can customize the \"<>\"\nplaceholder signal (e.g. \"--option=<value>\").\n\n* as/long-option-help-i18n:\nparse-options: localize mark-up of placeholder text in the short help"]
	"900fdeb843063c1fddbddf9fcaffe3cf334f7195" [label="900fdeb" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:57 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: introduce `libgit_curl` dependency\n\nWe've got a set of common source files that we use for those executables\nthat link against libcurl. The setup is somewhat repetitive though.\nSimplify it by declaring a `libgit_curl` dependency that bundles all of\nit together.\n\nNote that we don't include curl itself as a dependency. This is because\nwe already pull it in transitively via the libgit dependency, which is\nunfortunate because libgit itself shouldn't actually link against curl\nin the first place. This will get fixed in the next commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9100c91cd4c83827b6c3c296e3b2ce89f9e98f52" [label="9100c91" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:07 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:20 2025 -0800\n\nhowto/new-command: update reference to builtin docs\n\nCommit ec14d4ecb5 (builtin.h: take over documentation from\napi-builtin.txt, 2017-08-02) deleted api-builtin.txt and moved the\ncontents into builtin.h.  Most of the references were fixed in\nd85e9448dd (new-command.txt: update reference to builtin docs,\n2023-02-04), but one remained.  Fix it.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9144b9362b2ed972f5886dcc7beee6a2acce2708" [label="9144b93" color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:54 2025 -0800\n\nparse-options: introduce die_for_incompatible_opt2()\n\nThe functions die_for_incompatible_opt3() and\ndie_for_incompatible_opt4() already exist to die whenever a user\nspecifies three or four options respectively that are not compatible.\n\nIntroduce die_for_incompatible_opt2() which dies when two options that\nare incompatible are set.\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9170c03fd7f970d594cbf8510515f6eb855d25a9" [label="9170c03" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:23 2025 -0800\n\ngit-zlib: cast away potential constness of `next_in` pointer\n\nThe `struct git_zstream::next_in` variable points to the input data and\nis used in combination with `struct z_stream::next_in`. While that\nlatter field is not marked as a constant in zlib, it is marked as such\nin zlib-ng. This causes a couple of compiler errors when we try to\nassign these fields to one another due to mismatching constness.\n\nFix the issue by casting away the potential constness of `next_in`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9218c0bfe1baef0a67688b8a0189121d7d834926" [label="9218c0b" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:01 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:46:29 2024 -0800\n\nbulk-checkin: fix segfault with unsafe SHA1 backend\n\nIn 1b9e9be8b4 (csum-file.c: use unsafe SHA-1 implementation when\navailable, 2024-09-26) we have converted our `struct hashfile` to use\nthe unsafe SHA1 backend, which results in a significant speedup. One\nneeds to be careful with how to use that structure now though because\ncallers need to consistently use either the safe or unsafe variants of\nSHA1, as otherwise one can easily trigger corruption.\n\nAs it turns out, we have one inconsistent usage in our tree because we\ndirectly initialize `struct hashfile_checkpoint::ctx` with the safe\nvariant of SHA1, but end up writing to that context with the unsafe\nones. This went unnoticed so far because our CI systems do not exercise\ndifferent hash functions for these two backends, and consequently safe\nand unsafe variants are equivalent. But when using SHA1DC as safe and\nOpenSSL as unsafe backend this leads to a crash an t1050:\n\n++ git -c core.compression=0 add large1\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==1367==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000040 (pc 0x7ffff7a01a99 bp 0x507000000db0 sp 0x7fffffff5690 T0)\n==1367==The signal is caused by a READ memory access.\n==1367==Hint: address points to the zero page.\n#0 0x7ffff7a01a99 in EVP_MD_CTX_copy_ex (/nix/store/h1ydpxkw9qhjdxjpic1pdc2nirggyy6f-openssl-3.3.2/lib/libcrypto.so.3+0x201a99) (BuildId: 41746a580d39075fc85e8c8065b6c07fb34e97d4)\n#1 0x555555ddde56 in openssl_SHA1_Clone ../sha1/openssl.h:40:2\n#2 0x555555dce2fc in git_hash_sha1_clone_unsafe ../object-file.c:123:2\n#3 0x555555c2d5f8 in hashfile_checkpoint ../csum-file.c:211:2\n#4 0x555555b9905d in deflate_blob_to_pack ../bulk-checkin.c:286:4\n#5 0x555555b98ae9 in index_blob_bulk_checkin ../bulk-checkin.c:362:15\n#6 0x555555ddab62 in index_blob_stream ../object-file.c:2756:9\n#7 0x555555dda420 in index_fd ../object-file.c:2778:9\n#8 0x555555ddad76 in index_path ../object-file.c:2796:7\n#9 0x555555e947f3 in add_to_index ../read-cache.c:771:7\n#10 0x555555e954a4 in add_file_to_index ../read-cache.c:804:9\n#11 0x5555558b5c39 in add_files ../builtin/add.c:355:7\n#12 0x5555558b412e in cmd_add ../builtin/add.c:578:18\n#13 0x555555b1f493 in run_builtin ../git.c:480:11\n#14 0x555555b1bfef in handle_builtin ../git.c:740:9\n#15 0x555555b1e6f4 in run_argv ../git.c:807:4\n#16 0x555555b1b87a in cmd_main ../git.c:947:19\n#17 0x5555561649e6 in main ../common-main.c:64:11\n#18 0x7ffff742a1fb in __libc_start_call_main (/nix/store/65h17wjrrlsj2rj540igylrx7fqcd6vq-glibc-2.40-36/lib/libc.so.6+0x2a1fb) (BuildId: bf320110569c8ec2425e9a0c5e4eb7e97f1fb6e4)\n#19 0x7ffff742a2b8 in __libc_start_main@GLIBC_2.2.5 (/nix/store/65h17wjrrlsj2rj540igylrx7fqcd6vq-glibc-2.40-36/lib/libc.so.6+0x2a2b8) (BuildId: bf320110569c8ec2425e9a0c5e4eb7e97f1fb6e4)\n#20 0x555555772c84 in _start (git+0x21ec84)\n\n==1367==Register values:\nrax = 0x0000511000001080  rbx = 0x0000000000000000  rcx = 0x000000000000000c  rdx = 0x0000000000000000\nrdi = 0x0000000000000000  rsi = 0x0000507000000db0  rbp = 0x0000507000000db0  rsp = 0x00007fffffff5690\nr8 = 0x0000000000000000   r9 = 0x0000000000000000  r10 = 0x0000000000000000  r11 = 0x00007ffff7a01a30\nr12 = 0x0000000000000000  r13 = 0x00007fffffff6b38  r14 = 0x00007ffff7ffd000  r15 = 0x00005555563b9910\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/nix/store/h1ydpxkw9qhjdxjpic1pdc2nirggyy6f-openssl-3.3.2/lib/libcrypto.so.3+0x201a99) (BuildId: 41746a580d39075fc85e8c8065b6c07fb34e97d4) in EVP_MD_CTX_copy_ex\n==1367==ABORTING\n./test-lib.sh: line 1023:  1367 Aborted                 git $config add large1\nerror: last command exited with $?=134\nnot ok 4 - add with -c core.compression=0\n\nFix the issue by using the unsafe variant instead.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"92757728872a98f2ef4fe04c3ea50ce39e7a6fb4" [label=9275772 color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: short help: Correct -S description\n\n`-S` shows changes that modify the number of occurrences of the\nspecified string, rather than only those that either completely remove\nit or add it for the first time.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"928ef41dd879a1e12373842e865477e9e1167621" [label="928ef41" color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:30 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:43 2025 -0800\n\nrepack: add --name-hash-version option\n\nThe new '--name-hash-version' option for 'git repack' is a simple\npass-through to the underlying 'git pack-objects' subcommand. However,\nthis subcommand may have other options and a temporary filename as part\nof the subcommand execution that may not be predictable or could change\nover time.\n\nThe existing test_subcommand method requires an exact list of arguments\nfor the subcommand. This is too rigid for our needs here, so create a\nnew method, test_subcommand_flex. Use it to check that the\n--name-hash-version option is passing through.\n\nSince we are modifying the 'git repack' command, let's bring its usage\nin line with the Documentation's synopsis. This removes it from the\nallow list in t0450 so it will remain in sync in the future.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"92f8da8de36decbfcc4e30dc069b2c9ea28e3f6a" [label="92f8da8" color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nWed Mar 05 11:42:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 16:25:11 2025 -0800\n\ndocs: fix repository-layout when building with breaking changes\n\nSince commit 8ccc75c2452 (remote: announce removal of \"branches/\" and\n\"remotes/\", 2025-01-22) enabling WITH_BREAKING_CHANGES when building git\nremoves support for reading branches from \".git/branches\" and remotes\nfrom \".git/remotes\". However those locations are still documented in\ngitrepository-layout.adoc even though the build does not support them.\n\nRectify this by adding a new document attribute \"with-breaking-changes\"\nand use it to make the inclusion of those sections of the documentation\nconditional. Note that the name of the attribute does not match the test\nprerequisite WITHOUT_BREAKING_CHANGES added in c5bc9a7f94a (Makefile:\nwire up build option for deprecated features, 2025-01-22). This is to\navoid the awkward double negative ifndef::without_breaking_changes for\ndocumentation that should be included when WITH_BREAKING_CHANGES is\nenabled. The test prerequisite will be renamed to match the\ndocumentation attribute in a future patch series.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9350423982a851695b8f0fab1fd7aa8fafb10654" [label=9350423 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:37 2025 -0800\n\ngitlab-ci: restrict maximum number of link jobs on Windows\n\nThe hosted Windows runners on GitLab.com only have 7.5GB of RAM. Given\nthat \"link.exe\" provided by Microsoft Visual Studio is multi-threaded by\nitself already and thus quite memory hungry this can quickly lead to\nmemory starvation, out-of-memory situations and thus failed CI jobs.\n\nFix the issue by limiting the number of concurrent linker jobs. The same\nissue hasn\'t been observed on GitHub Actions yet, probably because it\ngot more than twice the amount of RAM with 16GB.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"93a8cfaf3c24f8c1f999b2ca5532ff8f46e0808d" [label="93a8cfa" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:28 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:21 2025 -0800\n\npath: refactor `repo_worktree_path()` family of functions\n\nAs explained in an earlier commit, we\'re refactoring path-related\nfunctions to provide a consistent interface for computing paths into the\ncommondir, gitdir and worktree. Refactor the \"worktree\" family of\nfunctions accordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"93bfad180c86801a6bcf439675654c38f4b0624e" [label="93bfad1" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 20:27:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 20:27:55 2025 -0800\n\nWhat's cooking (2025/02 #02)"]
	"93dc16483a312b77c0b6533a6c2705d1df3e3687" [label="93dc164" color=gold3 fillcolor=gold3 tooltip="author: Bence Ferdinandy <bence@ferdinandy.com>\nSun Jan 26 23:02:11 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 17:16:47 2025 -0800\n\nfetch set_head: fix non-mirror remotes in bare repositories\n\nIn b1b713f722 (fetch set_head: handle mirrored bare repositories,\n2024-11-22) it was implicitly assumed that all remotes will be mirrors\nin a bare repository, thus fetching a non-mirrored remote could lead to\nHEAD pointing to a non-existent reference. Make sure we only overwrite\nHEAD if we are in a bare repository and fetching from a mirror.\nOtherwise, proceed as normally, and create\nrefs/remotes/<nonmirrorremote>/HEAD instead.\n\nReported-by: Christian Hesse <list@eworm.de>\nSigned-off-by: Bence Ferdinandy <bence@ferdinandy.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9432ccae14b2e7d6f02ecab0f3d450d325e940e3" [label="9432cca" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:40 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:56:40 2025 -0800\n\nMerge branch 'tb/fetch-follow-tags-fix' into next\n\n* tb/fetch-follow-tags-fix:\nfetch: fix following tags when fetching specific OID"]
	"949bb8f74f6db7405d6ad8bbf02ebc42a947801d" [label="949bb8f" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:28:18 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 18:56:28 2025 -0800\n\nrun_diff_files(): delay allocation of combine_diff_path\n\nWhile looping over the index entries, when we see a higher level stage\nthe first thing we do is allocate a combine_diff_path struct for it. But\nthis can leak; if check_removed() returns an error, we\'ll continue to\nthe next iteration of the loop without cleaning up.\n\nWe can fix this by just delaying the allocation by a few lines.\n\nI don\'t think this leak is triggered in the test suite, but it\'s pretty\neasy to see by inspection. My ulterior motive here is that the delayed\nallocation means we have all of the data needed to initialize \"dpath\" at\nthe time of malloc, making it easier to factor out a constructor\nfunction.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9520f7d9985d8879bddd157309928fc0679c8e92" [label="9520f7d" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:24:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:45 2025 -0800\n\nThe eighth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9548e0478edaad0ec1e5dc4b7afc7af51dee43b0" [label="9548e04" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:00 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:37 2025 -0800\n\ngithub: convert all Linux jobs to be containerized\n\nWe have split the CI jobs in GitHub Workflows into two categories:\n\n- Those running on a machine pool directly.\n\n- Those running in a container on the machine pool.\n\nThe latter is more flexible because it allows us to freely pick whatever\ncontainer image we want to use for a specific job, while the former only\nallows us to pick from a handful of different distros. The containerized\njobs do not have any significant downsides to the best of my knowledge:\n\n- They aren't significantly slower to start up. A quick comparison by\nPeff shows that the difference is mostly lost in the noise:\n\njob             |  old | new\n--------------------|------|------\nlinux-TEST-vars      11m30s 10m54s\nlinux-asan-ubsan     30m26s 31m14s\nlinux-gcc             9m47s 10m6s\nlinux-gcc-default     9m47s  9m41s\nlinux-leaks          25m50s 25m21s\nlinux-meson          10m36s 10m41s\nlinux-reftable       10m25s 10m23s\nlinux-reftable-leaks 27m18s 27m28s\nlinux-sha256          9m54s 10m31s\n\nSome jobs are a bit faster, some are a bit slower, but there does\nnot seem to be any significant change.\n\n- Containerized jobs run as root, which keeps a couple of tests from\nrunning. This has been addressed in the preceding commit though,\nwhere we now use setpriv(1) to run tests as a separate user.\n\n- GitHub injects a Node binary into containerized jobs, which is\ndynamically linked. This has led to some issues in the past [1], but\nonly for our 32 bit jobs. The issues have since been resolved.\n\nOverall there seem to be no downsides, but the upside is that we have\nmore control over the exact image that these jobs use. Convert the Linux\njobs accordingly.\n\n[1]: https://lore.kernel.org/git/20240912094841.GD589828@coredump.intra.peff.net/\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"956b486cacff05ebbe580eb9d89a1c508c4fa3a3" [label="956b486" color=gold3 fillcolor=gold3 tooltip="author: Peter Krefting <peter@softwolves.pp.se>\nMon Dec 30 12:04:46 2024 +0100\ncommitter: Peter Krefting <peter@softwolves.pp.se>\nMon Dec 30 12:04:46 2024 +0100\n\nl10n: sv.po: Update Swedish translation\n\nSigned-off-by: Peter Krefting <peter@softwolves.pp.se>"]
	"9597182d1d407a71dc51f81a32bc53721a6f9b8d" [label=9597182 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:11 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:11 2025 -0800\n\nMerge branch 'jk/ci-coverity-update' into next\n\nCI update to make Coverity job work again.\n\n* jk/ci-coverity-update:\nci: set CI_JOB_IMAGE for coverity job"]
	"95c09e4d07492fa9e4ad951a268b4ea6bae69038" [label="95c09e4" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 11:46:22 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:11:15 2024 -0800\n\ncommit-reach: fix index used to loop through unsigned integer\n\nIn 62e745ced2 (prio-queue: use size_t rather than int for size,\n2024-12-20), we refactored `struct prio_queue` to track the number of\ncontained entries via a `size_t`. While the refactoring adapted one of\nthe users of that variable, it forgot to also adapt \"commit-reach.c\"\naccordingly. This was missed because that file has -Wsign-conversion\ndisabled.\n\nFix the issue by using a `size_t` to iterate through entries.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"96a862b6f88b0e3033180f76100016a687cf09a6" [label="96a862b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:33 2025 -0800\n\nMerge branch \'ps/repack-keep-unreachable-in-unpacked-repo\' into next\n\n\"git repack --keep-unreachable\" to send unreachable objects to the\nmain pack \"git repack -ad\" produces did not work when there is no\nexisting packs, which has been corrected.\n\n* ps/repack-keep-unreachable-in-unpacked-repo:\nbuiltin/repack: fix `--keep-unreachable` when there are no packs"]
	"96e3d2cfa39bc62cedcdd51644828df679c48590" [label="96e3d2c" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:19 2025 -0800\n\nMerge branch \'ej/cat-file-remote-object-info\' into jch\n\n\"git cat-file --batch\" and friends can optionally ask a remote\nserver about objects it does not have.\n\n* ej/cat-file-remote-object-info:\ncat-file: add remote-object-info to batch-command\ntransport: add client support for object-info\nserve: advertise object-info feature\nfetch-pack: move fetch initialization\nfetch-pack: refactor packet writing\nt1006: split test utility functions into new \"lib-cat-file.sh\"\ncat-file: add declaration of variable i inside its for loop\ngit-compat-util: add strtoul_ul() with error handling"]
	"970916368764347c38d36c727b2e6e0086e784e3" [label=9709163 color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nThu Mar 06 11:26:20 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 17:35:08 2025 -0800\n\ncmake: generalize the handling of the `CLAR_TEST_OBJS` list\n\nA late-comer to the v2.49.0 party, `sk/unit-test-oid`, added yet another\narray item to `CLAR_TEST_OBJS`, causing the `win+VS build` job to fail\nwith symptoms like this one:\n\nunit-tests-lib.lib(u-oid-array.obj) : error LNK2019: unresolved\nexternal symbol cl_parse_any_oid referenced in function fill_array\n\nThis is a similar scenario to the one that forced me to write\n8afda42fce60 (cmake: generalize the handling of the `UNIT_TEST_OBJS`\nlist, 2024-09-18): The hard-coded echo of `CLAR_TEST_OBJS` in\n`CMakeLists.txt` that recapitulates faithfully what was already\nhard-coded in `Makefile` would either have to be updated whack-a-mole\nstyle, or generalized.\n\nJust like I chose the latter option for `UNIT_TEST_OBJS`, I now do the\nsame for `CLAR_TEST_OBJS`.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"970fcdf59db2819f0c1c5269d631f2ede634782f" [label="970fcdf" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:59 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:59 2025 -0800\n\nMerge branch \'ps/3.0-remote-deprecation\' into next\n\nFollowing the procedure we established to introduce breaking\nchanges for Git 3.0, allow an early opt-in for removing support of\n$GIT_DIR/branches/ and $GIT_DIR/remotes/ directories to configure\nremotes.\n\n* ps/3.0-remote-deprecation:\nremote: announce removal of \"branches/\" and \"remotes/\"\nbuiltin/pack-redundant: remove subcommand with breaking changes\nci: repurpose \"linux-gcc\" job for deprecations\nci: merge linux-gcc-default into linux-gcc\nMakefile: wire up build option for deprecated features"]
	"97343c8c2f6e63fd0889b422ab65126448e68619" [label="97343c8" color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Jan 20 02:56:00 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:56:05 2025 -0800\n\neditorconfig: add .adoc extension\n\nThe .adoc extension is commonly used for AsciiDoc files.  In a future\ncommit, we'll update some files to switch from the .txt extension to the\n.adoc extension, so update the EditorConfig file to use the same\nconfiguration for both extensions, since we want the files to be\nformatted completely identically whether they're using the older or\nnewer extension.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"97350e18e2fc2e753e34df4ee8c1107457aa0a91" [label="97350e1" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:09 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:21 2025 -0800\n\ndoc: *.txt -> *.adoc fixes\n\nUpdate a few more instances of Documentation/*.txt files which have been\nrenamed to *.adoc.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"973ca677824b432c480923f150f92fd3bd2d280e" [label="973ca67" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:43 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:39 2025 -0800\n\nrefs/iterator: implement seeking for reftable iterators\n\nImplement seeking of reftable iterators. As the low-level reftable\niterators already support seeking this change is straight-forward. Two\nnotes though:\n\n- We do not support seeking on reflog iterators. It is unclear what\nseeking would even look like in this context, as you typically would\nwant to seek to a specific entry in the reflog for a specific ref.\nThere is currently no use case for this, but if one arises in the\nfuture, we can still implement seeking at that later point.\n\n- We start to check whether `reftable_stack_init_ref_iterator()` is\nsuccessful.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"975fc0471abf12cd3fdf8ce3220d2388aca7f759" [label="975fc04" color=gold3 fillcolor=gold3 tooltip="author: Eliah Kagan <eliah.kagan@gmail.com>\nFri Feb 21 13:01:36 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:24:43 2025 -0800\n\ncompat/mingw: rename the symlink, not the target\n\nSince 183ea3ea (Merge branch \'ps/mingw-rename\', 2024-11-13),\na new technique is used on Windows to rename files, where supported.\nThe first step of this technique is to open the file with\n`CreateFileW`. At that time, `FILE_ATTRIBUTE_NORMAL` was passed as\nthe value of the `dwFlagsAndAttributes` argument. In b30404df [2], this\nwas improved by passing `FILE_FLAG_BACKUP_SEMANTICS`, to support\ndirectories as well as regular files.\n\nHowever, neither value of `dwFlagsAndAttributes` is sufficient to open\na symbolic link with the correct semantics to rename it. Symlinks on\nWindows are reparse points. Attempting to open a reparse point with\n`CreateFileW` dereferences the reparse point and opens the target\ninstead, unless `FILE_FLAG_OPEN_REPARSE_POINT` is included in\n`dwFlagsAndAttributes`. This is documented for that flag and in the\n\"Symbolic Link Behavior\" section of the `CreateFileW` docs [3].\n\nThis produces a regression where attempting to rename a symlink on\nWindows renames its target to the intended new name and location of the\nsymlink. For example, if `symlink` points to `file`, then running\n\ngit mv symlink symlink-renamed\n\nleaves `symlink` in place and unchanged, but renames `file` to\n`symlink-renamed` [4].\n\nThis regression is detectable by existing tests in `t7001-mv.sh`, but\nthe tests must be run by a Windows user with the ability to create\nsymlinks, and the `ln -s` command used to create the initial symlink\nmust also be able to create a real symlink (such as by setting the\n`MSYS` environment variable to `winsymlinks:nativestrict`). Then\nthese two tests fail if the regression is present, and pass otherwise:\n\n38 - git mv should overwrite file with a symlink\n39 - check moved symlink\n\nLet\'s fix this, so that renaming a symlink again renames the symlink\nitself and leaves the target unchanged, by passing\n\nFILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_OPEN_REPARSE_POINT\n\nas the `dwFlagsAndAttributes` argument. This is sufficient (and safe)\nbecause including `FILE_FLAG_OPEN_REPARSE_POINT` causes no harm even\nwhen used to open a file or directory that is not a reparse point. In\nthat case, as noted in [3], this flag is simply ignored.\n\n[1]: https://github.com/git-for-windows/git/commit/183ea3eabf81822506d2cd3aa1dc0727099ebccd\n[2]: https://github.com/git-for-windows/git/commit/b30404dfc04a4b087b630aea4ab88a51cd3a7459\n[3]: https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew\n[4]: https://github.com/git-for-windows/git/issues/5436\n\nSigned-off-by: Eliah Kagan <eliah.kagan@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"97bfea6377783e1560754ab5a12749d1ff161e55" [label="97bfea6" color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:39:11 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:39:11 2025 +0800\n\nMerge branch 'fr_v2.48.0' of github.com:jnavila/git\n\n* 'fr_v2.48.0' of github.com:jnavila/git:\nl10n: fr: v2.48.0\nl10n: fr.po: Minor improvements"]
	"97e76074b304a8b886884172e017eb5cef1e1205" [label="97e7607" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:58 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:58 2025 -0800\n\nMerge branch \'jk/combine-diff-cleanup\' into next\n\nCode clean-up for code paths around combined diff.\n\n* jk/combine-diff-cleanup:\ntree-diff: make list tail-passing more explicit\ntree-diff: simplify emit_path() list management\ntree-diff: use the name \"tail\" to refer to list tail\ntree-diff: drop list-tail argument to diff_tree_paths()\ncombine-diff: drop public declaration of combine_diff_path_size()\ntree-diff: inline path_appendnew()\ntree-diff: pass whole path string to path_appendnew()\ntree-diff: drop path_appendnew() alloc optimization\nrun_diff_files(): de-mystify the size of combine_diff_path struct\ndiff: add a comment about combine_diff_path.parent.path\ncombine-diff: use pointer for parent paths\ntree-diff: clear parent array in path_appendnew()\ncombine-diff: add combine_diff_path_new()\nrun_diff_files(): delay allocation of combine_diff_path"]
	"98046591b96a213e05d17569b1645e772df91b90" [label=9804659 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nSun Jan 19 14:25:53 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:42:56 2025 -0800\n\nindex-pack, unpack-objects: use skip_prefix to avoid magic number\n\nWhen parsing --pack_header=, we manually skip 14 bytes to the data.\nLet's use skip_prefix() to do this automatically.\n\nNote that we overwrite our pointer to the front of the string, so we\nhave to add more context to the error message. We could avoid this by\ndeclaring an extra pointer to hold the value, but I think the modified\nmessage is actually preferable; it should give translators a bit more\ncontext.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"98422943f013b56352dd1a2f8823368b27267e57" [label=9842294 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:14 2025 -0800\n\nMerge branch \'ps/weak-sha1-for-tail-sum-fix\'\n\nAn earlier \"csum-file checksum does not have to be computed with\nsha1dc\" topic had a few code paths that had initialized an\nimplementation of a hash function to be used by an unmatching hash\nby mistake, which have been corrected.\n\n* ps/weak-sha1-for-tail-sum-fix:\nci: exercise unsafe OpenSSL backend\nbuiltin/fast-import: fix segfault with unsafe SHA1 backend\nbulk-checkin: fix segfault with unsafe SHA1 backend"]
	"985345405211cc4cf1ecf4cd330cf0dc1f77fd61" [label=9853454 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 19:17:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 19:17:45 2025 -0800\n\nMaintNotes: 2.48.0 update"]
	"9865ef24578c750625054e2f382b9c764befe870" [label="9865ef2" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:52 2025 -0800\n\nMerge branch 'ac/t6423-unhide-git-exit-status'\n\nTest clean-up.\n\n* ac/t6423-unhide-git-exit-status:\nt6423: fix suppression of Git’s exit code in tests"]
	"98a1a00d53018c7e664644d886466a820aa5e6d7" [label="98a1a00" color=gold3 fillcolor=gold3 tooltip="author: Dmitry Goncharov <dgoncharov@users.sf.net>\nThu Mar 06 16:30:26 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:38:20 2025 -0800\n\nt6423: add a testcase causing a failed assertion in process_renames\n\nIf one side of history renames a directory A/ -> B/, and the other side\nof history adds new files to A/, then directory rename detection notices\nand moves or suggests moving those new files to B/.  A similar thing is\ndone for paths renamed into A/, causing them to be transitively renamed\ninto B/.  But, if the file originally came from B/, then this can end up\ncausing a file to be renamed back to itself.  merge-ort crashes under\nthis special case, due to a slightly overzealous assertion:\n\ngit: merge-ort.c:3051: process_renames: Assertion `source_deleted || oldinfo->filemask & old_sidemask' failed.\nAborted (core dumped)\n\nAdd a testcase demonstrating this.\n\nSigned-off-by: Dmitry Goncharov <dgoncharov@users.sf.net>\n[en: Instead of adding a new testsuite, place it near similar tests in\nt6423, adjusting to match the style of those tests.  Tweak the commit\nmessage to not repeat the entire testcase, but just describe the bug.\nAlso update the line number in the error message.]\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"98bdef76667ca45d9d2a1cf50ef20ae266dd60fb" [label="98bdef7" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:10 2025 -0800\n\nMerge branch 'ps/hash-cleanup' into next\n\nFurther code clean-up on the use of hash functions.  Now the\ncontext object knows what hash function it is working with.\n\n* ps/hash-cleanup:\nglobal: adapt callers to use generic hash context helpers\nhash: provide generic wrappers to update hash contexts\nhash: stop typedeffing the hash context\nhash: convert hashing context to a structure"]
	"98d6370d2e4569f69a6496f984225c74caaa73b8" [label="98d6370" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\n\nMerge branch \'ps/maintenance-reflog-expire\' into jch\n\n\"git maintenance\" learns a new task to expire reflog entries.\n\n* ps/maintenance-reflog-expire:\nbuiltin/maintenance: introduce \"reflog-expire\" task\nbuiltin/gc: split out function to expire reflog entries\nbuiltin/reflog: make functions regarding `reflog_expire_options` public\nbuiltin/reflog: stop storing per-reflog expiry dates globally\nbuiltin/reflog: stop storing default reflog expiry dates globally\nreflog: rename `cmd_reflog_expire_cb` to `reflog_expire_options`"]
	"9929a6791703c96e5f613cc3b52f4f9e16baa49c" [label="9929a67" color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:31:15 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:55 2025 -0800\n\nunpack_loose_rest(): avoid numeric comparison of zlib status\n\nWhen unpacking the actual content of a loose object file, we insist both\nthat the status code we got is Z_STREAM_END, and that we consumed all\nbytes.\n\nIf we didn\'t, we\'ll return an error, but the specific error message we\nproduce depends on which of the two error conditions we saw. So we\'ll\ncheck both a second time to decide which error to produce. But this\nsecond time, our status code check is loose: it checks for a negative\nstatus value.\n\nThis can get confused by zlib codes which are not negative, such as\nZ_NEED_DICT. In this case we\'d erroneously print nothing at all, when we\nshould say \"corrupt loose object\".\n\nInstead, this second check should check explicitly against Z_STREAM_END.\n\nNote that Z_OK is \"0\", so the existing code also produced no message for\nZ_OK. But it\'s impossible to see that status, since we only break out of\nthe inflate loop when we stop seeing Z_OK (so a stream which has more\nbytes than its object header claims would eventually yield Z_BUF_ERROR).\n\nThere\'s no test here, as it would require a loose object whose zlib\nstream returns Z_NEED_DICT in the middle of the object content. I think\nthat is probably possible, but even our Z_NEED_DICT test in t1006 does\nnot trigger this, because we hit that error while reading the header. I\nfound this bug while reviewing all callers of git_inflate() for bugs\nsimilar to the one we saw in unpack_loose_header(). This was the only\nother case that did a numeric comparison rather than explicitly checking\nfor Z_STREAM_END.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"996f0c583b36aa5d6c6308285aea1421eb7efae7" [label="996f0c5" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 17:45:57 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 19:13:58 2024 -0800\n\nHopefully the final batch before 2.48-rc1\n\nLet's wait for git-gui, gitk, and possibly po/ and delay the tagging\nof the -rc1.  Many people are already offline for the end-of-year\nholidays and it is a slow week, and 'master' front has too many new\nthings graduated from 'next' a bit too early for me to feel\ncomfortable.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"998c5f0c7554f511bafff587292f986a42fa2944" [label="998c5f0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:54 2025 -0800\n\nMerge branch 'ms/refspec-cleanup'\n\nCode clean-up.  cf. <Z6G-toOJjMmK8iJG@pks.im>\n\n* ms/refspec-cleanup:\nrefspec: relocate apply_refspecs and related funtions\nrefspec: relocate matching related functions\nremote: rename query_refspecs functions\nrefspec: relocate refname_matches_negative_refspec_item\nremote: rename function omit_name_by_refspec"]
	"9990b581facb3c9d97aacbdf90eb03ed6f1f4d94" [label="9990b58" color=gold3 fillcolor=gold3 tooltip="author: Johannes Sixt <j6t@kdbg.org>\nThu Feb 20 10:53:53 2025 +0100\ncommitter: Johannes Sixt <j6t@kdbg.org>\nThu Feb 20 10:53:53 2025 +0100\n\nMerge branch \'g4w-gitk\' of https://github.com/dscho/gitk\n\n* \'g4w-gitk\' of https://github.com/dscho/gitk:\ngitk: make the \"list references\" default window width wider\ngitk: fix arrow keys in input fields with Tcl/Tk >= 8.6\ngitk: Use an external icon file on Windows\ngitk: Unicode file name support\ngitk(Windows): avoid inadvertently calling executables in the worktree\n\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>"]
	"9a307cd2d656df87bcab0772285a3602af3e9a42" [label="9a307cd" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:51:21 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:51:21 2025 -0800\n\nWhat's cooking (2025/02 #04)"]
	"9a38f5956e725e5374da658eb28724032a71215c" [label="9a38f59" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:13 2025 -0800\n\nMerge branch 'tb/fetch-follow-tags-fix' into jch\n\n* tb/fetch-follow-tags-fix:\nfetch: fix following tags when fetching specific OID"]
	"9a6bfee70ed19e9fbc726930e228a7e17e2a3a76" [label="9a6bfee" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:20 2025 -0800\n\nMerge branch 'tb/incremental-midx-part-2' into jch\n\nIncrementally updating multi-pack index files.\n\n* tb/incremental-midx-part-2:\nmidx: implement writing incremental MIDX bitmaps\npack-bitmap.c: use `ewah_or_iterator` for type bitmap iterators\npack-bitmap.c: keep track of each layer's type bitmaps\newah: implement `struct ewah_or_iterator`\npack-bitmap.c: apply pseudo-merge commits with incremental MIDXs\npack-bitmap.c: compute disk-usage with incremental MIDXs\npack-bitmap.c: teach `rev-list --test-bitmap` about incremental MIDXs\npack-bitmap.c: support bitmap pack-reuse with incremental MIDXs\npack-bitmap.c: teach `show_objects_for_type()` about incremental MIDXs\npack-bitmap.c: teach `bitmap_for_commit()` about incremental MIDXs\npack-bitmap.c: open and store incremental bitmap layers\npack-revindex: prepare for incremental MIDX bitmaps\nDocumentation: describe incremental MIDX bitmaps"]
	"9a84794ad8ad1bc8ec6b2c4e1592a1f63765e753" [label="9a84794" color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nSun Jan 26 00:57:36 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nSun Jan 26 03:38:11 2025 -0800\n\nbundle: avoid closing file descriptor twice\n\nAlready when introduced in c7a8a16239 (Add bundle transport,\n2007-09-10), the `bundle` transport had a bug where it would open a file\ndescriptor to the bundle file and then close it _twice_: First, the file\ndescriptor (`data->fd`) is passed to `unbundle()`, which would use it as\nthe `stdin` of the `index-pack` process, which as a consequence would\nclose it via `start_command()`. However, `data->fd` would still hold the\nnumerical value of the file descriptor, and `close_bundle()` would see\nthat and happily close it again.\n\nThis seems not to have caused too many problems in almost two decades,\nbut I encountered a situation today where it _does_ cause problems: In\ni686 variants of Git for Windows, it seems that file descriptors are\nreused quickly after they have been closed.\n\nIn the particular scenario I faced, `git fetch <bundle> <ref>` gets the\nsame file descriptor value when opening the bundle file and importing\nits embedded packfile (which implicitly closes the file descriptor) and\nthen when opening a pack file in `fetch_and_consume_refs()` while\nlooking up an object\'s header.\n\nLater on, after the bundle has been imported (and the `close_bundle()`\nfunction erroneously closes the file descriptor that has _already_ been\nclosed when using it as `stdin` for `git index-pack`), the same file\ndescriptor value has now been reused via `use_pack()`. Now, when either\nthe recursive fetch (which defaults to \"on\", unfortunately) or a\ncommit-graph update needs to `mmap()` the packfile, it fails due to a\nnow-invalid file descriptor that _should_ point to the pack file but\ndoesn\'t anymore.\n\nTo fix that, let\'s invalidate `data->fd` after calling `unbundle()`.\nThat way, `close_bundle()` does not close a file descriptor that may\nhave been reused for something different. While at it, document that\n`unbundle()` closes the file descriptor, and ensure that it also does\nthat when failing to verify the bundle.\n\nLuckily, this bug does not affect the bundle URI feature, it only\naffects the `git fetch <bundle>` code path.\n\nNote that this patch does not _completely_ clarifies who is responsible\nto close that file descriptor, as `run_command()` may fail _without_\nclosing `cmd->in`. Addressing this issue thoroughly, however, would\nrequire a rather thorough re-design of the `start_command()` and\n`finish_command()` functionality to make it a lot less murky who is\nresponsible for what file descriptors.\n\nAt least this here patch is relatively easy to reason about, and\naddresses a hard failure (`fatal: mmap: could not determine filesize`)\nat the expense of leaking a file descriptor under very rare\ncircumstances in which `git fetch` would error out anyway.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9b07c152dfce52663795fe9b4e1ed5626bfda455" [label="9b07c15" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:36 2025 -0800\n\nMerge branch \'pw/merge-tree-stdin-deadlock-fix\'\n\n\"git merge-tree --stdin\" has been improved (including a workaround\nfor a deadlock).\n\n* pw/merge-tree-stdin-deadlock-fix:\nmerge-tree: fix link formatting in html docs\nmerge-tree: improve docs for --stdin\nmerge-tree: only use basic merge config\nmerge-tree: remove redundant code\nmerge-tree --stdin: flush stdout to avoid deadlock"]
	"9b8f84ebe292b53ceed1cee81e83a9c53b1d8480" [label="9b8f84e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:44 2025 -0800\n\nMerge branch 'mh/gitattr-doc-markup-fix' into next\n\nDoc markup fix.\n\n* mh/gitattr-doc-markup-fix:\ndocs: fix typesetting of merge driver placeholders"]
	"9c273688ad0bb9d484da41aac6502afb8b31341c" [label="9c27368" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:01 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:34 2025 -0800\n\nobject-file-convert: stop depending on `the_repository`\n\nThere are multiple sites in \"object-file-convert.c\" where we use the\nglobal `the_repository` variable, either explicitly or implicitly by\nusing `the_hash_algo`. All of these callsites are transitively called\nfrom `convert_object_file()`, which indeed has no repo as input.\n\nRefactor the function so that it receives a repository as a parameter\nand pass it through to all internal functions to get rid of the\ndependency. Remove the `USE_THE_REPOSITORY_VARIABLE` define.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9d0e81e2ae3bd7f6d8a655be53c2396d7af3d2b0" [label="9d0e81e" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:45 2025 -0800\n\nMerge branch \'ps/zlib-ng\'\n\nThe code paths to interact with zlib has been cleaned up in\npreparation for building with zlib-ng.\n\n* ps/zlib-ng:\nci: make \"linux-musl\" job use zlib-ng\nci: switch linux-musl to use Meson\ncompat/zlib: allow use of zlib-ng as backend\ngit-zlib: cast away potential constness of `next_in` pointer\ncompat/zlib: provide stubs for `deflateSetHeader()`\ncompat/zlib: provide `deflateBound()` shim centrally\ngit-compat-util: move include of \"compat/zlib.h\" into \"git-zlib.h\"\ncompat: introduce new \"zlib.h\" header\ngit-compat-util: drop `z_const` define\ncompat: drop `uncompress2()` compatibility shim"]
	"9d16f8958467be0162441820d56eb7697453e120" [label="9d16f89" color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:15 2025 -0800\n\nxdiff: move sign comparison warning guard into each file\n\nAllow each file to fix the warnings guarded by the macro separately by\nmoving the definition from the shared xinclude.h into each file that\nneeds it.\n\nxmerge.c and xprepare.c do not contain any signed vs. unsigned\ncomparisons so the definition was not included in these files.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9d20f0b55aaaf584c236a64adfd377fbe357007e" [label="9d20f0b" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\n\nMerge branch 'bf/fetch-set-head-fix' into next\n\nFetching into a bare repository incorrectly assumed it always used\na mirror layout when deciding to update remote-tracking HEAD, which\nhas been corrected.\n\n* bf/fetch-set-head-fix:\nfetch set_head: fix non-mirror remotes in bare repositories\nfetch set_head: refactor to use remote directly"]
	"9d8cce051add2eb82cb0be97a58201c1d3fe0c1b" [label="9d8cce0" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:22:59 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\n\nMerge branch \'ua/os-version-capability\'\n\nThe value of \"uname -s\" is by default sent over the wire as a part\nof the \"version\" capability.\n\n* ua/os-version-capability:\nagent: advertise OS name via agent capability\nt5701: add setup test to remove side-effect dependency\nversion: extend get_uname_info() to hide system details\nversion: refactor get_uname_info()\nversion: refactor redact_non_printables()\nversion: replace manual ASCII checks with isprint() for clarity"]
	"9d9fac0f34ec47cc6eafeb3e10378ab8f3310346" [label="9d9fac0" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:36 2025 -0800\n\nreftable/record: stop using `BUG()` in `reftable_record_init()`\n\nWe're aborting the program via `BUG()` in case `reftable_record_init()`\nwas invoked with an unknown record type. This is bad because we may now\ndie in library code, and because it makes us depend on the Git codebase.\n\nRefactor the code such that `reftable_record_init()` can return an error\ncode to the caller. Adapt any callers accordingly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9e0d6f9a5e2b0c6ffff4601b87cef921729ef81b" [label="9e0d6f9" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:58 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:19:58 2025 -0800\n\nMerge branch 'tb/unsafe-hash-cleanup' into next\n\nThe API around choosing to use unsafe variant of SHA-1\nimplementation has been updated in an attempt to make it harder to\nabuse.\n\n* tb/unsafe-hash-cleanup:\nhash.h: drop unsafe_ function variants\ncsum-file: introduce hashfile_checkpoint_init()\nt/helper/test-hash.c: use unsafe_hash_algo()\ncsum-file.c: use unsafe_hash_algo()\nhash.h: introduce `unsafe_hash_algo()`\ncsum-file.c: extract algop from hashfile_checksum_valid()\ncsum-file: store the hash algorithm as a struct field\nt/helper/test-tool: implement sha1-unsafe helper"]
	"9e18a5fe40f7fe926b61f5a8aed03af2643bab99" [label="9e18a5f" color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:04 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: consistently use custom program paths to resolve programs\n\nThe calls to `find_program()` in our documentation don't use our custom\nprogram path. This variable gets populated on Windows with the location\nof Git for Windows so that we can use it to provide our build tools.\nConsequently, we may not be able to find all necessary binaries on\nWindows.\n\nAdapt the calls to use the program path to fix this. While at it, drop\n`required: true` arguments, which are the default anyway.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9e471b69619848d48b5887171b7195ee649b879a" [label="9e471b6" color=gold3 fillcolor=gold3 tooltip="author: Calvin Wan <calvinwan@google.com>\nFri Feb 21 20:04:46 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:11 2025 -0800\n\nfetch-pack: move fetch initialization\n\nThere are some variables initialized at the start of the\ndo_fetch_pack_v2() state machine. Currently, they are initialized\nin FETCH_CHECK_LOCAL, which is the initial state set at the beginning\nof the function.\n\nHowever, a subsequent patch will allow for another initial state,\nwhile still requiring these initialized variables.\nMove the initialization to be before the state machine,\nso that they are set regardless of the initial state.\n\nNote that there is no change in behavior, because we're moving code\nfrom the beginning of the first state to just before the execution of\nthe state machine.\n\nHelped-by: Jonathan Tan <jonathantanmy@google.com>\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Eric Ju  <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9ec6785566993ea05d28010e7a742dc2d8f0daae" [label="9ec6785" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:29:17 2025 -0800\n\nSync with Git 2.48-rc2"]
	"9f04cd7c61d35a9afc81d0625dc914c5221d22ab" [label="9f04cd7" color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:24 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:25 2025 -0800\n\nsimple-ipc.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"9f280bea9878d7c7f5ee18ee5c316468da5072ed" [label="9f280be" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:01 2025 -0800\n\nMerge branch \'jc/3.0-branches-remotes-update\'\n\nRemoval of \".git/branches\" and \".git/remotes\" support in the\nBreakingChanges document has been further clarified.\n\n* jc/3.0-branches-remotes-update:\nBreakingChanges: clarify branches/ and remotes/"]
	"9fad473faed7862855ced123de81a53fa27187d9" [label="9fad473" color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:56:44 2025 -0800\n\nMerge branch \'js/bundle-unbundle-fd-reuse-fix\'\n\nThe code path used when \"git fetch\" fetches from a bundle file\nclosed the same file descriptor twice, which sometimes broke things\nunexpectedly when the file descriptor was reused, which has been\ncorrected.\n\n* js/bundle-unbundle-fd-reuse-fix:\nbundle: avoid closing file descriptor twice"]
	HEAD [label=HEAD color=cornflowerblue fillcolor=cornflowerblue tooltip=master]
	a0bea0978fe80a64e7ccc27d9cafc1725a61e6dc [label=a0bea09 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 10:48:06 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 19:00:33 2025 -0800\n\nrefs: fix migration of reflogs respecting \"core.logAllRefUpdates\"\n\nIn 246cebe320 (refs: add support for migrating reflogs, 2024-12-16) we\nhave added support to git-refs(1) to migrate reflogs between reference\nbackends. It was reported [1] though that not we don\'t migrate reflogs\nfor a subset of references, most importantly \"refs/stash\".\n\nThis issue is caused by us still honoring \"core.logAllRefUpdates\" when\ntrying to migrate reflogs: we do queue the updates, but depending on the\nvalue of that config we may decide to just skip writing the reflog entry\naltogether. And given that:\n\n- The default for \"core.logAllRefUpdates\" is to only create reflogs\nfor branches, remotes, note refs and \"HEAD\"\n\n- \"refs/stash\" is neither of these ref types.\n\nWe end up skipping the reflog creation for that particular reference.\n\nFix the bug by setting `REF_FORCE_CREATE_REFLOG`, which instructs the\nref backends to create the reflog entry regardless of the config or any\npreexisting state.\n\n[1]: <Z5BTQRlsOj1sygun@tapette.crustytoothpaste.net>\n\nReported-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a0fc18f0427fa9e4bd04cae60bee346b6ae78663 [label=a0fc18f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:21:57 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:21:57 2025 -0800\n\nMerge branch 'sc/help-autocorrect-one' into da/help-autocorrect-one-fix\n\n* sc/help-autocorrect-one:\nhelp: interpret boolean string values for help.autocorrect"]
	a16a2ee312b088ae6ac2ab3302ed191d19a71718 [label=a16a2ee color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Feb 25 11:10:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:31:22 2025 -0800\n\nt/unit-tests: implement clar specific oid helper functions\n\n`get_oid_arbitrary_hex()` and `init_hash_algo()` are both required for\noid-related tests to run without errors. In the current implementation,\nboth functions are defined and declared in the\n`t/unit-tests/lib-oid.{c,h}` which is utilized by oid-related tests in\nthe homegrown unit tests structure.\n\nAdapt functions in lib-oid.{c,h} to use clar. Both these functions\nbecome available for oid-related test files implemented using the clar\ntesting framework, which requires them. This will be used by subsequent\ncommits.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a17fd7dd3ada289df8e44e64ff52a5d886dfee95 [label=a17fd7d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\n\nMerge branch 'ps/reftable-sign-compare'\n\nThe reftable/ library code has been made -Wsign-compare clean.\n\n* ps/reftable-sign-compare:\nreftable: address trivial -Wsign-compare warnings\nreftable/blocksource: adjust `read_block()` to return `ssize_t`\nreftable/blocksource: adjust type of the block length\nreftable/block: adjust type of the restart length\nreftable/block: adapt header and footer size to return a `size_t`\nreftable/basics: adjust `hash_size()` to return `uint32_t`\nreftable/basics: adjust `common_prefix_size()` to return `size_t`\nreftable/record: handle overflows when decoding varints\nreftable/record: drop unused `print` function pointer\nmeson: stop disabling -Wsign-compare"]
	a204f92d1cb08f3a0450551b5e6759284bbab12a [label=a204f92 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:20 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:28 2025 -0800\n\nreftable/record: drop unused `print` function pointer\n\nIn 42c424d69d (t/helper: inline printing of reftable records,\n2024-08-22) we stopped using the `print` function of the reftable record\nvtable and instead moved its implementation into the single user of it.\nWe didn't remove the function itself from the vtable though. Drop it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a206058fdaab6274ae7b9bdca274011efba74e11 [label=a206058 color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nThu Jan 30 12:08:30 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:18:12 2025 -0800\n\napply: detect overflow when parsing hunk header\n\n\"git apply\" uses strtoul() to parse the numbers in the hunk header but\nsilently ignores overflows. As LONG_MAX is a legitimate return value for\nstrtoul() we need to set errno to zero before the call to strtoul() and\ncheck that it is still zero afterwards. The error message we display is\nnot particularly helpful as it does not say what was wrong.  However, it\nseems pretty unlikely that users are going to trigger this error in\npractice and we can always improve it later if needed.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a24953f3df4546cad670892c652978cce161ec79 [label=a24953f color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nThu Feb 06 05:20:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 22:00:21 2025 -0800\n\ndifftool: eliminate use of the_repository\n\nMake callers pass a repository struct into each function instead\nof relying on the global the_repository variable.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a265e7f00ac6a30899bcb2b60535824bc4776a7c [label=a265e7f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Jan 18 01:18:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 18 01:18:43 2025 -0800\n\nWhat's cooking (2025/01 #05)"]
	a295b89dcccaaae03aa7396c91c0e45ed9025b6a [label=a295b89 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:21 2025 -0800\n\nMerge branch 'ps/reftable-windows-unlink-fix' into jch\n\nPortability fix.\n\n* ps/reftable-windows-unlink-fix:\nreftable: ignore file-in-use errors when unlink(3p) fails on Windows"]
	a2dcb6999837c762b85735174eb16f941830a2e7 [label=a2dcb69 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:22 2025 -0800\n\ncompat/zlib: provide `deflateBound()` shim centrally\n\nThe `deflateBound()` function has only been introduced with zlib 1.2.0.\nWhen linking against a zlib version older than that we thus provide our\nown compatibility shim. Move this shim into \"compat/zlib.h\" so that we\ncan adapt it based on whether or not we use zlib-ng in a subsequent\ncommit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a2df58fb15aa6319e1f4159d0218814245e48e35 [label=a2df58f color=gold3 fillcolor=gold3 tooltip="author: Vũ Tiến Hưng <newcomerminecraft@gmail.com>\nSat Jan 04 19:54:04 2025 +0700\ncommitter: Vũ Tiến Hưng <newcomerminecraft@gmail.com>\nSat Jan 04 19:58:03 2025 +0700\n\nl10n: vi: Updated translation for 2.48\n\nSigned-off-by: Vũ Tiến Hưng <newcomerminecraft@gmail.com>"]
	a36a822d7d42f36baf0b3d7a0af5691ce692ce20 [label=a36a822 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 16 22:35:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:03 2025 -0800\n\noddballs: send usage() help text to standard output\n\nUsing the show_usage_if_asked() helper we introduced earlier, fix\ncallers of usage() that want to show the help text when explicitly\nasked by the end-user.  The help text now goes to the standard\noutput stream for them.\n\nThe callers in this step are oddballs in that their invocations of\nusage() are *not* guarded by\n\nif (argc == 2 && !strcmp(argv[1], \"-h\")\nusage(...);\n\nThere are (unnecessarily) being clever ones that do things like\n\nif (argc != 2 || !strcmp(argv[1], \"-h\")\nusage(...);\n\nto say \"I know I take only one argument, so argc != 2 is always an\nerror regardless of what is in argv[].  Ah, by the way, even if argc\nis 2, \"-h\" is a request for usage text, so we do the same\".\n\nSome like \"git var -h\" just do not treat \"-h\" any specially, and let\nit take the same error code paths as a parameter error.\n\nNow we cannot do the same, so these callers are rewrittin to do the\nshow_usage_and_exit_if_asked() first and then handle the usage error\nthe way they used to.\n\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a36e024e989f4d35f35987a60e3af8022cac3420 [label=a36e024 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:32 2025 -0800\n\nMerge branch 'js/win-2.49-build-fixes'\n\nHotfix to help building Git-for-Windows.\n\n* js/win-2.49-build-fixes:\ncmake: generalize the handling of the `CLAR_TEST_OBJS` list\nmeson: fix sorting\nident: stop assuming that `gw_gecos` is writable"]
	a3b56f5f431d2421b575f329d401361e3196b467 [label=a3b56f5 color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nWed Feb 12 07:04:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 18:41:17 2025 -0800\n\nxdiff: avoid signed vs. unsigned comparisons in xutils.c\n\nThe comparisons all involve comparisons against unsigned values.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a3f79e9abdbdb27308ac7e3d9e362bcc361cecdc [label=a3f79e9 color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <derrickstolee@github.com>\nMon Feb 03 18:11:03 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:41 2025 -0800\n\nbackfill: add builtin boilerplate\n\nIn anticipation of implementing 'git backfill', populate the necessary files\nwith the boilerplate of a new builtin. Mark the builtin as experimental at\nthis time, allowing breaking changes in the near future, if necessary.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a41e394e21eff277e77d3b14b451271f75caa812 [label=a41e394 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:02:21 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:02:21 2025 -0800\n\nMerge branch 'bf/fetch-set-head-config'\n\nA hotfix on an advice messagge added during this cycle.\n\n* bf/fetch-set-head-config:\nfetch: fix erroneous set_head advice message"]
	a47b8733b3f7db0c0db8cbfbdfc0aa2c197af6ee [label=a47b873 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:52 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:03 2025 -0800\n\ncontrib/credential: fix compiling \"libsecret\" helper\n\nThe \"libsecret\" credential helper does not compile when developer\nwarnings are enabled due to three warnings:\n\n- contrib/credential/libsecret/git-credential-libsecret.c:78:1:\nmissing initializer for field ‘reserved’ of ‘SecretSchema’\n[-Werror=missing-field-initializers]. This issue is fixed by using\ndesignated initializers.\n\n- contrib/credential/libsecret/git-credential-libsecret.c:171:43:\ncomparison of integer expressions of different signedness: ‘int’\nand ‘guint’ {aka ‘unsigned int’} [-Werror=sign-compare]. This\nissue is fixed by using an unsigned variable to iterate through\nthe string vector.\n\n- contrib/credential/libsecret/git-credential-libsecret.c:420:14:\nunused parameter ‘argc’ [-Werror=unused-parameter]. This issue is\nfixed by checking the number of arguments, but in the least\nrestrictive way possible.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a4af0b6288e25eb327ae9018cee09def9e43f1cd [label=a4af0b6 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:53 2025 -0800\n\nMerge branch 'js/libgit-rust'\n\nForeign language interface for Rust into our code base has been added.\n\n* js/libgit-rust:\nlibgit: add higher-level libgit crate\nlibgit-sys: also export some config_set functions\nlibgit-sys: introduce Rust wrapper for libgit.a\ncommon-main: split init and exit code into new files"]
	a4dd839e796f325718154db9ca86a5d7dabadf2c [label=a4dd839 color=gold3 fillcolor=gold3 tooltip="author: Luke Shumaker <lukeshu@datawire.io>\nMon Feb 24 15:27:41 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:25 2025 -0800\n\nfast-export: rename --signed-tags='warn' to 'warn-verbatim'\n\nThe --signed-tags= option takes one of five arguments specifying how to\nhandle signed tags during export.  Among these arguments, 'strip' is to\n'warn-strip' as 'verbatim' is to 'warn' (the unmentioned argument is\n'abort', which stops the fast-export process entirely).  That is,\nsignatures are either stripped or copied verbatim while exporting, with\nor without a warning.\n\nMatch the pattern and rename 'warn' to 'warn-verbatim' to make it clear\nthat it instructs fast-export to copy signatures verbatim.\n\nTo maintain backwards compatibility, 'warn' is still recognized as\ndeprecated synonym of 'warn-verbatim'.\n\nSigned-off-by: Luke Shumaker <lukeshu@datawire.io>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a554262210b4a2ee6fa2d594e1f09f5830888c56 [label=a554262 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:02:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:33 2025 -0800\n\nThe twelfth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a5ae1ce8010b6f3e0f4c7f3b46debc3c84e04787 [label=a5ae1ce color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:43:18 2025 -0800\n\nMerge branch 'ps/reftable-sign-compare' into next\n\nTHe reftable/ library code has been made -Wsign-compare clean.\n\n* ps/reftable-sign-compare:\nreftable: address trivial -Wsign-compare warnings\nreftable/blocksource: adjust `read_block()` to return `ssize_t`\nreftable/blocksource: adjust type of the block length\nreftable/block: adjust type of the restart length\nreftable/block: adapt header and footer size to return a `size_t`\nreftable/basics: adjust `hash_size()` to return `uint32_t`\nreftable/basics: adjust `common_prefix_size()` to return `size_t`\nreftable/record: handle overflows when decoding varints\nreftable/record: drop unused `print` function pointer\nmeson: stop disabling -Wsign-compare"]
	a5c4e31af9b8b8fb362472ce3a1ec404df0da032 [label=a5c4e31 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:51:56 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:26 2025 -0800\n\ntree-diff: drop list-tail argument to diff_tree_paths()\n\nThe internals of the path diffing code, including ll_diff_tree_paths(),\nall take an extra combine_diff_path parameter which they use as the tail\nof a list of results, appending any new entries to it.\n\nThe public-facing diff_tree_paths() takes the same argument, but it just\nmakes the callers more awkward. They always start with a clean list, and\nhave to set up a fake head struct to pass in.\n\nLet's keep the public API clean by always returning a new list. That\nkeeps the fake struct as an implementation detail of tree-diff.c.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a60673e9252b08d4eca90543b3729f4798b9aafd [label=a60673e color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:10:27 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:10:27 2025 -0800\n\nMerge branch 'js/reftable-realloc-errors-fix'\n\nLast-minute fix to a recent update.\n\n* js/reftable-realloc-errors-fix:\nt-reftable-basics: allow for `malloc` to be `#define`d"]
	a620046b29d3a9b8a0337c0396441c26ac84ebe9 [label=a620046 color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Feb 17 18:57:59 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:17:02 2025 -0800\n\ndiff: don't crash with empty argument to -G or -S\n\nThe pickaxe options, -G and -S, need either a regex or a string to look\nthrough the history for.  An empty value isn't very useful since it\nwould either match everything or nothing, and what's worse, we presently\ncrash with a BUG like so when the user provides one:\n\nBUG: diffcore-pickaxe.c:241: should have needle under -G or -S\n\nSince it's not very nice of us to crash and this wouldn't do anything\nuseful anyway, let's simply inform the user that they must provide a\nnon-empty argument and exit with an error if they provide an empty one\ninstead.\n\nReported-by: Jared Van Bortel <cebtenzzre@gmail.com>\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nAcked-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a70beabaf5ff19c87cae865f4f7d7c50eed5324c [label=a70beab color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:37 2025 -0800\n\nMerge branch 'mh/doc-credential-helpers-with-pat' into next\n\nDocument that it is insecure to use Personal Access Tokens, which\nsome hosting providers take as username/password, embedded in URLs.\n\n* mh/doc-credential-helpers-with-pat:\ndocs: discuss caching personal access tokens\ndocs: list popular credential helpers"]
	a7eb054c60a11246e86641152a4b8caf0723ef35 [label=a7eb054 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:46 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:04 2025 -0800\n\nbuiltin/verify-tag: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/verify-tag.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_verify_tag()` function with `repo` set\nto NULL and then early in the function, `parse_options()` call will give\nthe options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a8179952e13af2902d4806d2e2982bcfeb6339eb [label=a817995 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:53 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:34 2025 -0800\n\nci: raise error when Meson generates warnings\n\nMeson prints warnings in several cases, like for example when using a\nfeature supported by the current version of Meson, but not yet supported\nby the minimum required version as declared by the project. These\nwarnings will not cause the setup to fail by default, which makes it\nquite easy to miss them.\n\nImprove this by passing `--fatal-meson-warnings` to `meson setup` so\nthat our CI jobs will fail on warnings.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a8a42585320b0b7487e82f875a5906d9e3ead589 [label=a8a4258 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 18:12:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 18:12:32 2025 -0800\n\nWhat's cooking (2025/03 #01)"]
	a8a5bb1f7813ceb42199ef2bcf9d925da007f047 [label=a8a5bb1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\n\nMerge branch \'bc/diff-reject-empty-arg-to-pickaxe\'\n\nThe -G/-S options to the \"diff\" family of commands caused us to hit\na BUG() when they get no values; they have been corrected.\n\n* bc/diff-reject-empty-arg-to-pickaxe:\ndiff: don\'t crash with empty argument to -G or -S"]
	a8dd3821fe4fcf1524537ef97e4f5e2cf68ce949 [label=a8dd382 color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:39 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:17 2025 -0800\n\ncsum-file: introduce hashfile_checkpoint_init()\n\nIn 106140a99f (builtin/fast-import: fix segfault with unsafe SHA1\nbackend, 2024-12-30) and 9218c0bfe1 (bulk-checkin: fix segfault with\nunsafe SHA1 backend, 2024-12-30), we observed the effects of failing to\ninitialize a hashfile_checkpoint with the same hash function\nimplementation as is used by the hashfile it is used to checkpoint.\n\nWhile both 106140a99f and 9218c0bfe1 work around the immediate crash,\nchanging the hash function implementation within the hashfile API to,\nfor example, the non-unsafe variant would re-introduce the crash. This\nis a result of the tight coupling between initializing hashfiles and\nhashfile_checkpoints.\n\nIntroduce and use a new function which ensures that both parts of a\nhashfile and hashfile_checkpoint pair use the same hash function\nimplementation to avoid such crashes.\n\nA few things worth noting:\n\n- In the change to builtin/fast-import.c::stream_blob(), we can see\nthat by removing the explicit reference to\n'the_hash_algo->unsafe_init_fn()', we are hardened against the\nhashfile API changing away from the_hash_algo (or its unsafe\nvariant) in the future.\n\n- The bulk-checkin code no longer needs to explicitly zero-initialize\nthe hashfile_checkpoint, since it is now done as a result of calling\n'hashfile_checkpoint_init()'.\n\n- Also in the bulk-checkin code, we add an additional call to\nprepare_to_stream() outside of the main loop in order to initialize\n'state->f' so we know which hash function implementation to use when\ncalling 'hashfile_checkpoint_init()'.\n\nThis is OK, since subsequent 'prepare_to_stream()' calls are noops.\nHowever, we only need to call 'prepare_to_stream()' when we have the\nHASH_WRITE_OBJECT bit set in our flags. Without that bit, calling\n'prepare_to_stream()' does not assign 'state->f', so we have nothing\nto initialize.\n\n- Other uses of the 'checkpoint' in 'deflate_blob_to_pack()' are\nappropriately guarded.\n\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a8dda1af6ab400d45b7524bc46b64e04d14fc912 [label=a8dda1a color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:46:49 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:25 2025 -0800\n\ntree-diff: drop path_appendnew() alloc optimization\n\nWhen we\'re diffing trees, we create a list of combine_diff_path structs\nthat represent changed paths. We allocate each struct and add it to the\nlist with path_appendnew(), which we then feed to opt->pathchange().\nThat function tells us whether the path is of interest or not; if not,\nthen we can throw away the struct we allocated.\n\nSo there\'s an optimization to avoid extra allocations: instead of\nthrowing away the new entry, we try to reuse it. If it was large enough\nto store the next path we care about, we can do so. And if not, we fall\nback to freeing and re-allocating a new struct.\n\nThis comes from 72441af7c4 (tree-diff: rework diff_tree() to generate\ndiffs for multiparent cases as well, 2014-04-07), where the goal was to\nhave even the 2-parent diff code use the combine-diff infrastructure,\nbut without taking a performance hit.\n\nThe implementation causes some complexities in the interface (as we\nstore the allocation length inside the \"next\" pointer), and prevents us\nfrom using the regular combine_diff_path_new() constructor. The\ncomplexity is mostly contained inside two functions, but it\'s worth\nre-evaluating how much it\'s helping.\n\nThat commit claims it helps ~1% on generating two-parent diffs in\nlinux.git. Here are the timings I get on the same command today (\"old\"\nis the current tip of master, and \"new\" has this patch applied):\n\nBenchmark 1: ./git.old log --raw --no-abbrev --no-renames v3.10..v3.11\nTime (mean ± σ):     532.9 ms ±   5.8 ms    [User: 472.7 ms, System: 59.6 ms]\nRange (min … max):   525.9 ms … 543.3 ms    10 runs\n\nBenchmark 2: ./git.new log --raw --no-abbrev --no-renames v3.10..v3.11\nTime (mean ± σ):     538.3 ms ±   5.7 ms    [User: 478.0 ms, System: 59.7 ms]\nRange (min … max):   528.5 ms … 545.3 ms    10 runs\n\nSummary\n./git.old log --raw --no-abbrev --no-renames v3.10..v3.11 ran\n1.01 ± 0.02 times faster than ./git.new log --raw --no-abbrev --no-renames v3.10..v3.11\n\nSo we do end up on average 1% faster, but with 2% of noise. I tried to\nfocus more on diff performance by running the commit traversal\nseparately, like:\n\ngit rev-list v3.10..v3.11 >in\n\nand then timing just the diffs:\n\nBenchmark 1: ./git.old diff-tree --stdin -r <in\nTime (mean ± σ):     415.7 ms ±   5.8 ms    [User: 357.7 ms, System: 58.0 ms]\nRange (min … max):   410.9 ms … 430.3 ms    10 runs\n\nBenchmark 2: ./git.new diff-tree --stdin -r <in\nTime (mean ± σ):     418.5 ms ±   2.1 ms    [User: 361.7 ms, System: 56.6 ms]\nRange (min … max):   414.9 ms … 421.3 ms    10 runs\n\nSummary\n./git.old diff-tree --stdin -r <in ran\n1.01 ± 0.02 times faster than ./git.new diff-tree --stdin -r <in\n\nThat gets roughly the same result.\n\nAdding in \"-c\" to do multi-parent diffs doesn\'t change much:\n\nBenchmark 1: ./git.old diff-tree --stdin -r -c <in\nTime (mean ± σ):     525.3 ms ±   6.6 ms    [User: 470.0 ms, System: 55.1 ms]\nRange (min … max):   508.4 ms … 531.0 ms    10 runs\n\nBenchmark 2: ./git.new diff-tree --stdin -r -c <in\nTime (mean ± σ):     532.3 ms ±   6.2 ms    [User: 469.0 ms, System: 63.1 ms]\nRange (min … max):   520.3 ms … 539.4 ms    10 runs\n\nSummary\n./git.old diff-tree --stdin -r -c <in ran\n1.01 ± 0.02 times faster than ./git.new diff-tree --stdin -r -c <in\n\nAnd of course if you add in a lot more work by doing actual\ncontent-level diffs, any difference is lost entirely (here the newer\nversion is actually faster, but that\'s really just noise):\n\nBenchmark 1: ./git.old diff-tree --stdin -r --cc <in\nTime (mean ± σ):     11.571 s ±  0.064 s    [User: 11.287 s, System: 0.283 s]\nRange (min … max):   11.497 s … 11.615 s    3 runs\n\nBenchmark 2: ./git.new diff-tree --stdin -r --cc <in\nTime (mean ± σ):     11.466 s ±  0.109 s    [User: 11.108 s, System: 0.357 s]\nRange (min … max):   11.346 s … 11.560 s    3 runs\n\nSummary\n./git.new diff-tree --stdin -r --cc <in ran\n1.01 ± 0.01 times faster than ./git.old diff-tree --stdin -r --cc <in\n\nSo my conclusion is that it probably does help a little, but it\'s mostly\nlost in the noise. I could see an argument for keeping it, as the\ncomplexity is hidden away in functions that do not often need to be\ntouched. But it does make them more confusing than necessary (despite\nsome detailed explanations from the author of that commit; it just took\nme a while to wrap my head around what was going on) and prevents\nfurther refactoring of the combine_diff_path struct. So let\'s drop it.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a90ff409f0490aef6266f17656fa626154af9715 [label=a90ff40 color=gold3 fillcolor=gold3 tooltip="author: M Hickford <mirth.hickford@gmail.com>\nFri Jan 10 23:54:37 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:10:00 2025 -0800\n\ndocs: discuss caching personal access tokens\n\nDescribe problems storing personal access tokens in git-credential-cache\nand suggest alternatives.\n\nResearch suggests that many users are confused about this:\n\n> the point of passwords is that (ideally) you memorise them [so]\n> they're never stored anywhere in plain text. Yet GitHub's personal\n> access token system seems to basically force you to store the token in\n> plain text?\n\nhttps://stackoverflow.com/questions/46645843/where-to-store-my-git-personal-access-token#comment89963004_46645843\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a967966432f25324c79524c0cb18d6e152d0b6af [label=a967966 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:40 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:35 2025 -0800\n\nreftable/record: stop using `COPY_ARRAY()`\n\nDrop our use of `COPY_ARRAY()`, replacing it with an open-coded variant\nthereof. This is done to reduce our dependency on the Git library.\n\nWhile at it, guard the whole array copy logic so that we only copy it in\ncase there actually is anything to be copied. Otherwise, we may end up\ntrying to allocate a zero-sized array, which will return a NULL pointer\nand thus cause us to return an `REFTABLE_OUT_OF_MEMORY_ERROR`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	a9edfb5dfd882255b7563c5cc341fcbe9a8a3c30 [label=a9edfb5 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:39 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:38 2025 -0800\n\nrefs: stop re-verifying common prefixes for availability\n\nOne of the checks done by `refs_verify_refnames_available()` is whether\nany of the prefixes of a reference already exists. For example, given a\nreference \"refs/heads/main\", we\'d check whether \"refs/heads\" or \"refs\"\nalready exist, and if so we\'d abort the transaction.\n\nWhen updating multiple references at once, this check is performed for\neach of the references individually. Consequently, because references\ntend to have common prefixes like \"refs/heads/\" or refs/tags/\", we\nevaluate the availability of these prefixes repeatedly. Naturally this\nis a waste of compute, as the availability of those prefixes should in\ngeneral not change in the middle of a transaction. And if it would,\nbackends would notice at a later point in time.\n\nOptimize this pattern by storing prefixes in a `strset` so that we can\ntrivially track those prefixes that we have already checked. This leads\nto a significant speedup with the \"reftable\" backend when creating many\nreferences that all share a common prefix:\n\nBenchmark 1: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):      63.1 ms ±   1.8 ms    [User: 41.0 ms, System: 21.6 ms]\nRange (min … max):    60.6 ms …  69.5 ms    38 runs\n\nBenchmark 2: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):      40.0 ms ±   1.3 ms    [User: 29.3 ms, System: 10.3 ms]\nRange (min … max):    38.1 ms …  47.3 ms    61 runs\n\nSummary\nupdate-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD) ran\n1.58 ± 0.07 times faster than update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\n\nFor the \"files\" backend we see an improvement, but a much smaller one:\n\nBenchmark 1: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):     395.8 ms ±   5.3 ms    [User: 63.6 ms, System: 330.5 ms]\nRange (min … max):   387.0 ms … 404.6 ms    10 runs\n\nBenchmark 2: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):     386.0 ms ±   4.0 ms    [User: 51.5 ms, System: 332.8 ms]\nRange (min … max):   380.8 ms … 392.6 ms    10 runs\n\nSummary\nupdate-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD) ran\n1.03 ± 0.02 times faster than update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\n\nThis change also leads to a modest improvement when writing references\nwith \"initial\" semantics, for example when migrating references. The\nfollowing benchmarks are migrating 1m references from the \"reftable\" to\nthe \"files\" backend:\n\nBenchmark 1: migrate reftable:files (refcount = 1000000, revision = HEAD~)\nTime (mean ± σ):     836.6 ms ±   5.6 ms    [User: 645.2 ms, System: 185.2 ms]\nRange (min … max):   829.6 ms … 845.9 ms    10 runs\n\nBenchmark 2: migrate reftable:files (refcount = 1000000, revision = HEAD)\nTime (mean ± σ):     759.8 ms ±   5.1 ms    [User: 574.9 ms, System: 178.9 ms]\nRange (min … max):   753.1 ms … 768.8 ms    10 runs\n\nSummary\nmigrate reftable:files (refcount = 1000000, revision = HEAD) ran\n1.10 ± 0.01 times faster than migrate reftable:files (refcount = 1000000, revision = HEAD~)\n\nAnd vice versa:\n\nBenchmark 1: migrate files:reftable (refcount = 1000000, revision = HEAD~)\nTime (mean ± σ):     870.7 ms ±   5.7 ms    [User: 735.2 ms, System: 127.4 ms]\nRange (min … max):   861.6 ms … 883.2 ms    10 runs\n\nBenchmark 2: migrate files:reftable (refcount = 1000000, revision = HEAD)\nTime (mean ± σ):     799.1 ms ±   8.5 ms    [User: 661.1 ms, System: 130.2 ms]\nRange (min … max):   787.5 ms … 812.6 ms    10 runs\n\nSummary\nmigrate files:reftable (refcount = 1000000, revision = HEAD) ran\n1.09 ± 0.01 times faster than migrate files:reftable (refcount = 1000000, revision = HEAD~)\n\nThe impact here is significantly smaller given that we don\'t perform any\nreference reads with \"initial\" semantics, so the speedup only comes from\nus doing less string list lookups.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	aa0ba82319d0e6a5ccc7a5004dc0a6d3eaabe6b3 [label=aa0ba82 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:03 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:03 2025 -0800\n\nMerge branch \'ps/build-meson-fixes\'\n\nCI fix.\n\n* ps/build-meson-fixes:\ngitlab-ci: fix \"msvc-meson\" test job succeeding despite test failures"]
	aa31820d9da83cecfb028c76327d74694e3fc11f [label=aa31820 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:02 2025 -0800\n\nMerge branch 'sj/meson-doc-technical-dependency-fix'\n\nThe meson build procedure for Documentation/technical/ hierarchy was\nmissing necessary dependencies, which has been corrected.\n\n* sj/meson-doc-technical-dependency-fix:\nmeson: fix missing deps for technical articles"]
	aa8d1657d8976e6f1a6d66f33343f568cdcec0e0 [label=aa8d165 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:17:59 2025 -0800\n\nbuiltin/reflog: stop storing default reflog expiry dates globally\n\nWhen expiring reflog entries, it is possible to configure expiry dates\nthat depend on the name of the reflog. This requires us to store a\ncouple of different expiry dates:\n\n- The default expiry date for reflog entries that aren't otherwise\nspecified.\n\n- The per-reflog expiry date.\n\n- The currently active set of expiry dates for a given reference.\n\nWhile the last item is stored in `struct reflog_expiry_options`, the\nother items aren't, which makes it hard to reuse the structure in other\nplaces.\n\nRefactor the code so that the default expiry date is stored as part of\nthe structure. The per-reflog expiry dates will be adapted accordingly\nin the subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	aa9235f01514a80b262b3aaadc12432c1e503bb2 [label=aa9235f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 21:02:00 2025 -0800\n\nMerge branch 'ja/doc-commit-markup-updates' into next\n\nDoc updates.\n\n* ja/doc-commit-markup-updates:\ndoc: migrate git-commit manpage secondary files to new format\ndoc: convert git commit config to new format\ndoc: make more direct explanations in git commit options\ndoc: the mode param of -u of git commit is optional\ndoc: apply new documentation guidelines to git commit"]
	aae2b431b003e7c55a1e359062c8547e6521098f [label=aae2b43 color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 17 13:29:23 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 23:35:11 2025 -0800\n\nt/unit-tests: handle dashes in test suite filenames\n\n\"generate-clar-decls.sh\" script is designed to extract function\nsignatures that match a specific pattern derived from the unit test\nfile\'s name. The script does not know to massage file names with dashes,\nwhich will make it search for functions that look like, for example,\n`test_mem-pool_*`. Having dashes in function names is not allowed\nthough, so these patterns won\'t ever match a legal function name.\n\nAdapt script to translate dashes (`-`) in test suite filenames to\nunderscores (`_`) to correctly extract the function signatures and run\nthe corresponding tests. This will be used by subsequent commits which\nfollows the same construct.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	aae91a86fb2a71ff89a71b63ccec3a947b26ca51 [label=aae91a8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:08:51 2025 -0800\n\nMerge branch \'ds/name-hash-tweaks\'\n\n\"git pack-objects\" and its wrapper \"git repack\" learned an option\nto use an alternative path-hash function to improve delta-base\nselection to produce a packfile with deeper history than window\nsize.\n\n* ds/name-hash-tweaks:\npack-objects: prevent name hash version change\ntest-tool: add helper for name-hash values\np5313: add size comparison test\npack-objects: add GIT_TEST_NAME_HASH_VERSION\nrepack: add --name-hash-version option\npack-objects: add --name-hash-version option\npack-objects: create new name-hash function version"]
	aaf8f79c679ea058c58a1114d380d99e1ff34156 [label=aaf8f79 color=gold3 fillcolor=gold3 tooltip="author: Philippe Blain <levraiphilippeblain@gmail.com>\nFri Feb 14 18:36:17 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 14 23:09:36 2025 -0800\n\nconfig/remote.txt: reunite 'severOption' description paragraphs\n\nWhen 'remote.<name>.followRemoteHEAD' was added in b7f7d16562 (fetch:\nadd configuration for set_head behaviour, 2024-11-29), its description\nwas added to remote.txt in between the two paragraphs describing\n'remote.<name>.serverOption'. Reunite these two paragraphs.\n\nSigned-off-by: Philippe Blain <levraiphilippeblain@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ab09eddf601501290b5c719574fbe6c02314631f [label=ab09edd color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\n\nMerge branch 'ps/build-meson-fixes-0130'\n\nAssorted fixes and improvements to the build procedure based on\nmeson.\n\n* ps/build-meson-fixes-0130:\ngitlab-ci: restrict maximum number of link jobs on Windows\nmeson: consistently use custom program paths to resolve programs\nmeson: fix overwritten `git` variable\nmeson: prevent finding sed(1) in a loop\nmeson: improve handling of `sane_tool_path` option\nmeson: improve PATH handling\nmeson: drop separate version library\nmeson: stop linking libcurl into all executables\nmeson: introduce `libgit_curl` dependency\nmeson: simplify use of the common-main library\nmeson: inline the static 'git' library\nmeson: fix OpenSSL fallback when not explicitly required\nmeson: fix exec path with enabled runtime prefix"]
	ab142d21e83327d8eb26a482349093f1609556ae [label=ab142d2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:23 2025 -0800\n\nMerge branch 'jc/doc-boolean-synonyms' into next\n\nDoc updates.\n\n* jc/doc-boolean-synonyms:\ndoc: centrally document various ways tospell `true` and `false`"]
	ac1fefbba15ae94724da9af846d1c43a07092dd9 [label=ac1fefb color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:37 2025 -0800\n\nMerge branch 'js/libgit-rust' into next\n\nForeign language interface for Rust into our code base has been added.\n\n* js/libgit-rust:\nlibgit: add higher-level libgit crate\nlibgit-sys: also export some config_set functions\nlibgit-sys: introduce Rust wrapper for libgit.a\ncommon-main: split init and exit code into new files"]
	ac2f26bf17c32214fcb34a33db7ac7b688be9e02 [label=ac2f26b color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\n\nMerge branch 'ua/some-builtins-wo-the-repository' into jch\n\nA handful of built-in command implementations have been rewritten\nto use the repository instance supplied by git.c:run_builtin(), its\ncaller.\n\n* ua/some-builtins-wo-the-repository:\nbuiltin/checkout-index: stop using `the_repository`\nbuiltin/for-each-ref: stop using `the_repository`\nbuiltin/ls-files: stop using `the_repository`\nbuiltin/pack-refs: stop using `the_repository`\nbuiltin/send-pack: stop using `the_repository`\nbuiltin/verify-commit: stop using `the_repository`\nbuiltin/verify-tag: stop using `the_repository`\nconfig: teach repo_config to allow `repo` to be NULL"]
	ac75b4c265952e382dbd67018058a853393d4ecd [label=ac75b4c color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nTue Feb 16 16:42:06 2016 +0100\ncommitter: Johannes Schindelin <johannes.schindelin@gmx.de>\nSat Jan 11 18:17:42 2025 +0100\n\ngitk: fix arrow keys in input fields with Tcl/Tk >= 8.6\n\nTcl/Tk 8.6 introduced new events for the cursor left/right keys and\napparently changed the behavior of the previous event.\n\nLet's work around that by using the new events when we are running with\nTcl/Tk 8.6 or later.\n\nThis fixes https://github.com/git-for-windows/git/issues/495\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>"]
	ac8fe418a61c4ef0e16a7fbab0d768a8ba023e5b [label=ac8fe41 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:36:40 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:36:40 2025 +0800\n\nMerge branch 'tr-l10n' of github.com:bitigchi/git-po\n\n* 'tr-l10n' of github.com:bitigchi/git-po:\nl10n: tr: Update Turkish translations for 2.48"]
	acc4fb302b8c5eecf127b1cd91e2fa1ff477bf87 [label=acc4fb3 color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nFri Jan 31 18:39:38 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:08:46 2025 -0800\n\nci: fix base commit fallback for check-whitespace and check-style\n\nThe check-whitespace and check-style CI scripts require a base commit.\nIn GitLab CI, the base commit can be provided by several different\npredefined CI variables depending on the type of pipeline being\nperformed.\n\nIn 30c4f7e350 (check-whitespace: detect if no base_commit is provided,\n2024-07-23), the GitLab check-whitespace CI job was modified to support\nCI_MERGE_REQUEST_DIFF_BASE_SHA as a fallback base commit if\nCI_MERGE_REQUEST_TARGET_BRANCH_SHA was not provided. The same fallback\nstrategy was also implemented for the GitLab check-style CI job in\nbce7e52d4e (ci: run style check on GitHub and GitLab, 2024-07-23).\n\nThe base commit fallback is implemented using shell parameter expansion\nwhere, if the first variable is unset, the second variable is used as\nfallback. In GitLab CI, these variables can be set but null. This has\nthe unintended effect of selecting an empty first variable which results\nin CI jobs providing an invalid base commit and failing.\n\nFix the issue by defaulting to the fallback variable if the first is\nunset or null.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ae0b33939d233fa340f1ebb768588dc46a128e4c [label=ae0b339 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:34 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:10 2024 -0800\n\nmeson: generate user manual\n\nOur documentation contains a user manual that gives people a short\nintroduction to Git. Our Makefile knows to generate the manual into\nthree different formats: an HTML page, a PDF and an info page. The Meson\nbuild instructions don't yet generate any of these.\n\nWhile wiring up all these formats I hit a couple of road blocks with how\nwe generate our info pages. Even though I eventually resolved these, it\nmade me question whether anybody actually uses info pages in the first\nplace. Checking through a couple of downstream consumers I couldn't find\na single user of either the info pages nor of our PDF manual in Arch\nLinux, Debian, Fedora, Ubuntu, FreeBSD or OpenBSDFedora. So it's rather\nsafe to assume that there aren't really any users out there, and thus\nthe added complexity does not seem worth it.\n\nWire up support for building the user manual in HTML format and\nconciously skip over the other two formats. This is basically a form of\nsilent deprecation: if people out there use the other two formats they\nwill eventually complain about them missing in Meson, which means we can\nwire them up at a later point. If they don't we can phase out these\nformats eventually.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ae4b89d849ef425bee1157421f2c44071bb9b5c5 [label=ae4b89d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:41:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:41:37 2025 -0800\n\nSync with 'master'"]
	ae6336b6173bf5303fad53e0a52a16f92c47b6b7 [label=ae6336b color=gold3 fillcolor=gold3 tooltip="author: Johannes Sixt <j6t@kdbg.org>\nSun Jan 05 10:44:17 2025 +0100\ncommitter: Johannes Sixt <j6t@kdbg.org>\nSun Jan 05 10:44:35 2025 +0100\n\nMerge branch 'as/translations-bg'\n\n* as/translations-bg:\ngit-gui i18n: Updated Bulgarian translation (579t)\n\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>"]
	ae8f9ce9a0f0a385386661ae2d4595c92a50d21c [label=ae8f9ce color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:41 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:42 2025 -0800\n\nMerge branch \'kn/reflog-migration-fix\' into next\n\n\"git refs migrate\" for migrating reflog data was broken.\n\n* kn/reflog-migration-fix:\nreftable: write correct max_update_index to header"]
	aea7c185beedb0be3437d9de9f7c894b0da6c547 [label=aea7c18 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Feb 27 14:39:22 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 19:42:31 2025 -0800\n\ngitlab-ci: fix \"msvc-meson\" test job succeeding despite test failures\n\nWe have recently noticed that the \"msvc-meson\" test job in GitLab CI\nsucceeds even if there are failures. This is somewhat puzzling because\nwe use exactly the same command as we do on GitHub Actions, and there\nthe jobs fail as exected.\n\nAs it turns out, this is another weirdness of the GitLab CI hosted\nrunner for Windows [1]: by default, even successful commands will not\nmake the job fail. Interestingly though, this depends on what exactly\nthe command is that you\'re running -- the MinGW-based job for example\nworks alright and does fail as expected.\n\nThe root cause here seems to be specific behaviour of PowerShell. The\ninvocation of `ForEach-Object` does not bubble up any errors in case the\ninvocation of `meson test` fails, and thus we don\'t notice the error.\nThis is specific to executing the command in a loop: other build steps\nwhere we execute commands directly fail as expected.\n\nThis is because the specific version of PowerShell that we use in the\nrunner does not know about `PSNativeCommandUseErrorActionPreference`\nyet, which controls whether native commands like \"meson.exe\" honor the\n`ErrorActionPreference` variable. The preference has been introduced\nwith PowerShell 7.3 and is default-enabled since PowerShell 7.4, but\nGitLab\'s hosted runners still seem to use PowerShell 5.1. Consequently,\nwhen tests fail, we won\'t bubble up the error at all from the loop and\nthus the job doesn\'t fail. This isn\'t an issue in other cases though\nwhere we execute native commands directly, as the GitLab runner knows to\ncheck the last error code after every command.\n\nThe same thing doesn\'t seem to be an issue on GitHub Actions, most\nlikely because it uses PowerShell 7.4. Curiously, the preference for\n`PSNativeCommandUseErrorActionPreference` is disabled there, but the\njobs fail as expected regardless of that. It\'s puzzling, but I do not\nhave enough PowerShell expertise to give a definitive answer as to why\nit works there.\n\nIn any case, Meson 1.8 will likely get support for slicing tests [1], so\nwe can eventually get rid of the whole PowerShell script. For now, work\naround the issue by explicitly exiting out of the loop with a non-zero\nerror code if we see that Meson has failed.\n\n[1]: https://github.com/mesonbuild/meson/pull/14092\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	aeaabab9cff9f0b7be4f652791dd8110cc2fe5d9 [label=aeaabab color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:45 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:40 2025 -0800\n\nrefs/iterator: implement seeking for packed-ref iterators\n\nImplement seeking of `packed-ref` iterators. The implementation is again\nstraight forward, except that we cannot continue to use the prefix\niterator as we would otherwise not be able to reseek the iterator\nanymore in case one first asks for an empty and then for a non-empty\nprefix. Instead, we open-code the logic to in `advance()`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	af47976cc044ecfd52105bb45f6a9085b3c8a772 [label=af47976 color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nWed Jan 22 06:35:47 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 18:51:35 2025 -0800\n\nrefs: mark `ref_transaction_update_reflog()` as static\n\nThe `ref_transaction_update_reflog()` function is only used within\n'refs.c', so mark it as static.\n\nReported-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	af8bf677c150144166454f311642825a0b08e506 [label=af8bf67 color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 31 23:14:20 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 23:58:45 2025 -0800\n\nt/unit-tests: convert strcmp-offset test to use clar test framework\n\nAdapt strcmp-offset test script to clar framework by using clar\nassertions where necessary. Introduce `test_strcmp_offset__empty()` to\nverify `check_strcmp_offset()` behavior when both input strings are\nempty. This ensures the function correctly handles edge cases and\nreturns expected values.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	af8fc7be10fa486c93acfb177af4dd1fa7757deb [label=af8fc7b color=gold3 fillcolor=gold3 tooltip="author: Phillip Wood <phillip.wood@dunelm.org.uk>\nTue Feb 11 16:59:08 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 11 18:50:53 2025 -0800\n\nrebase -i: reword empty commit after fast-forward\n\nWhen rebase rewords a commit it picks the commit and then runs \"git\ncommit --amend\" to reword it. When the commit is picked the sequencer\ntries to reuse existing commits by fast-forwarding if the parents are\nunchanged. Rewording an empty commit that has been fast-forwarded fails\nbecause \"git commit --amend\" is called without \"--allow-empty\". This\nhappens because when a commit is fast-forwarded the logic that checks\nwhether we should pass \"--allow-empty\" is skipped. Fix this by always\npassing \"--allow-empty\" when rewording a commit. This is safe because we\nare amending a commit that has already been picked so if it had become\nempty when it was picked we\'d have already returned an error.\n\nAs \"git commit\" will happily create empty merge commits without\n\"--allow-empty\" we do not need to pass that flag when rewording merge\ncommits.\n\nSigned-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	afa46543182269e615998c970dd16742d63d692f [label=afa4654 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:48:52 2025 -0800\n\nSync with 'master'"]
	b0520af5047038f5c257ad8ba5f74e981aaf07e4 [label=b0520af color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:10:30 2025 -0800\n\nMerge branch 'ua/some-builtins-wo-the-repository' into next\n\nA handful of built-in command implementations have been rewritten\nto use the repository instance supplied by git.c:run_builtin(), its\ncaller.\n\n* ua/some-builtins-wo-the-repository:\nbuiltin/checkout-index: stop using `the_repository`\nbuiltin/for-each-ref: stop using `the_repository`\nbuiltin/ls-files: stop using `the_repository`\nbuiltin/pack-refs: stop using `the_repository`\nbuiltin/send-pack: stop using `the_repository`\nbuiltin/verify-commit: stop using `the_repository`\nbuiltin/verify-tag: stop using `the_repository`\nconfig: teach repo_config to allow `repo` to be NULL"]
	b07dd9078b8ba5f3b7f5c88f84f7ee9c34fa65e1 [label=b07dd90 color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nFri Feb 14 05:41:29 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 14 06:33:00 2025 -0800\n\nmerge-recursive: optimize time complexity for process_renames\n\nAvoid O(n^2) complexity in `process_renames()` when building a sorted\n`string_list` by constructing it unsorted and sorting it afterward,\nreducing the complexity to O(n log n).\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b08a0c8e23af8c65bb9c83f4247785d23c2f8379 [label=b08a0c8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:54 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:54 2024 -0800\n\nMerge branch 'ms/t7611-test-path-is-file' into next\n\nTest modernization.\n\n* ms/t7611-test-path-is-file:\nt7611: replace test -f with test_path_is* helpers"]
	b09b10ad2660f6ad8c513f09a7e50ae7d7fffb7b [label=b09b10a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:24 2025 -0800\n\nMerge branch 'jp/t8002-printf-fix'\n\nTest fix.\n\n* jp/t8002-printf-fix:\nt8002: fix ambiguous printf conversion specifications"]
	b0c5685768ec6f326550dce42bbb3b6419ca2408 [label=b0c5685 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\n\nMerge branch 'jc/breaking-changes-early-adopter-option' into next\n\nDoc update.\n\n* jc/breaking-changes-early-adopter-option:\nBreakingChanges: clarify the procedure"]
	b119a687d411864433aed92017c144d311b53a4c [label=b119a68 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nWed Jan 01 21:21:24 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:17:05 2025 -0800\n\ntest-lib: ignore leaks in the sanitizer's thread code\n\nOur CI jobs sometimes see false positive leaks like this:\n\n=================================================================\n==3904583==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 32 byte(s) in 1 object(s) allocated from:\n#0 0x7fa790d01986 in __interceptor_realloc ../../../../src/libsanitizer/lsan/lsan_interceptors.cpp:98\n#1 0x7fa790add769 in __pthread_getattr_np nptl/pthread_getattr_np.c:180\n#2 0x7fa790d117c5 in __sanitizer::GetThreadStackTopAndBottom(bool, unsigned long*, unsigned long*) ../../../../src/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp:150\n#3 0x7fa790d11957 in __sanitizer::GetThreadStackAndTls(bool, unsigned long*, unsigned long*, unsigned long*, unsigned long*) ../../../../src/libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp:598\n#4 0x7fa790d03fe8 in __lsan::ThreadStart(unsigned int, unsigned long long, __sanitizer::ThreadType) ../../../../src/libsanitizer/lsan/lsan_posix.cpp:51\n#5 0x7fa790d013fd in __lsan_thread_start_func ../../../../src/libsanitizer/lsan/lsan_interceptors.cpp:440\n#6 0x7fa790adc3eb in start_thread nptl/pthread_create.c:444\n#7 0x7fa790b5ca5b in clone3 ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n\nThis is not a leak in our code, but appears to be a race between one\nthread calling exit() while another one is in LSan's stack setup code.\nYou can reproduce it easily by running t0003 or t5309 with --stress\n(these trigger it because of the threading in git-grep and index-pack\nrespectively).\n\nThis may be a bug in LSan, but regardless of whether it is eventually\nfixed, it is useful to work around it so that we stop seeing these false\npositives.\n\nWe can recognize it by the mention of the sanitizer functions in the\nDEDUP_TOKEN line. With this patch, the scripts mentioned above should\nrun with --stress indefinitely.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b133d3071ae6c648aced1c40e12914cb6b2ccec9 [label=b133d30 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:01 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:37 2025 -0800\n\ngithub: simplify computation of the job\'s distro\n\nWe explicitly list the distro of Linux-based jobs, but it is equivalent\nto the name of the image in almost all cases, except that colons are\nreplaced with dashes. Drop the redundant information and massage it in\nour CI scripts, which is equivalent to how we do it in GitLab CI.\n\nThere are a couple of exceptions:\n\n- The \"linux32\" job, whose distro name is different than the image\nname. This is handled by adapting all sites to use the new name.\n\n- The \"alpine\" and \"fedora\" jobs, neither of which specify a tag for\ntheir image. This is handled by adding the \"latest\" tag.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b1be3953e5ff5c85853e184d16cb213e8f9c4623 [label=b1be395 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Feb 03 07:29:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:55 2025 -0800\n\nt5504: modernize test by moving heredocs into test bodies\n\nWe have several heredocs in t5504 located outside of any particular test\nbodies. Move these into the test bodies to match our modern coding\nstyle.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b1dbc87686db1da0d9ee8ece2e6faa78354f2970 [label=b1dbc87 color=gold3 fillcolor=gold3 tooltip="author: Ralf Thielow <ralf.thielow@gmail.com>\nFri Dec 20 17:45:01 2024 +0100\ncommitter: Ralf Thielow <ralf.thielow@gmail.com>\nFri Jan 03 17:41:26 2025 +0100\n\nl10n: Update German translation\n\nReviewed-by: Matthias Rüster <matthias.ruester@gmail.com>\nSigned-off-by: Ralf Thielow <ralf.thielow@gmail.com>"]
	b1e4b6f4dc27481e8c07acc2e7629ae206d25f6c [label=b1e4b6f color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:25 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:30 2025 -0800\n\nreftable/block: adjust type of the restart length\n\nThe restart length is tracked as a positive integer even though it\ncannot ever be negative. Furthermore, it is effectively capped via the\nMAX_RESTARTS variable.\n\nAdjust the type of the variable to be `uint32_t`. While this type is\nexcessive given that MAX_RESTARTS fits into an `uint16_t`, other places\nalready use 32 bit integers for restarts, so this type is being more\nconsistent.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b20d7d348c4d32777cd577c221de529452baca03 [label=b20d7d3 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:49:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:25 2025 -0800\n\ntree-diff: inline path_appendnew()\n\nOur path_appendnew() has been simplified to the point that it is mostly\njust implementing combine_diff_path_new(), plus setting the \"next\"\npointer. Since there\'s only one caller, let\'s replace it completely with\na call to that helper function.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b224e8e36cf22df3c058990cfdd8c1d5c51fc5ae [label=b224e8e color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 23 01:36:13 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 02:52:44 2025 -0800\n\npath-walk: drop redundant parse_tree() call\n\nThis call to parse_tree() was flagged by Coverity for ignoring the\nreturn value. But if we look a little further up the function, we can\nsee that there is already a call to parse_tree_gently(), and we'll\nreturn early if that fails. So by this point the tree will always be\nparsed, and the call is redundant.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b2755c15e2359c5436de062bf33a155a99c72c03 [label=b2755c1 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 31 13:55:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 19:06:11 2025 -0800\n\nhash: provide generic wrappers to update hash contexts\n\nThe hash context is supposed to be updated via the `git_hash_algo`\nstructure, which contains a list of function pointers to update, clone\nor finalize a hashing context. This requires the callers to track which\nalgorithm was used to initialize the context and continue to use the\nexact same algorithm. If they fail to do that correctly, it can happen\nthat we start to access context state of one hash algorithm with\nfunctions of a different hash algorithm. The result would typically be a\nsegfault, as could be seen e.g. in the patches part of 98422943f0 (Merge\nbranch 'ps/weak-sha1-for-tail-sum-fix', 2025-01-01).\n\nThe situation was significantly improved starting with 04292c3796\n(hash.h: drop unsafe_ function variants, 2025-01-23) and its parent\ncommits. These refactorings ensure that it is not possible to mix up\nsafe and unsafe variants of the same hash algorithm anymore. But in\ntheory, it is still possible to mix up different hash algorithms with\neach other, even though this is a lot less likely to happen.\n\nBut still, we can do better: instead of asking the caller to remember\nthe hash algorithm used to initialize a context, we can instead make the\ncontext itself remember which algorithm it has been initialized with. If\nwe do so, callers can use a set of generic helpers to update the context\nand don't need to be aware of the hash algorithm at all anymore.\n\nAdapt the context initialization functions to store the hash algorithm\nin the hashing context and introduce these generic helpers. Callers will\nbe adapted in the subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b27710019bdb95530e7c7a2659767cbd15f87f22 [label=b277100 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:16:28 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:16:28 2025 -0800\n\nSync with 'next'"]
	b28fb93e51a94907eca9cc08eb1a2db51fe1ddc8 [label=b28fb93 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:19:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:19:34 2025 -0800\n\nMerge branch \'ps/build-sign-compare\'\n\nLast-minute fix for a regression in \"git blame --abbrev=<length>\"\nwhen insane <length> is specified; we used to correctly cap it to\nthe hash output length but broke it during the cycle.\n\n* ps/build-sign-compare:\nbuiltin/blame: fix out-of-bounds write with blank boundary commits\nbuiltin/blame: fix out-of-bounds read with excessive `--abbrev`"]
	b3e6e7acbc16ce8a8986ee84b24ad7d97f6017c4 [label=b3e6e7a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:46:28 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:46:28 2025 -0800\n\nMerge branch \'jc/doc-opt-tilde-expand\' into next\n\nDescribe a case where an option value needs to be spelled as a\nseparate argument, i.e. \"--opt val\", not \"--opt=val\".\n\n* jc/doc-opt-tilde-expand:\ngitcli.txt: typeset pathnames as monospace"]
	b411ed60c7438eda3fd85a308050e88159f275fd [label=b411ed6 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:38 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\nrepo-settings: introduce function to clear struct\n\nWe don't provide a way to clear a `struct repo_settings`, and instead\nopen-code this in `repo_clear()`. This is mixing up concerns and means\nthat developers have to touch multiple files whenever they add a new\nfield to the structure in case the associated resources need to be\nreleased.\n\nProvide a new `repo_settings_clear()` function to improve this.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b4b322c6ff0279a61f4fc570f4d3aa51e92003b2 [label=b4b322c color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:02 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:34 2025 -0800\n\ndelta-islands: stop depending on `the_repository`\n\nThere are multiple sites in \"delta-islands.c\" where we use the\nglobal `the_repository` variable, either explicitly or implicitly by\nusing `the_hash_algo`.\n\nRefactor the code to stop using `the_repository`. In most cases this is\ntrivial because we already had a repository available in the calling\ncontext, with the only exception being `propagate_island_marks()`. Adapt\nit so that the repository gets passed in via a parameter.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b4c06f7c4d6c87091f138877b702489755fd59ef [label=b4c06f7 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 19 13:42:50 2025 +0100\ncommitter: Patrick Steinhardt <ps@pks.im>\nThu Feb 20 08:52:15 2025 +0100\n\ngitk: introduce support for the Meson build system\n\nUpstream Git has introduced support for the Meson build system.\nIntroduce support for Meson into gitk, as well, so that Git can easily\nbuild its vendored copy of Gitk via a `subproject()` directive. The\ninstructions can be set up as follows:\n\n$ meson setup build\n$ meson compile -C build\n$ meson install -C build\n\nSpecific options, like for example where Gitk shall be installed to, can\nbe specified at setup time via `-D`. Available options can be discovered\nby running `meson configure` either in the source or build directory.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>"]
	b4c799f1606b7f911d5812832b86fb97fe3777f1 [label=b4c799f color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:58 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: stop linking libcurl into all executables\n\nWe set up libcurl via the `libgit_dependencies` variable, which gets\npropagated into every user of the `libgit` dependency. This is not\nnecessary though, as most of our executables aren't even supposed to\nlink against libcurl.\n\nFix this by only propagating include directories as a libgit dependency\nand propagating the full curl dependency via `libgit_curl`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b4cf68476a983ff063846b43cd46ee9805f2c0bb [label=b4cf684 color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:34 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:43 2025 -0800\n\npack-objects: prevent name hash version change\n\nWhen the --name-hash-version option is used in 'git pack-objects', it\ncan change from the initial assignment to when it is used based on\ninteractions with other arguments. Specifically, when writing or reading\nbitmaps, we must force version 1 for now. This could change in the\nfuture when the bitmap format can store a name hash version value,\nindicating which was used during the writing of the packfile.\n\nProtect the 'git pack-objects' process from getting confused by failing\nwith a BUG() statement if the value of the name hash version changes\nbetween calls to pack_name_hash_fn().\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b4eb8f2fc8057eba78fa54b9f5aa70e43ca04fb6 [label=b4eb8f2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\n\nMerge branch \'ps/setup-reinit-fixes\' into next\n\n\"git init\" to reinitialize a repository that already exists cannot\nchange the hash function and ref backends; such a request is\nsilently ignored now.\n\n* ps/setup-reinit-fixes:\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_HASH\nsetup: fix reinit of repos with incompatible GIT_DEFAULT_REF_FORMAT\nt0001: remove duplicate test"]
	b5301d5386052381a1ef28b5fb5818b5b52b1aca [label=b5301d5 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:48:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:48:14 2025 -0800\n\nWhat's cooking (2025/01 #03)"]
	b537af720ec22c0283923afcdbbc1df306907542 [label=b537af7 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:31:57 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:36 2025 -0800\n\nt0060: fix EBUSY in MinGW when setting up runtime prefix\n\nTwo of our tests in t0060 verify that the runtime prefix functionality\nworks as expected by creating a separate directory hierarchy, copying\nthe Git executable in there and then creating scripts relative to that\nexecutable.\n\nThese tests fail quite regularly in GitLab CI with the following error:\n\nexpecting success of 0060.218 \'%(prefix)/ works\':\nmkdir -p pretend/bin &&\ncp \"$GIT_EXEC_PATH\"/git$X pretend/bin/ &&\ngit config yes.path \"%(prefix)/yes\" &&\nGIT_EXEC_PATH= ./pretend/bin/git config --path yes.path >actual &&\necho \"$(pwd)/pretend/yes\" >expect &&\ntest_cmp expect actual\n++ mkdir -p pretend/bin\n++ cp /c/GitLab-Runner/builds/gitlab-org/git/git.exe pretend/bin/\ncp: cannot create regular file \'pretend/bin/git.exe\': Device or resource busy\nerror: last command exited with $?=1\nnot ok 218 - %(prefix)/ works\n\nSeemingly, the \"git.exe\" binary we are trying to overwrite is still\nbeing held open. It is somewhat puzzling why exactly that is: while the\npreceding test _does_ write to and execute the same path, it should have\nexited and shouldn\'t keep any backgrounded processes around. So it must\nbe held open by something else, either in MinGW or in Windows itself.\n\nWhile the root cause is puzzling, the workaround is trivial enough:\ninstead of writing the file twice we simply pull the common setup into a\nseparate test case so that we won\'t observe EBUSY in the first place.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b569cbf2c6e024a877e5da14343a2c649f040058 [label=b569cbf color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 18:34:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 18:34:31 2025 -0800\n\nMerge branch 'ps/meson-weak-sha1-build' into ps/build-meson-fixes\n\n* ps/meson-weak-sha1-build:\nmeson: provide a summary of configured backends\nmeson: wire up unsafe SHA1 backend\nmeson: add missing dots for build options\nmeson: simplify conditions for HTTPS and SHA1 dependencies\nmeson: require SecurityFramework when it's used as SHA1 backend\nmeson: deduplicate access to SHA1/SHA256 backend options\nmeson: consistenlty spell 'CommonCrypto'"]
	b59358100c203b104e53523e1a4e3c2ad426334c [label=b593581 color=gold3 fillcolor=gold3 tooltip="author: Alexander Shopov <ash@kambanaria.org>\nTue Dec 24 13:29:09 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:06:42 2024 -0800\n\nUpdate the official repo of gitk\n\nPoint out:\n- current maintaner\n- contribution flow is via the mailing list\n\nSigned-off-by: Alexander Shopov <ash@kambanaria.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b5c54fea6a6a4c2cba774466a76c40d0348f7a2b [label=b5c54fe color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 00:33:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 00:33:43 2025 -0800\n\nMerge branch 'jk/use-wunreachable-code-for-devs' into next\n\n* jk/use-wunreachable-code-for-devs:\nconfig.mak.dev: enable -Wunreachable-code"]
	b67a603f6360051f174a00f8d10dc088dc7093be [label=b67a603 color=gold3 fillcolor=gold3 tooltip="author: Martin Ågren <martin.agren@gmail.com>\nFri Jan 03 12:33:31 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 17:23:59 2025 -0800\n\ngitcli.txt: typeset pathnames as monospace\n\nCommit 1bc1e94091 (doc: option value may be separate for valid reasons,\n2024-11-25) added a paragraph discussing tilde-expansion of, e.g.,\n~/directory/file.\n\nThe tilde character has a special meaning to asciidoc tools. In this\nparticular case, AsciiDoc matches up the two tildes in \"e.g.\n~/directory/file or ~u/d/f\" and sets the text between them using\nsubscript. In the manpage, where subscripting is not possible, this\nrenders as \"e.g.  /directory/file oru/d/f\".\n\nThese paths are literal values, which our coding guidelines want typeset\nas verbatim using backticks. Do that. One effect of this is indeed that\nthe asciidoc tools stop interpreting tilde and other special characters.\n\nSigned-off-by: Martin Ågren <martin.agren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b6b6757d77288d542bbb20ed40ec5a0aabfedb71 [label=b6b6757 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:34 2025 -0800\n\nSync with 'master'"]
	b6c66824c156363e934b3d989fb123efb1a9c63d [label=b6c6682 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:20:36 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:20:36 2024 -0800\n\nSync with 'master'"]
	b6e37a70b033824f389746e747eae4f8fdbcc5eb [label=b6e37a7 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nThu Mar 06 15:35:52 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:43:06 2025 -0800\n\nbuiltin/checkout-index: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/checkout-index.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_checkout_index()` function with `repo`\nset to NULL and then early in the function, `show_usage_with_options_if_asked()`\ncall will give the options help and exit.\n\nPass the repository available in the calling context to both `checkout_all()`\nand `checkout_file()` to remove their dependency on the global\n`the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b748ddb7a470b952b8a5596649f7433278d7f2c4 [label=b748ddb color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:29:58 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:55 2025 -0800\n\nunpack_loose_header(): fix infinite loop on broken zlib input\n\nWhen reading a loose object, we first try to expand the first 32 bytes\nto read the type+size header. This is enough for any of the normal Git\ntypes. But since 46f034483e (sha1_file: support reading from a loose\nobject of unknown type, 2015-05-03), the caller can also ask us to parse\nany unknown names, which can be much longer. In this case we keep\ninflating until we find the NUL at the end of the header, or hit\nZ_STREAM_END.\n\nBut what if zlib can't make forward progress? For example, if the loose\nobject file is truncated, we'll have no more data to feed it. It will\nreturn Z_BUF_ERROR, and we'll just loop infinitely, calling\ngit_inflate() over and over but never seeing new bytes nor an\nend-of-stream marker.\n\nWe can fix this by only looping when we think we can make forward\nprogress. This will always be Z_OK in this case. In other code we might\nalso be able to continue on Z_BUF_ERROR, but:\n\n- We will never see Z_BUF_ERROR because the output buffer is full; we\nalways feed a fresh 32-byte buffer on each call to git_inflate().\n\n- We may see Z_BUF_ERROR if we run out of input. But since we've fed\nthe whole mmap'd buffer to zlib, if it runs out of input there is\nnothing more we can do.\n\nSo if we don't see Z_OK (and didn't see the end-of-header NUL, otherwise\nwe'd have broken out of the loop), then we should stop looping and\nreturn an error.\n\nThe test case shows an example where the input is truncated (which gives\nus the input Z_BUF_ERROR case above).\n\nAlthough we do operate on objects we might get from an untrusted remote,\nI don't think the security implications of this bug are too great. It\ncan only trigger if both of these are true:\n\n- You're reading a loose object whose on-disk representation was\nwritten by an attacker. So fetching an object (or receiving a push)\nare mostly OK, because even with unpack-objects it is our local,\ntrusted code that writes out the object file. The exception may be\nfetching from an untrusted local repo, or using dumb-http, which\ncopies objects verbatim. But...\n\n- The only code path which triggers the inflate loop is cat-file's\n--allow-unknown-type option. This is unlikely to be called at all\noutside of debugging. But I also suspect that objects with\nnon-standard types (or that are truncated) would not survive the\nusual fetch/receive checks in the first place.\n\nSo I think it would be quite hard to trick somebody into running the\ninfinite loop, and we can just fix the bug.\n\nCo-authored-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b74ff38af58464688b211140b90ec90598d340c6 [label=b74ff38 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:24:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:24:43 2025 -0800\n\nGit 2.48-rc2\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b7a42309b25632b0c63e8f189fd6f4d85dea293e [label=b7a4230 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:11 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 18:19:11 2025 -0800\n\nMerge branch 'sk/unit-test-oid' into next\n\nConvert a few unit tests to the clar framework.\n\n* sk/unit-test-oid:\nt/unit-tests: convert oidtree test to use clar test framework\nt/unit-tests: convert oidmap test to use clar test framework\nt/unit-tests: convert oid-array test to use clar test framework\nt/unit-tests: implement clar specific oid helper functions"]
	b81f8c8dd3ec81a8d622e2d3d6b2af426ca53f05 [label=b81f8c8 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nMon Feb 03 07:29:38 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:58 2025 -0800\n\nsend-pack: gracefully close the connection for atomic push\n\nPatrick reported an issue that the exit code of git-receive-pack(1) is\nignored during atomic push with \"--porcelain\" flag, and added new test\ncases in t5543.\n\nThis issue originated from commit 7dcbeaa0df (send-pack: fix\ninconsistent porcelain output, 2020-04-17). At that time, I chose to\nignore the exit code of \"finish_connect()\" without investigating the\nroot cause of the abnormal termination of git-receive-pack. That was an\nincorrect solution.\n\nThe root cause is that an atomic push operation terminates early without\nsending a flush packet to git-receive-pack. As a result,\ngit-receive-pack continues waiting for commands without exiting. By\nsending a flush packet at the appropriate location in \"send_pack()\", we\nensure that the git-receive-pack process closes properly, avoiding an\nerroneous exit code for git-push. At the same time, revert the changes\nto the \"transport.c\" file made in commit 7dcbeaa0df.\n\nReported-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b821c999ca5cb472160a2ebb33aeeac5efc2fddc [label=b821c99 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 16 22:35:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:03 2025 -0800\n\nbuiltins: send usage_with_options() help text to standard output\n\nUsing the show_usage_with_options_if_asked() helper we introduced\nearlier, fix callers of usage_with_options() that want to show the\nhelp text when explicitly asked by the end-user.  The help text now\ngoes to the standard output stream for them.\n\nThe test in t7600 for \"git merge -h\" may want to be retired, as the\nsame is covered by t0012 already, but it is specifically testing that\nthe \"-h\" option gets a response even with a corrupt index file, so\nfor now let\'s leave it there.\n\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b838bf1938926a7a900166136d995d86f8a00e24 [label=b838bf1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 14:59:56 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 20 14:59:56 2025 -0800\n\nMerge branch \'master\' of https://github.com/j6t/gitk\n\n* \'master\' of https://github.com/j6t/gitk:\ngitk: introduce support for the Meson build system\ngitk: extract script to build executable\ngitk: make the \"list references\" default window width wider\ngitk: fix arrow keys in input fields with Tcl/Tk >= 8.6\ngitk: Use an external icon file on Windows\ngitk: Unicode file name support\ngitk(Windows): avoid inadvertently calling executables in the worktree"]
	b83a2f9006cdf5293370b1254f4f4cb2770c1b9f [label=b83a2f9 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:34 2025 -0800\n\nMerge branch 'kn/pack-write-with-reduced-globals'\n\nCode clean-up.\n\n* kn/pack-write-with-reduced-globals:\npack-write: pass hash_algo to internal functions\npack-write: pass hash_algo to `write_rev_file()`\npack-write: pass hash_algo to `write_idx_file()`\npack-write: pass repository to `index_pack_lockfile()`\npack-write: pass hash_algo to `fixup_pack_header_footer()`"]
	b88540045c3d70dbf4138c8f32209fea32e40d90 [label=b885400 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:31 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:09 2024 -0800\n\nmeson: fix generation of merge tools\n\nOur buildsystems generate a list of diff and merge tools that ultimately\nend up in our documentation. And while Meson does wire up the logic, it\ntries to use the TOOL_MODE environment variable to set up the mode. This\nis wrong though: the mode is set via an argument that we have fixed to\n'diff' mode by accident.\n\nFix this such that merge tools are properly generated.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b8902a53d16bf955bcebb9601b7f5c32f7027fae [label=b8902a5 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:43 2025 -0800\n\nMerge branch 'aj/difftool-config-doc-fix' into next\n\nDocfix.\n\n* aj/difftool-config-doc-fix:\ndifftool docs: restore correct position of tool list"]
	b987f159e3e44bdc068614a0c09f5b64df514096 [label=b987f15 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:38:39 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:38:39 2025 +0800\n\nMerge branch 'master' of github.com:alshopov/git-po\n\n* 'master' of github.com:alshopov/git-po:\nl10n: bg.po: Updated Bulgarian translation (5804t)"]
	b9a6830836efd2090eab32c18027b089e8b42db9 [label=b9a6830 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\n\nMerge branch 'mb/t7110-use-test-path-helper'\n\nTest modernization.\n\n* mb/t7110-use-test-path-helper:\nt7110: replace `test -f` with `test_path_is_*` helpers"]
	b9a9df93a3f5580c7f7b8cc099aad1c204ced8a4 [label=b9a9df9 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Jan 07 08:07:52 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:17:54 2025 -0800\n\ntest-lib: simplify lsan results check\n\nWe want to know if there are any leaks logged by LSan in the results\ndirectory, so we run \"find\" on the containing directory and pipe it to\nxargs. We can accomplish the same thing by just globbing in the shell\nand passing the result to grep, which has a few advantages:\n\n- it\'s one fewer process to run\n\n- we can glob on the TEST_RESULTS_SAN_FILE pattern, which is what we\nchecked at the beginning of the function, and is the same glob used\nto show the logs in check_test_results_san_file_\n\n- this correctly handles the case where TEST_OUTPUT_DIRECTORY has a\nspace in it. For example doing:\n\nmkdir \"/tmp/foo bar\"\nTEST_OUTPUT_DIRECTORY=\"/tmp/foo bar\" make SANITIZE=leak test\n\nwould yield a lot of:\n\ngrep: /tmp/foo: No such file or directory\ngrep: bar/test-results/t0006-date.leak/trace.test-tool.582311: No such file or directory\n\nwhen there are leaks. We could do the same thing with \"xargs\n--null\", but that isn\'t portable.\n\nWe are now subject to command-line length limits, but that is also true\nof the globbing cat used to show the logs themselves. This hasn\'t been a\nproblem in practice.\n\nWe do need to use \"grep -s\" for the case that the glob does not expand\n(i.e., there are not any log files at all). This option is in POSIX, and\nhas been used in t7407 for several years without anybody complaining.\nThis also also naturally handles the case where the surrounding\ndirectory has already been removed (in which case there are likewise no\nfiles!), dropping the need to comment about it.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	b9d6f64393275b505937a8621a6cc4875adde8e0 [label=b9d6f64 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:23 2025 -0800\n\ncompat/zlib: allow use of zlib-ng as backend\n\nThe zlib-ng library is a hard fork of the old and venerable zlib\nlibrary. It describes itself as zlib replacement with optimizations for\n\"next generation\" systems. As such, it contains several implementations\nof central algorithms using for example SSE2, AVX2 and other vectorized\nCPU intrinsics that supposedly speed up in- and deflating data.\n\nAnd indeed, compiling Git against zlib-ng leads to a significant speedup\nwhen reading objects. The following benchmark uses git-cat-file(1) with\n`--batch --batch-all-objects` in the Git repository:\n\nBenchmark 1: zlib\nTime (mean ± σ):     52.085 s ±  0.141 s    [User: 51.500 s, System: 0.456 s]\nRange (min … max):   52.004 s … 52.335 s    5 runs\n\nBenchmark 2: zlib-ng\nTime (mean ± σ):     40.324 s ±  0.134 s    [User: 39.731 s, System: 0.490 s]\nRange (min … max):   40.135 s … 40.484 s    5 runs\n\nSummary\nzlib-ng ran\n1.29 ± 0.01 times faster than zlib\n\nSo we\'re looking at a ~25% speedup compared to zlib. This is of course\nan extreme example, as it makes us read through all objects in the\nrepository. But regardless, it should be possible to see some sort of\nspeedup in most commands that end up accessing the object database.\n\nThe zlib-ng library provides a compatibility layer that makes it a\nproper drop-in replacement for zlib: nothing needs to change in the\nbuild system to support it. Unfortunately though, this mode isn\'t easy\nto use on most systems because distributions do not allow you to install\nzlib-ng in that way, as that would mean that the zlib library would be\nglobally replaced. Instead, many distributions provide a package that\ninstalls zlib-ng without the compatibility layer. This version does\nprovide effectively the same APIs like zlib does, but all of the symbols\nare prefixed with `zng_` to avoid symbol collisions.\n\nImplement a new build option that allows us to link against zlib-ng\ndirectly. If set, we redefine zlib symbols so that we use the `zng_`\nprefixed versions thereof provided by that library. Like this, it\nbecomes possible to install both zlib and zlib-ng (without the compat\nlayer) and then pick whichever library one wants to link against for\nGit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ba5df28904d1d3c6a60c03fd8a79dc1d632904ef [label=ba5df28 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:47 2025 -0800\n\nMerge branch 'ja/doc-restore-markup-update' into next\n\nDoc mark-up updates.\n\n* ja/doc-restore-markup-update:\ndoc: convert git-restore to new style format"]
	baaa9d6d8688ac1787e4be6087173c9e4341b162 [label=baaa9d6 color=gold3 fillcolor=gold3 tooltip="author: Sebastian Schuberth <sschuberth@gmail.com>\nSun Jul 22 23:19:24 2012 +0200\ncommitter: Johannes Schindelin <johannes.schindelin@gmx.de>\nSat Jan 11 18:17:42 2025 +0100\n\ngitk: Use an external icon file on Windows\n\nGit for Windows now ships with the new Git icon from git-scm.com. Use that\nicon file if it exists instead of the old procedurally drawn one.\n\nThis patch was sent upstream but so far no decision on its inclusion was\nmade, so commit it to our fork.\n\nSigned-off-by: Sebastian Schuberth <sschuberth@gmail.com>\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>"]
	bac67e13700714f949ce3dcebd50396bc1c625e6 [label=bac67e1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 15:51:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 15:51:37 2025 -0800\n\nMerge branch 'master' of https://github.com/j6t/git-gui\n\n* 'master' of https://github.com/j6t/git-gui:\ngit-gui i18n: Updated Bulgarian translation (579t)"]
	bad79103998cd329584e844a315e85c3e1ac3839 [label=bad7910 color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nTue Mar 04 17:11:54 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 18:21:39 2025 -0800\n\nreftable: release name on reftable_reader_new() error\n\nIf block_source_read_block() or parse_footer() fail, we leak the \"name\"\nmember of struct reftable_reader in reftable_reader_new().  Release it.\n\nReported by: H Z <shiyuyuranzh@gmail.com>\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bb5d35c1a871cb1d8e4301e7b9b04e3266aec7f6 [label=bb5d35c color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Jan 28 09:41:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:03:23 2025 -0800\n\ncompat/zlib: provide stubs for `deflateSetHeader()`\n\nThe function `deflateSetHeader()` has been introduced with zlib v1.2.2.1,\nso we don\'t use it when linking against an older version of it. Refactor\nthe code to instead provide a central stub via \"compat/zlib.h\" so that\nwe can adapt it based on whether or not we use zlib-ng in a subsequent\ncommit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bb5f4b8547d367ae6876d9df03298f25579b9b80 [label=bb5f4b8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:00 2025 -0800\n\nMerge branch 'kn/pack-write-with-reduced-globals' into next\n\nCode clean-up.\n\n* kn/pack-write-with-reduced-globals:\npack-write: pass hash_algo to internal functions\npack-write: pass hash_algo to `write_rev_file()`\npack-write: pass hash_algo to `write_idx_file()`\npack-write: pass repository to `index_pack_lockfile()`\npack-write: pass hash_algo to `fixup_pack_header_footer()`"]
	bb60c5213134cda73c31940ec0fb33c361a064eb [label=bb60c52 color=gold3 fillcolor=gold3 tooltip="author: Jacob Keller <jacob.keller@gmail.com>\nSat Feb 22 00:47:58 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 22 03:27:16 2025 -0800\n\nmailmap: fix check-mailmap with full mailmap line\n\nI recently had reported to me a crash from a coworker using the recently\nadded sendemail mailmap support:\n\n3724814 Segmentation fault      (core dumped) git check-mailmap \"bugs@company.xx\"\n\nThis appears to happen because of the NULL pointer name passed into\nmap_user(). Fix this by passing \"\" instead of NULL so that we have a\nvalid pointer.\n\nSigned-off-by: Jacob Keller <jacob.keller@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bba59f58a4eeda6fafaa3d41e14f3d00a179923f [label=bba59f5 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:32 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:22 2025 -0800\n\npath: drop `git_pathdup()` in favor of `repo_git_path()`\n\nRemove `git_pathdup()` in favor of `repo_git_path()`. The latter does\nessentially the same, with the only exception that it does not rely on\n`the_repository` but takes the repo as separate parameter.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bba9dd6a96c464e2b32226be81cb1f30257c78c0 [label=bba9dd6 color=gold3 fillcolor=gold3 tooltip="author: Teng Long <dyroneteng@gmail.com>\nFri Jan 03 17:30:11 2025 +0800\ncommitter: Teng Long <dyroneteng@gmail.com>\nSun Jan 05 12:04:34 2025 +0800\n\nl10n: zh_CN: updated translation for 2.48\n\nSigned-off-by: Teng Long <dyroneteng@gmail.com>"]
	bbca240cbffbffce1a3b28470f4d42d911b3852f [label=bbca240 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:50:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:50:37 2025 -0800\n\nMerge branch 'ek/mingw-rename-symlink'\n\nSymlink renaming fix.\n\n* ek/mingw-rename-symlink:\ncompat/mingw: rename the symlink, not the target"]
	bbd6174b2501a3523d778dbd479e85119c86840f [label=bbd6174 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:13 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:22 2025 -0800\n\nconfig.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bbda434d749918587a6d97ccdc237ed577d51268 [label=bbda434 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:26:13 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 17:26:13 2024 -0800\n\nWhat's cooking (2024/12 #09)"]
	bc024b7a45c902c3915fa7ee78b25b0c0cf2284b [label=bc024b7 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:14 2025 -0800\n\nMerge branch \'ps/reftable-get-random-fix\' into next\n\nThe code to compute \"unique\" name used git_rand() which can fail or\nget stuck; the callsite does not require cryptographic security.\nIntroduce the \"insecure\" mode and use it appropriately.\n\n* ps/reftable-get-random-fix:\nreftable/stack: accept insecure random bytes\nwrapper: allow generating insecure random bytes"]
	bc0f5939a58fda328bdba70eb64a19c969b9f8d8 [label=bc0f593 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nMon Feb 03 07:29:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:56 2025 -0800\n\nt5548: refactor test cases by resetting upstream\n\nRefactor the test cases with the following changes:\n\n- Calling setup_upstream() to reset upstream after running each test\ncase.\n\n- Change the initial branch tips of the workspace to reduce the branch\nsetup operations in the workspace.\n\n- Reduced the two steps of setting up and cleaning up the pre-receive\nhook by moving the operations into the corresponding test case,\n\nSigned-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bc204b742735ae06f65bb20291c95985c9633b7f [label=bc204b7 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:05 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:35 2025 -0800\n\nThe seventh batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bc26f7690a318fd0a875bfd8d56c70e1ccb79ccb [label=bc26f76 color=gold3 fillcolor=gold3 tooltip="author: Toon Claes <toon@iotcl.com>\nThu Feb 06 07:33:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:23:53 2025 -0800\n\nclone: make it possible to specify --tags\n\nOption --no-tags was added in 0dab2468ee (clone: add a --no-tags option\nto clone without tags, 2017-04-26). At the time there was no need to\nsupport --tags as well, although there was some conversation about\nit[1].\n\nTo simplify the code and to prepare for future commits, invert the flag\ninternally. Functionally there is no change, because the flag is\ndefault-enabled passing `--tags` has no effect, so there's no need to\nadd tests for this.\n\n[1]: https://lore.kernel.org/git/CAGZ79kbHuMpiavJ90kQLEL_AR0BEyArcZoEWAjPPhOFacN16YQ@mail.gmail.com/\n\nSigned-off-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bc2c65770dca70c1d4e151fad971bc7c7235a702 [label=bc2c657 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:58:28 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:58:28 2024 -0800\n\nGit 2.48-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bc67b4ab5f8bc268ecd2d9bb7dc1b7bf26884a8e [label=bc67b4a color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nWed Jan 15 12:54:51 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 18:12:09 2025 -0800\n\nreftable: write correct max_update_index to header\n\nIn 297c09eabb (refs: allow multiple reflog entries for the same refname,\n2024-12-16), the reftable backend learned to handle multiple reflog\nentries within the same transaction. This was done modifying the\n`update_index` for reflogs with multiple indices. During writing the\nlogs, the `max_update_index` of the writer was modified to ensure the\nlimits were raised to the modified `update_index`s.\n\nHowever, since ref entries are written before the modification to the\n`max_update_index`, if there are multiple blocks to be written, the\nreftable backend writes the header with the old `max_update_index`. When\nall logs are finally written, the footer will be written with the new\n`min_update_index`. This causes a mismatch between the header and the\nfooter and causes the reftable file to be corrupted. The existing tests\nonly spawn a single block and since headers are lazily written with the\nfirst block, the tests didn't capture this bug.\n\nTo fix the issue, the appropriate `max_update_index` limit must be set\neven before the first block is written. Add a `max_index` field to the\ntransaction which holds the `max_index` within all its updates, then\npropagate this value to the reftable backend, wherein this is used to\nthe set the `max_update_index` correctly.\n\nAdd a test which creates a few thousand reference updates with multiple\nreflog entries, which should trigger the bug.\n\nReported-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bc86ef104acd8e7c0ee7eb25de981ed5a3255615 [label=bc86ef1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 23:06:31 2025 -0800\n\nMerge branch 'pw/repo-layout-doc-update'\n\nSome future breaking changes would remove certain parts of the\ndefault repository, which were still described even when the\ndocuments were built for the future with WITH_BREAKING_CHANGES.\n\n* pw/repo-layout-doc-update:\ndocs: fix repository-layout when building with breaking changes"]
	bc9342771b7438ddf785960cd418ab8c6a7aebef [label=bc93427 color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nTue Mar 04 12:33:22 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 18:59:17 2025 -0800\n\nt/unit-tests: convert trailer test to use clar\n\nAdapt trailer test file to use clar testing framework by using clar\nassertions where necessary. Split test into individual test functions\nfor clarity and maintainability. Each test case now has its own\nfunction, making it easier to isolate failures and improve test\nreadability.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Phillip Wood <phillip.wood@dunelm.org.uk>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bcb5e21e0b4b0b03c003c5ec8f26de9a9ff9e85a [label=bcb5e21 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:36 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:39:36 2025 -0800\n\nMerge branch \'ak/instaweb-python-port-binding-fix\' into next\n\nThe \"instaweb\" bound only to local IP address without \"--local\" and\nto all addresses with \"--local\", which was the other way around, when\nusing Python\'s http.server class, which has been corrected.\n\n* ak/instaweb-python-port-binding-fix:\ninstaweb: fix ip binding for the python http.server"]
	bcf7edee09e8f9c1779fafa953832f63e9a23545 [label=bcf7ede color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:37 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:11 2024 -0800\n\nmeson: generate articles\n\nWhile the Meson build system already knows to generate man pages and our\nuser manual, it does not yet generate the random assortment of articles\nthat we have. Plug this gap.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bd262d07b65af894b1014cd8cc2d02aaee65800b [label=bd262d0 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:11 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:34 2025 -0800\n\nmeson: fix exec path with enabled runtime prefix\n\nWhen the runtime prefix option is enabled, Git is built such that it\nknows to locate its binaries relative to the directory a binary is being\nexecuted from. This requires us to figure out relative paths, which is\nhandled in `system_prefix()` by trying to strip a couple of well-known\npaths.\n\nOne of these paths, GIT_EXEC_PATH, is expected to be absolute when\nruntime prefixes are enabled, but relative otherwise. And while our\nMakefile gets this correctly, in Meson we always wire up the absolute\npath, which may result in us not being able to find binaries.\n\nFix this by conditionally injecting the paths depending on whether or\nnot the `runtime_prefix` option is enabled.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bd52d9a0583a2d12f584fdf6b47d2c2f51c0d791 [label=bd52d9a color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nSat Mar 08 00:27:03 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:15:18 2025 -0800\n\nfetch: fix following tags when fetching specific OID\n\nIn 3f763ddf28 (fetch: set remote/HEAD if it does not exist, 2024-11-22),\nunconditionally adds \"HEAD\" to the list of ref prefixes we send to the\nserver.\n\nThis breaks a core assumption that the list of prefixes we send to the\nserver is complete. We must either send all prefixes we care about, or\nnone at all (in the latter case the server then advertises everything).\n\nThe tag following code is careful to only add \"refs/tags/\" to the list\nof prefixes if there are already entries in the prefix list. But because\nthe new code from 3f763ddf28 runs after the tag code, and because it\nunconditionally adds to the prefix list, we may end up with a prefix\nlist that _should_ have \"refs/tags/\" in it, but doesn\'t.\n\nWhen that is the case, the server does not advertise any tags, and our\nauto-following breaks because we never learned about any tags in the\nfirst place.\n\nFix this by only adding \"HEAD\" to the ref prefixes when we know that we\nare already limiting the advertisement. In either case we\'ll learn about\nHEAD (either through the limited advertisement, or implicitly through a\nfull advertisement).\n\nReported-by: Igor Todorovski <itodorov@ca.ibm.com>\nCo-authored-by: Jeff King <peff@peff.net>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bdd1988eb335830fc8602f589e04d56348596abd [label=bdd1988 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\n\nMerge branch 'ja/doc-notes-markup-updates'\n\nDoc mark-up updates.\n\n* ja/doc-notes-markup-updates:\ndoc: convert git-notes to new documentation format"]
	bdfc07bfdf3f4f4ef94580c0cb46eef5977bb810 [label=bdfc07b color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:21 2025 -0800\n\npath: refactor `repo_git_path()` family of functions\n\nAs explained in an earlier commit, we\'re refactoring path-related\nfunctions to provide a consistent interface for computing paths into the\ncommondir, gitdir and worktree. Refactor the \"gitdir\" family of\nfunctions accordingly.\n\nNote that the `repo_git_pathv()` function is converted into an internal\nimplementation detail. It is only used to implement `the_repository`\ncompatibility shims and will eventually be removed from the public\ninterface.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	be0905fed1cdc9a2269f19569c518f00d54d2dbe [label=be0905f color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 05:05:56 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:51:41 2025 -0800\n\nremote: rename query_refspecs functions\n\nRename functions related to handling refspecs in preparation for their\nmove from `remote.c` to `refspec.c`. Update their names to better\nreflect their intent:\n\n- `query_refspecs()` -> `refspec_find_match()` for clarity, as it\nfinds a single matching refspec.\n\n- `query_refspecs_multiple()` -> `refspec_find_all_matches()` to\nbetter reflect that it collects all matching refspecs instead of\nreturning just the first match.\n\n- `query_matches_negative_refspec()` ->\n`refspec_find_negative_match()` for consistency with the\nupdated naming convention, even though this static function\ndidn't strictly require renaming.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	be2ea674ccb2492de9cb9a5d55b88396001eda2d [label=be2ea67 color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nWed Jan 15 21:23:44 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 23:43:36 2025 -0800\n\ndoc: apply new documentation guidelines to git commit\n\n- switch the synopsis to a synopsis block which will automatically\nformat placeholders in italics and keywords in monospace\n- use _<placeholder>_ instead of <placeholder> in the description\n- use `backticks for keywords and more complex option\ndescriptions`. The new rendering engine will apply synopsis rules to\nthese spans.\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bef28948e261285f7f15ecba9b6395489f88683e [label=bef2894 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:05 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:35 2025 -0800\n\nhash: stop depending on `the_repository` in `null_oid()`\n\nThe `null_oid()` function returns the object ID that only consists of\nzeroes. Naturally, this ID also depends on the hash algorithm used, as\nthe number of zeroes is different between SHA1 and SHA256. Consequently,\nthe function returns the hash-algorithm-specific null object ID.\n\nThis is currently done by depending on `the_hash_algo`, which implicitly\nmakes us depend on `the_repository`. Refactor the function to instead\npass in the hash algorithm for which we want to retrieve the null object\nID. Adapt callsites accordingly by passing in `the_repository`, thus\nbubbling up the dependency on that global variable by one layer.\n\nThere are a couple of trivial exceptions for subsystems that already got\nrid of `the_repository`. These subsystems instead use the repository\nthat is available via the calling context:\n\n- \"builtin/grep.c\"\n- \"grep.c\"\n- \"refs/debug.c\"\n\nThere are also two non-trivial exceptions:\n\n- \"diff-no-index.c\": Here we know that we may not have a repository\ninitialized at all, so we cannot rely on `the_repository`. Instead,\nwe adapt `diff_no_index()` to get a `struct git_hash_algo` as\nparameter. The only caller is located in \"builtin/diff.c\", where we\nknow to call `repo_set_hash_algo()` in case we\'re running outside of\na Git repository. Consequently, it is fine to continue passing\n`the_repository->hash_algo` even in this case.\n\n- \"builtin/ls-files.c\": There is an in-flight patch series that drops\n`USE_THE_REPOSITORY_VARIABLE` in this file, which causes a semantic\nconflict because we use `null_oid()` in `show_submodule()`. The\nvalue is passed to `repo_submodule_init()`, which may use the object\nID to resolve a tree-ish in the superproject from which we want to\nread the submodule config. As such, the object ID should refer to an\nobject in the superproject, and consequently we need to use its hash\nalgorithm.\n\nThis means that we could in theory just not bother about this edge case\nat all and just use `the_repository` in \"diff-no-index.c\". But doing so\nwould feel misdesigned.\n\nRemove the `USE_THE_REPOSITORY_VARIABLE` preprocessor define in\n\"hash.c\".\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bf1f004a4abf2e01ffff8257b3d85971346078f1 [label=bf1f004 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:46:03 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:46:03 2025 -0800\n\nSync with 'master'"]
	bf225248c988bc547241cbe91dd883d4bf06f1e4 [label=bf22524 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\n\nMerge branch 'jt/gitlab-ci-base-fix' into next\n\nTwo CI tasks, whitespace check and style check, work on the\ndifference from the base version and the version being checked, but\nthe base was computed incorrectly in GitLab CI in some cases, which\nhas been corrected.\n\n* jt/gitlab-ci-base-fix:\nci: fix base commit fallback for check-whitespace and check-style"]
	bf4a16b84a437336abfe633dbeeb29748c80c14d [label=bf4a16b color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:43:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: drop separate version library\n\nWhen building `libgit.a` we link it against a `libgit_version.a` library\nthat contains the version information that we inject at build time. The\nintent of this is to avoid rebuilding all of `libgit.a` whenever the\nversion changes. But that wouldn\'t happen in the first place, as we know\nto just rebuild the files that depend on the generated \"version-def.h\"\nfile.\n\nThis is an artifact of an earlier version of the Meson build infra that\ndidn\'t ultimately land. We didn\'t yet have \"version-def.h\", and instead\ninjected the version via preprocessor directives. And here we would have\nrebuilt all of `libgit.a` indeed in case the version changes, because\nthe preprocessor directive applied to all files.\n\nStop building the separate library and instead add \"version-def.h\" to\nthe list of source files directly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	bf5f394be8f5b245b73758b02b3dc81e036a3245 [label=bf5f394 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:37 2025 -0800\n\nSync with 'master'"]
	bfe548d87ed7786f06c2d9519f69c38ed47176e6 [label=bfe548d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:58 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:53:58 2024 -0800\n\nSync with 'master'"]
	bff455576750bd013a3c87b15cc7086cb8c1eab0 [label=bff4555 color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <derrickstolee@github.com>\nMon Feb 03 18:11:06 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:42 2025 -0800\n\nbackfill: add --sparse option\n\nOne way to significantly reduce the cost of a Git clone and later fetches is\nto use a blobless partial clone and combine that with a sparse-checkout that\nreduces the paths that need to be populated in the working directory. Not\nonly does this reduce the cost of clones and fetches, the sparse-checkout\nreduces the number of objects needed to download from a promisor remote.\n\nHowever, history investigations can be expensive as computing blob diffs\nwill trigger promisor remote requests for one object at a time. This can be\navoided by downloading the blobs needed for the given sparse-checkout using\n'git backfill' and its new '--sparse' mode, at a time that the user is\nwilling to pay that extra cost.\n\nNote that this is distinctly different from the '--filter=sparse:<oid>'\noption, as this assumes that the partial clone has all reachable trees and\nwe are using client-side logic to avoid downloading blobs outside of the\nsparse-checkout cone. This avoids the server-side cost of walking trees\nwhile also achieving a similar goal. It also downloads in batches based on\nsimilar path names, presenting a resumable download if things are\ninterrupted.\n\nThis augments the path-walk API to have a possibly-NULL 'pl' member that may\npoint to a 'struct pattern_list'. This could be more general than the\nsparse-checkout definition at HEAD, but 'git backfill --sparse' is currently\nthe only consumer.\n\nBe sure to test this in both cone mode and not cone mode. Cone mode has the\nbenefit that the path-walk can skip certain paths once they would expand\nbeyond the sparse-checkout. Non-cone mode can describe the included files\nusing both positive and negative patterns, which changes the possible return\nvalues of path_matches_pattern_list(). Test both kinds of matches for\nincreased coverage.\n\nTo test this, we can create a blobless sparse clone, expand the\nsparse-checkout slightly, and then run 'git backfill --sparse' to see\nhow much data is downloaded. The general steps are\n\n1. git clone --filter=blob:none --sparse <url>\n2. git sparse-checkout set <dir1> ... <dirN>\n3. git backfill --sparse\n\nFor the Git repository with the 'builtin' directory in the\nsparse-checkout, we get these results for various batch sizes:\n\n| Batch Size      | Pack Count | Pack Size | Time  |\n|-----------------|------------|-----------|-------|\n| (Initial clone) | 3          | 110 MB    |       |\n| 10K             | 12         | 192 MB    | 17.2s |\n| 15K             | 9          | 192 MB    | 15.5s |\n| 20K             | 8          | 192 MB    | 15.5s |\n| 25K             | 7          | 192 MB    | 14.7s |\n\nThis case matters less because a full clone of the Git repository from\nGitHub is currently at 277 MB.\n\nUsing a copy of the Linux repository with the 'kernel/' directory in the\nsparse-checkout, we get these results:\n\n| Batch Size      | Pack Count | Pack Size | Time |\n|-----------------|------------|-----------|------|\n| (Initial clone) | 2          | 1,876 MB  |      |\n| 10K             | 11         | 2,187 MB  | 46s  |\n| 25K             | 7          | 2,188 MB  | 43s  |\n| 50K             | 5          | 2,194 MB  | 44s  |\n| 100K            | 4          | 2,194 MB  | 48s  |\n\nThis case is more meaningful because a full clone of the Linux\nrepository is currently over 6 GB, so this is a valuable way to download\na fraction of the repository and no longer need network access for all\nreachable objects within the sparse-checkout.\n\nChoosing a batch size will depend on a lot of factors, including the\nuser's network speed or reliability, the repository's file structure,\nand how many versions there are of the file within the sparse-checkout\nscope. There will not be a one-size-fits-all solution.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c0086e901505c59d6f9714f961c0d48cd86ef36b [label=c0086e9 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:11 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:11 2025 -0800\n\nSync with 'master'"]
	c032b1d8bc29de4fb1322d841d8216ca961dcb53 [label=c032b1d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:55 2025 -0800\n\nMerge branch 'dk/zsh-config-completion-fix'\n\nCompletion script updates for zsh\n\n* dk/zsh-config-completion-fix:\ncompletion: repair config completion for Zsh"]
	c09c29b43046373a0ace268c6de6266b5817dbc3 [label=c09c29b color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:17 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:23 2025 -0800\n\nfsck.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c143dfa7ed4115d1fd7d23150a0314768377f108 [label=c143dfa color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 17 13:29:24 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 23:35:11 2025 -0800\n\nt/unit-tests: convert mem-pool test to use clar test framework\n\nAdapt the mem-pool test script to use clar framework by using clar\nassertions where necessary.Test functions are created as a standalone to\ntest different test cases.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c1acf1a31761d0cfddc3ea6d39c92a6528cd9c5c [label=c1acf1a color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 06 10:24:25 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 16:57:17 2025 -0800\n\nobject-file: rename variables in `check_collision()`\n\nRename variables used in `check_collision()` to clearly identify which\nfile is the source and which is the destination. This will make the next\nstep easier to reason about when we start to treat those files different\nfrom one another.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c1cf918d3adbe832fdaf278a23151502be255bb2 [label=c1cf918 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:07:48 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:10 2025 -0800\n\nbuiltin/fsck: add `git refs verify` child process\n\nAt now, we have already implemented the ref consistency checks for both\n\"files-backend\" and \"packed-backend\". Although we would check some\nredundant things, it won\'t cause trouble. So, let\'s integrate it into\nthe \"git-fsck(1)\" command to get feedback from the users. And also by\ncalling \"git refs verify\" in \"git-fsck(1)\", we make sure that the new\nadded checks don\'t break.\n\nIntroduce a new function \"fsck_refs\" that initializes and runs a child\nprocess to execute the \"git refs verify\" command. In order to provide\nthe user interface create a progress which makes the total task be 1.\nIt\'s hard to know how many loose refs we will check now. We might\nimprove this later.\n\nThen, introduce the option to allow the user to disable checking ref\ndatabase consistency. Put this function in the very first execution\nsequence of \"git-fsck(1)\" due to that we don\'t want the existing code of\n\"git-fsck(1)\" which would implicitly check the consistency of refs to\ndie the program.\n\nLast, update the test to exercise the code.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c1d6628c9433c09ff62f916f2b933ee12995e9d8 [label=c1d6628 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:56 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:04 2025 -0800\n\nmeson: wire up static analysis via Coccinelle\n\nWire up static analysis via Coccinelle via a new test target\n\"coccicheck\". This target can be executed via `meson compile coccicheck`\nand generates the semantic patch for us.\n\nNote that we don\'t hardcode the list of source and header files that\nshall be analyzed, and instead use git-ls-files(1) to find them for us.\nThis is because we also want to analyze files that may not get built on\nthe current platform, so finding all sources at configure time is easier\nthan introducing a new variable that tracks all sources, including those\nwhich aren\'t being built.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c24783e99dcae41be907bb765432e6c0e10288b4 [label=c24783e color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:41 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:41 2024 -0800\n\nMerge branch 'ps/weak-sha1-for-tail-sum-fix' into next\n\n* ps/weak-sha1-for-tail-sum-fix:\nci: exercise unsafe OpenSSL backend\nbuiltin/fast-import: fix segfault with unsafe SHA1 backend\nbulk-checkin: fix segfault with unsafe SHA1 backend"]
	c268e3285d4eafeec048d98672faa43f21857990 [label=c268e32 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 18:28:21 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 19:07:03 2025 -0800\n\nBreakingChanges: clarify the procedure\n\nThe point behind a compile-time switch is to ensure that we have a\nmechanism to hide myriad of backward incompatible changes that may\nbe prepared and accumulated over time, yet make them available for\ntesting any time during the development toward the big version\nboundary.  Add a few words to stress that point.\n\nSince the document was first written, we have added the CI job that\nthe document anticipated us to have.  Rephrase to state the current\nstatus.\n\nThe discussion in [*1*] made us abandon the \"feature.git3\" based\nruntime switching of behaviour and instead adopt the compile-time\nswitching mechanism, but a stray sentence about runtime switching\nstill remained in the final text by mistake.  Remove it.\n\n[Reference]\n\n*1* https://lore.kernel.org/git/xmqqldzel6ug.fsf@gitster.g/\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c2b83ec2e7b6a02d6c8f4756b4aa5e47010deac7 [label=c2b83ec color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:20:33 2025 -0800\n\nMerge branch 'bc/http-push-auth-netrc-fix' into next\n\nThe netrc support (via the cURL library) for the HTTP transport has\nbeen re-enabled.\n\n* bc/http-push-auth-netrc-fix:\nhttp: allow using netrc for WebDAV-based HTTP protocol"]
	c2d96bc42cfc358178078d8c2c65d550671d3ed0 [label=c2d96bc color=gold3 fillcolor=gold3 tooltip="author: M Hickford <mirth.hickford@gmail.com>\nSun Feb 16 22:02:41 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:56:00 2025 -0800\n\ndoc: use 'title' consistently\n\nThe first line of a commit message is variously called 'title' or\n'subject'.\n\nPrefer 'title' unless discussing email.\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c2f2af1d09f6c7f50a40ed51e6d9f834b73f5533 [label=c2f2af1 color=gold3 fillcolor=gold3 tooltip="author: Calvin Wan <calvinwan@google.com>\nFri Feb 21 20:04:48 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:11 2025 -0800\n\ntransport: add client support for object-info\n\nSometimes, it is beneficial to retrieve information about an object\nwithout downloading it entirely. The server-side logic for this\nfunctionality was implemented in commit \"a2ba162cda (object-info:\nsupport for retrieving object info, 2021-04-20).\" And the wire\nformat is documented at\nhttps://git-scm.com/docs/protocol-v2#_object_info.\n\nThis commit introduces client functions to interact with the server.\n\nCurrently, the client supports requesting a list of object IDs with\nthe \'size\' feature from a v2 server. If the server does not advertise\nthis feature (i.e., transfer.advertiseobjectinfo is set to false),\nthe client will return an error and exit.\n\nNotice that the entire request is written into req_buf before being\nsent to the remote. This approach follows the pattern used in the\n`send_fetch_request()` logic within fetch-pack.c.\nStreaming the request is not addressed in this patch.\n\nHelped-by: Jonathan Tan <jonathantanmy@google.com>\nHelped-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Eric Ju  <eric.peijian@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c364310f83e726ab108cbaa7e5c1f508320e229e [label=c364310 color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:24 2025 -0800\n\nt/t4209-log-pickaxe: Naming typo: -G takes a regex\n\nNot effect on the test logic, but as \"-G\" argument is a regex it is more\naccurate to use \"regex\" as a dummy argument value rather than \"string\".\nIn all the other case when \"-G\" is passed a dummy value it is spelled as\n\"regex\" rather than as \"string\".\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c3fffcfe8e6c3bfbe358366c973a6109fb95d4e6 [label=c3fffcf color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 02:53:48 2025 -0800\n\nMerge branch 'bf/fetch-set-head-fix'\n\nFetching into a bare repository incorrectly assumed it always used\na mirror layout when deciding to update remote-tracking HEAD, which\nhas been corrected.\n\n* bf/fetch-set-head-fix:\nfetch set_head: fix non-mirror remotes in bare repositories\nfetch set_head: refactor to use remote directly"]
	c402e09d08eb8f4fd70279979f5a20753df8948d [label=c402e09 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:31 2025 -0800\n\nMerge branch \'kn/ref-migrate-skip-reflog\' into next\n\n\"git refs migrate\" can optionally be told not to migrate the reflog.\n\n* kn/ref-migrate-skip-reflog:\nbuiltin/refs: add \'--no-reflog\' flag to drop reflogs"]
	c43136d67b7c6a9ecfa988004eb4a87bfbe957a0 [label=c43136d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:33 2025 -0800\n\nMerge branch \'jk/combine-diff-cleanup\'\n\nCode clean-up for code paths around combined diff.\n\n* jk/combine-diff-cleanup:\ntree-diff: make list tail-passing more explicit\ntree-diff: simplify emit_path() list management\ntree-diff: use the name \"tail\" to refer to list tail\ntree-diff: drop list-tail argument to diff_tree_paths()\ncombine-diff: drop public declaration of combine_diff_path_size()\ntree-diff: inline path_appendnew()\ntree-diff: pass whole path string to path_appendnew()\ntree-diff: drop path_appendnew() alloc optimization\nrun_diff_files(): de-mystify the size of combine_diff_path struct\ndiff: add a comment about combine_diff_path.parent.path\ncombine-diff: use pointer for parent paths\ntree-diff: clear parent array in path_appendnew()\ncombine-diff: add combine_diff_path_new()\nrun_diff_files(): delay allocation of combine_diff_path"]
	c4ad516cd7fc4e722ab73f2fbbd245aaf181b2c9 [label=c4ad516 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 00:45:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 00:45:07 2025 -0800\n\nMerge branch 'lo/t7603-path-is-file-update' into next\n\nTest clean-up.\n\n* lo/t7603-path-is-file-update:\nt7603: replace test -f by test_path_is_file"]
	c4cfc42d605a2b75c802dafdff4ee0014344f5d0 [label=c4cfc42 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:27:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:27:26 2025 -0800\n\nSync with 'master'"]
	c50fbb2dd225e7e82abba4380423ae105089f4d7 [label=c50fbb2 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:03 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:19 2025 -0800\n\nREADME: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c51a0b47c91106ff50a2a9dca302e80bc7049aba [label=c51a0b4 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:00 2025 -0800\n\nMerge branch \'pw/rebase-i-ff-empty-commit\'\n\n\"git rebase -i\" failed to allow rewording an empty commit that has\nbeen fast-forwarded.\n\n* pw/rebase-i-ff-empty-commit:\nrebase -i: reword empty commit after fast-forward"]
	c5216a1bc68745ee81ba869adc6052ed892ebac1 [label=c5216a1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\n\nMerge branch 'am/trace2-with-valueless-true'\n\nThe trace2 code was not prepared to show a configuration variable\nthat is set to true using the valueless true syntax, which has been\ncorrected.\n\n* am/trace2-with-valueless-true:\ntrace2: prevent segfault on config collection with valueless true"]
	c5490ce9d1b625516b17253d1d2d0352730b7b84 [label=c5490ce color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Jan 18 18:11:59 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 18:06:24 2025 -0800\n\nref-filter: remove ref_format_clear()\n\nNow that ref_format_clear() no longer releases any memory we don't need\nit anymore.  Remove it and its counterpart, ref_format_init().\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c5823641a6769a727d890a55160346d92808bc0c [label=c582364 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:49 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:02 2025 -0800\n\nGIT-BUILD-OPTIONS: propagate project\'s source directory\n\nA couple of our tests require knowledge around where to find the\nproject\'s source directory in order to locate files required for the\ntest itself. Until now we have been wiring these up ad-hoc via new,\nspecialized variables catered to the specific usecase. This is quite\nawkward though, as every test that potentially needs to locate paths\nrelative to the source directory needs to grow another variable.\n\nIntroduce a new \"GIT_SOURCE_DIR\" variable into GIT-BUILD-OPTIONS to stop\nthis proliferation. Remove existing variables that can be derived from\nit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c5895dc4401fa7f204025d460ea2419f0bf62a77 [label=c5895dc color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:34 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:37 2025 -0800\n\nbuiltin/update-ref: skip ambiguity checks when parsing object IDs\n\nMost of the commands in git-update-ref(1) accept an old and/or new\nobject ID to update a specific reference to. These object IDs get parsed\nvia `repo_get_oid()`, which not only handles plain object IDs, but also\nthose that have a suffix like \"~\" or \"^2\". More surprisingly though, it\neven knows to resolve arbitrary revisions, despite the fact that its\nmanpage does not mention this fact even once.\n\nOne consequence of this is that we also check for ambiguous references:\nwhen parsing a full object ID where the DWIM mechanism would also cause\nus to resolve it as a branch, we\'d end up printing a warning. While this\ncheck makes sense to have in general, it is arguably less useful in the\ncontext of git-update-ref(1). This is due to multiple reasons:\n\n- The manpage is explicitly structured around object IDs. So if we see\na fully blown object ID, the intent should be quite clear in\ngeneral.\n\n- The command is part of our plumbing layer and not a tool that users\nwould generally use in interactive workflows. As such, the warning\nwill likely not be visible to anybody in the first place.\n\n- Users can and should use the fully-qualified refname in case there\nis any potential for ambiguity. And given that this command is part\nof our plumbing layer, one should always try to be as defensive as\npossible and use fully-qualified refnames.\n\nFurthermore, this check can be quite expensive when updating lots of\nreferences via `--stdin`, because we try to read multiple references per\nobject ID that we parse according to the DWIM rules. This effect can be\nseen both with the \"files\" and \"reftable\" backend.\n\nThe issue is not unique to git-update-ref(1), but was also an issue in\ngit-cat-file(1), where it was addressed by disabling the ambiguity check\nin 25fba78d36b (cat-file: disable object/refname ambiguity check for\nbatch mode, 2013-07-12).\n\nDisable the warning in git-update-ref(1), which provides a significant\nspeedup with both backends. The user-visible outcome is unchanged even\nwhen ambiguity exists, except that we don\'t show the warning anymore.\n\nThe following benchmark creates 10000 new references with a 100000\npreexisting refs with the \"files\" backend:\n\nBenchmark 1: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):     467.3 ms ±   5.1 ms    [User: 100.0 ms, System: 365.1 ms]\nRange (min … max):   461.9 ms … 479.3 ms    10 runs\n\nBenchmark 2: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):     394.1 ms ±   5.8 ms    [User: 63.3 ms, System: 327.6 ms]\nRange (min … max):   384.9 ms … 405.7 ms    10 runs\n\nSummary\nupdate-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD) ran\n1.19 ± 0.02 times faster than update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\n\nAnd with the \"reftable\" backend:\n\nBenchmark 1: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):     146.9 ms ±   2.2 ms    [User: 90.4 ms, System: 56.0 ms]\nRange (min … max):   142.7 ms … 150.8 ms    19 runs\n\nBenchmark 2: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):      63.2 ms ±   1.1 ms    [User: 41.0 ms, System: 21.8 ms]\nRange (min … max):    61.1 ms …  66.6 ms    41 runs\n\nSummary\nupdate-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD) ran\n2.32 ± 0.05 times faster than update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\n\nNote that the absolute improvement with both backends is roughly in the\nsame ballpark, but the relative improvement for the \"reftable\" backend\nis more significant because writing the new table to disk is faster in\nthe first place.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c5bc9a7f94a41c3e719afebf4a6c3e04cba82e4d [label=c5bc9a7 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 12:31:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:28:27 2025 -0800\n\nMakefile: wire up build option for deprecated features\n\nWith 57ec9254eb (docs: introduce document to announce breaking changes,\n2024-06-14), we have introduced a new document that tracks upcoming\nbreaking changes in the Git project. In 2454970930 (BreakingChanges:\nearly adopter option, 2024-10-11) we have amended the document a bit to\nmention that any introduced breaking changes must be accompanied by\nlogic that allows us to enable the breaking change at compile-time.\nWhile we already have two breaking changes lined up, neither of them has\nsuch a switch because they predate those instructions.\n\nIntroduce the proposed `WITH_BREAKING_CHANGES` preprocessor macro and\nwire it up with both our Makefiles and Meson. This does not yet wire up\nthe build flag for existing deprecations.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c5fe29f696f4a490dfdc4dbc75319076baf36def [label=c5fe29f color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 07:17:38 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 20:07:22 2025 -0800\n\nunix-socket: fix memory leak when chdir(3p) fails\n\nWhen trying to create a Unix socket in a path that exceeds the maximum\nsocket name length we try to first change the directory into the parent\nfolder before creating the socket to reduce the length of the name. When\nthis fails we error out of `unix_sockaddr_init()` with an error code,\nwhich indicates to the caller that the context has not been initialized.\nConsequently, they don't release that context.\n\nThis leads to a memory leak: when we have already populated the context\nwith the original directory that we need to chdir(3p) back into, but\nthen the chdir(3p) into the socket's parent directory fails, then we\nwon't release the original directory's path. The leak is exposed by\nt0301, but only when running tests in a directory hierarchy whose path\nis long enough to make the socket name length exceed the maximum socket\nname length:\n\nDirect leak of 129 byte(s) in 1 object(s) allocated from:\n#0 0x5555555e85c6 in realloc.part.0 lsan_interceptors.cpp.o\n#1 0x55555590e3d6 in xrealloc ../wrapper.c:140:8\n#2 0x5555558c8fc6 in strbuf_grow ../strbuf.c:114:2\n#3 0x5555558cacab in strbuf_getcwd ../strbuf.c:605:3\n#4 0x555555923ff6 in unix_sockaddr_init ../unix-socket.c:65:7\n#5 0x555555923e42 in unix_stream_connect ../unix-socket.c:84:6\n#6 0x55555562a984 in send_request ../builtin/credential-cache.c:46:11\n#7 0x55555562a89e in do_cache ../builtin/credential-cache.c:108:6\n#8 0x55555562a655 in cmd_credential_cache ../builtin/credential-cache.c:178:3\n#9 0x555555700547 in run_builtin ../git.c:480:11\n#10 0x5555556ff0e0 in handle_builtin ../git.c:740:9\n#11 0x5555556ffee8 in run_argv ../git.c:807:4\n#12 0x5555556fee6b in cmd_main ../git.c:947:19\n#13 0x55555593f689 in main ../common-main.c:64:11\n#14 0x7ffff7a2a1fb in __libc_start_call_main (/nix/store/h7zcxabfxa7v5xdna45y2hplj31ncf8a-glibc-2.40-36/lib/libc.so.6+0x2a1fb) (BuildId: 0a855678aa0cb573cecbb2bcc73ab8239ec472d0)\n#15 0x7ffff7a2a2b8 in __libc_start_main@GLIBC_2.2.5 (/nix/store/h7zcxabfxa7v5xdna45y2hplj31ncf8a-glibc-2.40-36/lib/libc.so.6+0x2a2b8) (BuildId: 0a855678aa0cb573cecbb2bcc73ab8239ec472d0)\n#16 0x5555555ad1d4 in _start (git+0x591d4)\n\nDEDUP_TOKEN: ___interceptor_realloc.part.0--xrealloc--strbuf_grow--strbuf_getcwd--unix_sockaddr_init--unix_stream_connect--send_request--do_cache--cmd_credential_cache--run_builtin--handle_builtin--run_argv--cmd_main--main--__libc_start_call_main--__libc_start_main@GLIBC_2.2.5--_start\nSUMMARY: LeakSanitizer: 129 byte(s) leaked in 1 allocation(s).\n\nFix this leak.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c6d896bcfde1cfb626c8bc25c71d00662ef7f22c [label=c6d896b color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nWed Feb 05 01:41:46 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 18:32:01 2025 -0800\n\nrev-list: add print-info action to print missing object path\n\nMissing objects identified through git-rev-list(1) can be printed by\nsetting the `--missing=print` option. Additional information about the\nmissing object, such as its path and type, may be present in its\ncontaining object.\n\nAdd the `print-info` missing action for the `--missing` option that,\nwhen set, prints additional insight about the missing object inferred\nfrom its containing object. Each line of output for a missing object is\nin the form: `?<oid> [<token>=<value>]...`. The `<token>=<value>` pairs\ncontaining additional information are separated from each other by a SP.\nThe value is encoded in a token specific fashion, but SP or LF contained\nin value are always expected to be represented in such a way that the\nresulting encoded value does not have either of these two problematic\nbytes. This format is kept generic so it can be extended in the future\nto support additional information.\n\nFor now, only a missing object path info is implemented. It follows the\nform `path=<path>` and specifies the full path to the object from the\ntop-level tree. A path containing SP or special characters is enclosed\nin double-quotes in the C style as needed. In a subsequent commit,\nmissing object type info will also be added.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nAcked-by: Christian Couder <christian.couder@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c7acdd02db4782c56c49d6e87c4037c4073fcf92 [label=c7acdd0 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:24 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:25 2025 -0800\n\nMerge branch \'ps/object-wo-the-repository\' into jch\n\nThe object layer has been updated to take an explicit repository\ninstance as a parameter in more code paths.\n\nLooking good.\n\n* ps/object-wo-the-repository:\nhash: stop depending on `the_repository` in `null_oid()`\nhash: fix \"-Wsign-compare\" warnings\nobject-file: split out logic regarding hash algorithms\ndelta-islands: stop depending on `the_repository`\nobject-file-convert: stop depending on `the_repository`\npack-bitmap-write: stop depending on `the_repository`\npack-revindex: stop depending on `the_repository`\npack-check: stop depending on `the_repository`\nenvironment: move access to \"core.bigFileThreshold\" into repo settings\npack-write: stop depending on `the_repository` and `the_hash_algo`\nobject: stop depending on `the_repository`\ncsum-file: stop depending on `the_repository`"]
	c7c317a06fc6b667a0f3458473faf2a2fb45fde8 [label=c7c317a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:00 2025 -0800\n\nMerge branch 'ps/build-meson-fixes' into next\n\nMore build fixes and enhancements on meson based build procedure.\n\n* ps/build-meson-fixes:\nci: wire up Visual Studio build with Meson\nci: raise error when Meson generates warnings\nmeson: fix compilation with Visual Studio\nmeson: make the CSPRNG backend configurable\nmeson: wire up fuzzers\nmeson: wire up generation of distribution archive\nmeson: wire up development environments\nmeson: fix dependencies for generated headers\nmeson: populate project version via GIT-VERSION-GEN\nGIT-VERSION-GEN: allow running without input and output files\nGIT-VERSION-GEN: simplify computing the dirty marker"]
	c84209a8fda86dd1c7647f52bf0fd6eb8aaaaad2 [label=c84209a color=gold3 fillcolor=gold3 tooltip="author: David Mandelberg <david@mandelberg.org>\nSun Mar 02 21:54:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:39:47 2025 -0800\n\neditorconfig: add .bash extension\n\nBoth files in the command below appear to be indented with tabs, and I'd\nexpect .bash files to have roughly the same style as .sh files.\n\n$ find . -name \\*.bash\n./contrib/completion/git-completion.bash\n./ci/check-directional-formatting.bash\n\nSigned-off-by: David Mandelberg <david@mandelberg.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c869f76c1da498c41f2eeb3e553b9d46495ea300 [label=c869f76 color=gold3 fillcolor=gold3 tooltip="author: Luke Shumaker <lukeshu@datawire.io>\nMon Feb 24 15:27:43 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:26 2025 -0800\n\nfast-export: do not modify memory from get_commit_buffer\n\nfast-export\'s helper function find_encoding() takes a `const char *`, but\nmodifies that memory despite the `const`.  Ultimately, this memory came\nfrom get_commit_buffer(), and you\'re not supposed to modify the memory\nthat you get from get_commit_buffer().\n\nSo, get rid of find_encoding() in favor of commit.h:find_commit_header(),\nwhich gives back a string length, rather than mutating the memory to\ninsert a \'\\0\' terminator.\n\nBecause find_commit_header() detects the \"\\n\\n\" string that separates the\nheaders and the commit message, move the call to be above the\n`message = strstr(..., \"\\n\\n\")` call.  This helps readability, and allows\nfor the value of `encoding` to be used for a better value of \"...\" so that\nthe same memory doesn\'t need to be checked twice.  Introduce a\n`commit_buffer_cursor` variable to avoid writing an awkward\n`encoding ? encoding + encoding_len : committer_end` expression.\n\nSigned-off-by: Luke Shumaker <lukeshu@datawire.io>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c8a8e04099a99d6eafbe6e9bb1db3b50996836f8 [label=c8a8e04 color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nFri Feb 28 22:33:44 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:17:47 2025 -0800\n\ndiff: add option to skip resolving diff statuses\n\nBy default, `diffcore_std()` resolves the statuses for queued diff file\npairs by calling `diff_resolve_rename_copy()`. If status information is\nalready manually set, invoking `diffcore_std()` may change the status\nvalue.\n\nIntroduce the `skip_resolving_statuses` diff option that prevents\n`diffcore_std()` from resolving file pair statuses when enabled.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	c92e7e156e6b406e7555fb5df058d18758a0b3f0 [label=c92e7e1 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:06:49 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:08 2025 -0800\n\npacked-backend: add \"packed-refs\" header consistency check\n\nIn \"packed-backend.c::create_snapshot\", if there is a header (the line\nwhich starts with \'#\'), we will check whether the line starts with \"#\npack-refs with: \". However, we need to consider other situations and\ndiscuss whether we need to add checks.\n\n1. If the header does not exist, we should not report an error to the\nuser. This is because in older Git version, we never write header in\nthe \"packed-refs\" file. Also, we do allow no header in \"packed-refs\"\nin runtime.\n2. If the header content does not start with \"# packed-ref with: \", we\nshould report an error just like what \"create_snapshot\" does. So,\ncreate a new fsck message \"badPackedRefHeader(ERROR)\" for this.\n3. If the header content is not the same as the constant string\n\"PACKED_REFS_HEADER\". This is expected because we make it extensible\nintentionally and runtime \"create_snapshot\" won\'t complain about\nunknown traits. In order to align with the runtime behavior. There is\nno need to report.\n\nAs we have analyzed, we only need to check the case 2 in the above. In\norder to do this, use \"open_nofollow\" function to get the file\ndescriptor and then read the \"packed-refs\" file via \"strbuf_read\". Like\nwhat \"create_snapshot\" and other functions do, we could split the line\nby finding the next newline in the buffer. When we cannot find a\nnewline, we could report an error.\n\nSo, create a function \"packed_fsck_ref_next_line\" to find the next\nnewline and if there is no such newline, use\n\"packedRefEntryNotTerminated(ERROR)\" to report an error to the user.\n\nThen, parse the first line to apply the checks. Update the test to\nexercise the code.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ca1e4435de9266b87cadd5e2d6851dfaab2c8f5a [label=ca1e443 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:18 2025 -0800\n\nMerge branch 'jk/use-wunreachable-code-for-devs' into jch\n\n* jk/use-wunreachable-code-for-devs:\nconfig.mak.dev: enable -Wunreachable-code"]
	ca39da6997dbc4eb295219d7764fd68ecd80361e [label=ca39da6 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:02 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:03 2025 -0800\n\nMerge branch \'ps/meson-contrib-bits\'\n\nUpdate meson-based build procedure to cover contrib/ and other\nplaces as well.\n\n* ps/meson-contrib-bits:\nci: exercise credential helpers\nci: fix propagating UTF-8 test locale in musl-based Meson job\nmeson: wire up static analysis via Coccinelle\nmeson: wire up git-contacts(1)\nmeson: wire up credential helpers\ncontrib/credential: fix compilation of \"osxkeychain\" helper\ncontrib/credential: fix compiling \"libsecret\" helper\ncontrib/credential: fix compilation of wincred helper with MSVC\ncontrib/credential: fix \"netrc\" tests with out-of-tree builds\nGIT-BUILD-OPTIONS: propagate project\'s source directory"]
	ca3abe41d71c4789ca00cba0ca2b6c22d67f08a3 [label=ca3abe4 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:44:21 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:24 2025 -0800\n\nrun_diff_files(): de-mystify the size of combine_diff_path struct\n\nWe allocate a combine_diff_path struct with space for 5 parents. Why 5?\n\nThe history is not particularly enlightening. The allocation comes from\nb4b1550315 (Don\'t instantiate structures with FAMs., 2006-06-18), which\njust switched to xmalloc from a stack struct with 5 elements. That\nstruct changed to 5 from 4 in 2454c962fb (combine-diff: show mode\nchanges as well., 2006-02-06), when we also moved from storing raw sha1\nbytes to the combine_diff_parent struct. But no explanation is given.\nThat 4 comes from the earliest code in ea726d02e9 (diff-files: -c and\n--cc options., 2006-01-28).\n\nOne might guess it is for the 4 stages we can store in the index. But\nthis code path only ever diffs the current state against stages 2 and 3.\nSo we only need two slots.\n\nAnd it\'s easy to see this is still the case. We fill the parent slots by\nsubtracting 2 from the ce_stage() values, ignoring values below 2. And\nsince ce_stage() is only 2 bits, there are 4 values, and thus we need 2\nslots.\n\nLet\'s use the correct value (saving a tiny bit of memory) and add a\ncomment explaining what\'s going on (saving a tiny bit of programmer\nbrain power).\n\nArguably we could use:\n\n1 + (STAGEMASK >> STAGESHIFT) - 2\n\nwhich lets the compiler enforce that we will not go out-of-bounds if we\nsee an unexpected value from ce_stage(). But that is more confusing to\nexplain, and the constant \"2\" is baked into other parts of the function.\nIt is a fundamental constant, not something where somebody might bump a\nmacro and forget to update this code.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ca7158076f9f6e0ee1c84595aaf44194a9880a72 [label=ca71580 color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nTue Jan 07 17:29:15 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 18:22:25 2025 -0800\n\nfsck: reject misconfigured fsck.skipList\n\nIn Git, fsck operations can ignore known broken objects via the\n`fsck.skipList` configuration. This option expects a path to a file with\nthe list of object names. When the configuration is specified without a\npath, an error message is printed, but the command continues as if the\nconfiguration was not set. Configuring `fsck.skipList` without a value\nis a misconfiguration so config parsing should be more strict and reject\nit.\n\nUpdate `git_fsck_config()` to no longer ignore misconfiguration of\n`fsck.skipList`. The same behavior is also present for\n`fetch.fsck.skipList` and `receive.fsck.skipList` so the configuration\nparsers for these are updated to ensure the related operations remain\nconsistent.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ca9d60f2460c296b32b3da97eb953bbc4d292197 [label=ca9d60f color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nMon Dec 30 05:26:10 2024 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:18:57 2024 -0800\n\nRevert \"index-pack: spawn threads atomically\"\n\nThis reverts commit 993d38a0669a8056d496797516e743e26b6b8b54.\n\nThat commit was trying to solve a race between LSan setting up the\nthreads stack and another thread calling exit(), by making sure that all\npthread_create() calls have finished before doing any work that might\ntrigger the exit().\n\nBut that isn\'t sufficient. The setup code actually runs in the\nindividual threads themselves, not in the spawning thread\'s call to\npthread_create(). So while it may have improved the race a bit, you can\nstill trigger it pretty quickly with:\n\nmake SANITIZE=leak\ncd t\n./t5309-pack-delta-cycles.sh --stress\n\nLet\'s back out that failed attempt so we can try again.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cade724b527d753def6b2cd169df62ef03bdbfe2 [label=cade724 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:28 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:28 2024 -0800\n\nMerge branch 'ps/weak-sha1-for-tail-sum-fix' into ps/meson-weak-sha1-build\n\n* ps/weak-sha1-for-tail-sum-fix:\nci: exercise unsafe OpenSSL backend\nbuiltin/fast-import: fix segfault with unsafe SHA1 backend\nbulk-checkin: fix segfault with unsafe SHA1 backend"]
	caf17423d375e97919ace904cd527b4d26cc3e43 [label=caf1742 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:32 2025 -0800\n\nMerge branch 'tb/unsafe-hash-cleanup'\n\nThe API around choosing to use unsafe variant of SHA-1\nimplementation has been updated in an attempt to make it harder to\nabuse.\n\n* tb/unsafe-hash-cleanup:\nhash.h: drop unsafe_ function variants\ncsum-file: introduce hashfile_checkpoint_init()\nt/helper/test-hash.c: use unsafe_hash_algo()\ncsum-file.c: use unsafe_hash_algo()\nhash.h: introduce `unsafe_hash_algo()`\ncsum-file.c: extract algop from hashfile_checksum_valid()\ncsum-file: store the hash algorithm as a struct field\nt/helper/test-tool: implement sha1-unsafe helper"]
	cb0ae672aeabefca9704477ea8018ac94f523970 [label=cb0ae67 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:22:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:23:01 2025 -0800\n\nA bit more post -rc0\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cb3e368b6913a2446f245e7ae7a7e4ae4a2e6794 [label=cb3e368 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:37 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:35 2025 -0800\n\nreftable/stack: stop using `read_in_full()`\n\nThere is a single callsite of `read_in_full()` in the reftable library.\nOpen-code the function to reduce our dependency on the Git library.\n\nNote that we only partially port over the logic from `read_in_full()`\nand its underlying `xread()` helper. Most importantly, the latter also\nknows to handle `EWOULDBLOCK` via `handle_nonblock()`. This logic is\nirrelevant for us though because the reftable library never sets the\n`O_NONBLOCK` option in the first place.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cb441e1ec3f3cf475d9037a4ce74e8fccd6be7d8 [label=cb441e1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:53 2025 -0800\n\nMerge branch \'ps/reftable-get-random-fix\'\n\nThe code to compute \"unique\" name used git_rand() which can fail or\nget stuck; the callsite does not require cryptographic security.\nIntroduce the \"insecure\" mode and use it appropriately.\n\n* ps/reftable-get-random-fix:\nreftable/stack: accept insecure random bytes\nwrapper: allow generating insecure random bytes"]
	cbcc2f79117ded0161b012dc5107f181b5d87b09 [label=cbcc2f7 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 13:10:18 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:17:19 2024 -0800\n\nGIT-BUILD-OPTIONS: wire up NO_GITWEB option\n\nBuilding our \"gitweb\" interface is optional in our Makefile and in Meson\nand not wired up at all with CMake, but disabling it causes a couple of\ntests in the t950* range that pull in \"t/lib-gitweb.sh\". This is because\nthe test library knows to execute gitweb-tests based on whether or not\nPerl is available, but we may have Perl available and still end up not\nbuilding gitweb e.g. with `make test NO_GITWEB=YesPlease`.\n\nFix this issue by wiring up a new \"NO_GITWEB\" build option so that we\ncan skip these tests in case gitweb is not built.\n\nNote that this new build option requires us to move the configuration of\nGIT-BUILD-OPTIONS to a later point in our Meson build instructions. But\nas that file is only consumed by our tests at runtime this change does\nnot cause any issues.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cce5ed7397fb35440002d8bfbdc11f0999ddd8ba [label=cce5ed7 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 21:07:35 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 21:07:35 2025 -0800\n\nMerge branch 'sj/meson-perl-build-fix' into next\n\n* sj/meson-perl-build-fix:\nmeson: fix perl dependencies"]
	cd96b0ac826c35f0ec819a7e522a0ae27b38e18f [label=cd96b0a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:05:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 21:05:52 2025 -0800\n\nMerge branch 'mb/t7110-use-test-path-helper' into next\n\nTest modernization.\n\n* mb/t7110-use-test-path-helper:\nt7110: replace `test -f` with `test_path_is_*` helpers"]
	cdf458c60eaaced338990f2aad96341a05836236 [label=cdf458c color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\n\nMerge branch \'kn/ref-migrate-skip-reflog\'\n\nUsage string of \"git refs\" has been corrected.\n\n* kn/ref-migrate-skip-reflog:\nrefs: show --no-reflog in the help text"]
	cdfd081df6fa42e6cd0da1d978d41b836c1f292b [label=cdfd081 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:48 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 18:05:12 2025 -0800\n\nversion: refactor redact_non_printables()\n\nThe git_user_agent_sanitized() function performs some sanitizing to\navoid special characters being sent over the line and possibly messing\nup with the protocol or with the parsing on the other side.\n\nLet's extract this sanitizing into a new redact_non_printables() function,\nas we will want to reuse it in a following patch.\n\nFor now the new redact_non_printables() function is still static as\nit's only needed locally.\n\nWhile at it, let's use strbuf_detach() to explicitly detach the string\ncontained by the 'buf' strbuf.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ce9432889c4720345e4e1985db1b18db6add64ce [label=ce94328 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:13 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:35 2025 -0800\n\nmeson: inline the static 'git' library\n\nWhen setting up `libgit.a` we first create the static library itself,\nand then declare it as part of a dependency such that compile arguments,\ninclude directories and transitive dependencies get propagated to the\nusers of that library. As such, the static library isn't expected to be\nused by anything but the declared dependency.\n\nInline the static library so that we don't even use a separate variable\nfor it. This avoids any kind of confusion that may arise and clarifies\nhow the library is supposed to be used.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ce961135ccf5bc008b8160404cc7c995789b942e [label=ce96113 color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:31 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:43 2025 -0800\n\npack-objects: add GIT_TEST_NAME_HASH_VERSION\n\nAdd a new environment variable to opt-in to different values of the\n--name-hash-version=<n> option in 'git pack-objects'. This allows for\nextra testing of the feature without repeating all of the test\nscenarios. Unlike many GIT_TEST_* variables, we are choosing to not add\nthis to the linux-TEST-vars CI build as that test run is already\noverloaded. The behavior exposed by this test variable is of low risk\nand should be sufficient to allow manual testing when an issue arises.\n\nBut this option isn't free. There are a few tests that change behavior\nwith the variable enabled.\n\nFirst, there are a few tests that are very sensitive to certain delta\nbases being picked. These are both involving the generation of thin\nbundles and then counting their objects via 'git index-pack --fix-thin'\nwhich pulls the delta base into the new packfile. For these tests,\ndisable the option as a decent long-term option.\n\nSecond, there are some tests that compare the exact output of a 'git\npack-objects' process when using bitmaps. The warning that ignores the\n--name-hash-version=2 and forces version 1 causes these tests to fail.\nDisable the environment variable to get around this issue.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ce9886320447440ab5dc8011072ecf331fd77c6a [label=ce98863 color=gold3 fillcolor=gold3 tooltip="author: D. Ben Knoble <ben.knoble+github@gmail.com>\nMon Feb 24 20:26:02 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:24:16 2025 -0800\n\nt/aggregate-results: fix paste(1) invocation\n\nWhen running `make test`, when missing prereqs the following is emitted:\n\nmake aggregate-results\nusage: paste [-s] [-d delimiters] file ...\nfixed   1\nsuccess 30066\nfailed  0\nbroken  218\ntotal   31274\n\nPOSIX says that `paste` requires a file operand; stdin was clearly\nintended by 49da404070 (test-lib: show missing prereq summary,\n2021-11-20). Use it.\n\nSigned-off-by: D. Ben Knoble <ben.knoble+github@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cef3d4a89f8d21fae6669822cbb540927020d93b [label=cef3d4a color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nFri Dec 27 11:53:45 2024 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:13:59 2024 -0800\n\nt7611: replace test -f with test_path_is* helpers\n\nReplace `test -f` and `test ! -f` with `test_path_is_file` and\n`test_path_is_missing` for better debuggability.\n\nWhile `test -f` ensures that the file exists and is a regular file,\n`test_path_is_file` provides clearer error messages on failure.\n\nOn the other hand, `test ! -f` checks either the absence of a regular\nfile or the presence of any other filesystem object, but looking at\nthem in the test individually, all of them should\'ve said `test ! -e`,\ni.e. \"there shouldn\'t be anything at given path on filesystem.\"\n\nReplace these cases with `test_path_is_missing` for better\ndebuggability.\n\nHelped-by: karthik nayak <karthik.188@gmail.com>\nHelped-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cf15095ec52f1e997ec9eef42bdf275d2a68fe66 [label=cf15095 color=gold3 fillcolor=gold3 tooltip="author: Justin Tobler <jltobler@gmail.com>\nFri Feb 28 22:33:46 2025 -0600\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:17:47 2025 -0800\n\nbuiltin/diff-pairs: allow explicit diff queue flush\n\nThe diffs queued from git-diff-pairs(1) are flushed when stdin is\nclosed. To enable greater flexibility, allow control over when the diff\nqueue is flushed by writing a single NUL byte on stdin between input\nfile pairs. Diff output between flushes is separated by a single NUL\nbyte.\n\nSigned-off-by: Justin Tobler <jltobler@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cf5b8276dcfdad44f02c082a934be5589ff14586 [label=cf5b827 color=gold3 fillcolor=gold3 tooltip="author: M Hickford <mirth.hickford@gmail.com>\nFri Jan 10 23:54:36 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Jan 11 00:10:00 2025 -0800\n\ndocs: list popular credential helpers\n\ngit-credential-store saves credentials unencrypted on disk. It is the\nleast secure choice of credential helper. Nevertheless, it appears\nseveral times more popular than any other credential helper [1].\n\nInform users about more secure alternatives.\n\n[1] https://stackoverflow.com/questions/35942754/how-can-i-save-username-and-password-in-git\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cf7ee481902df64b26ac8b1741eca861a8d2f7cc [label=cf7ee48 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Feb 15 16:50:52 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:48:37 2025 -0800\n\nagent: advertise OS name via agent capability\n\nAs some issues that can happen with a Git client can be operating system\nspecific, it can be useful for a server to know which OS a client is\nusing. In the same way it can be useful for a client to know which OS\na server is using.\n\nOur current agent capability is in the form of \"package/version\" (e.g.,\n\"git/1.8.3.1\"). Let\'s extend it to include the operating system name (os)\ni.e in the form \"package/version-os\" (e.g., \"git/1.8.3.1-Linux\").\n\nIncluding OS details in the agent capability simplifies implementation,\nmaintains backward compatibility, avoids introducing a new capability,\nencourages adoption across Git-compatible software, and enhances\ndebugging by providing complete environment information without affecting\nfunctionality. The operating system name is retrieved using the \'sysname\'\nfield of the `uname(2)` system call or its equivalent.\n\nHowever, there are differences between `uname(1)` (command-line utility)\nand `uname(2)` (system call) outputs on Windows. These discrepancies\ncomplicate testing on Windows platforms. For example:\n- `uname(1)` output: MINGW64_NT-10.0-20348.3.4.10-87d57229.x86_64\\\n.2024-02-14.20:17.UTC.x86_64\n- `uname(2)` output: Windows.10.0.20348\n\nOn Windows, uname(2) is not actually system-supplied but is instead\nalready faked up by Git itself. We could have overcome the test issue\non Windows by implementing a new `uname` subcommand in `test-tool`\nusing uname(2), but except uname(2), which would be tested against\nitself, there would be nothing platform specific, so it\'s just simpler\nto disable the tests on Windows.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cf8ba1cde5a673dd7f2354ddd2148f31e4c4e033 [label=cf8ba1c color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:30 2025 -0800\n\nMerge branch \'dk/test-aggregate-results-paste-fix\' into next\n\nThe use of \"paste\" command for aggregating the test results have\nbeen corrected.\n\n* dk/test-aggregate-results-paste-fix:\nt/aggregate-results: fix paste(1) invocation"]
	cfa1f2ae96f4c6bcc0d3acdbd9a2734a8f33a351 [label=cfa1f2a color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 13:10:17 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:17:19 2024 -0800\n\nGIT-BUILD-OPTIONS: sort variables alphabetically\n\nThe variables declared and substituted in GIT-BUILD-OPTIONS are not\nordered in any obvious way. Sort them alphabetically so that it becomes\nobvious where new variables should go.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cfae50e40eb72d6116ad56c616b3322474df4a75 [label=cfae50e color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 06 10:24:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 16:57:17 2025 -0800\n\nobject-file: don't special-case missing source file in collision check\n\nIn 0ad3d65652 (object-file: fix race in object collision check,\n2024-12-30) we have started to ignore ENOENT when opening either the\nsource or destination file of the collision check. This was done to\nhandle races more gracefully in case either of the potentially-colliding\ndisappears.\n\nThe fix is overly broad though: while the destination file may indeed\nvanish racily, this shouldn't ever happen for the source file, which is\na temporary object file (either loose or in packfile format) that we\nhave just created. So if any concurrent process would have removed that\ntemporary file it would indicate an actual issue.\n\nStop treating ENOENT specially for the source file so that we always\nbubble up this error.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	cfea2f2da8d418edd7984e5b5073825834099a27 [label=cfea2f2 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:06:24 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:07 2025 -0800\n\npacked-backend: check whether the \"packed-refs\" is regular file\n\nAlthough \"git-fsck(1)\" and \"packed-backend.c\" will check some\nconsistency and correctness of \"packed-refs\" file, they never check the\nfiletype of the \"packed-refs\". Let\'s verify that the \"packed-refs\" has\nthe expected filetype, confirming it is created by \"git pack-refs\"\ncommand.\n\nWe could use \"open_nofollow\" wrapper to open the raw \"packed-refs\" file.\nIf the returned \"fd\" value is less than 0, we could check whether the\n\"errno\" is \"ELOOP\" to report an error to the user. And then we use\n\"fstat\" to check whether the \"packed-refs\" file is a regular file.\n\nReuse \"FSCK_MSG_BAD_REF_FILETYPE\" fsck message id to report the error to\nthe user if \"packed-refs\" is not a regular file.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d02c37c3e6baf1515e7d1372afa5941b9518ca5b [label=d02c37c color=gold3 fillcolor=gold3 tooltip="author: Johannes Schindelin <johannes.schindelin@gmx.de>\nWed Jan 08 17:00:05 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 18:41:52 2025 -0800\n\nt-reftable-basics: allow for `malloc` to be `#define`d\n\nAs indicated by the `#undef malloc` line in `reftable/basics.h`, it is\nquite common to use allocators other than the default one by defining\n`malloc` constants and friends.\n\nThis pattern is used e.g. in Git for Windows, which uses the powerful\nand performant `mimalloc` allocator.\n\nFurthermore, in `reftable/basics.c` this `#undef malloc` is\n_specifically_ disabled by virtue of defining the\n`REFTABLE_ALLOW_BANNED_ALLOCATORS` constant before including\n`reftable/basic.h`, to ensure that such a custom allocator is also used\nin the reftable code.\n\nHowever, in 8db127d43f5b (reftable: avoid leaks on realloc error,\n2024-12-28) and in 2cca185e8517 (reftable: fix allocation count on\nrealloc error, 2024-12-28), `reftable_set_alloc()` function calls were\nintroduced that pass `malloc`, `realloc` and `free` function pointers as\nparameters _after_ `reftable/basics.h` ensured that they were no longer\n`#define`d. This would override the custom allocator and re-set it to\nthe default allocator provided by, say, libc or MSVCRT.\n\nThis causes problems because those calls happen after the initial\nallocator has already been used to initialize an array, which is\nsubsequently resized using the overridden default `realloc()` allocator.\n\nYou cannot mix and match allocators like that, which leads to a\n`STATUS_HEAP_CORRUPTION` (C0000374) on Windows, and when running this\nunit test through shell and/or `prove` (which only support 7-bit status\ncodes), it surfaces as exit code 127.\n\nIt is actually unnecessary to use those function pointers to\n`malloc`/`realloc`/`free`, though: The `reftable` code goes out of its\nway to fall back to the initial allocator when passing `NULL` parameters\ninstead. So let's do that instead of causing heap corruptions.\n\nSigned-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>\nAcked-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d02f3c8a9c26bae5436580124cbd175cff4a56d1 [label=d02f3c8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 17:15:48 2025 -0800\n\nMerge branch 'ja/doc-notes-markup-updates' into next\n\nDoc mark-up updates.\n\n* ja/doc-notes-markup-updates:\ndoc: convert git-notes to new documentation format"]
	d062ccf4c3af1e5153ed5064d4d05b05e0fdd4d5 [label=d062ccf color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:20:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:15 2025 -0800\n\nA bit more post Git 2.48-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d08b30fd7886b87dcf8fcd58d3ab1b1eb135af9c [label=d08b30f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:14 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 22:46:15 2025 -0800\n\nMerge branch \'jt/fsck-skiplist-parse-fix\' into next\n\nA misconfigured \"fsck.skiplist\" configuration variable was not\ndiagnosed as an error, which has been corrected.\n\n* jt/fsck-skiplist-parse-fix:\nfsck: reject misconfigured fsck.skipList"]
	d11d003ba5e98c036fb94204df6dcef28aafe2f8 [label=d11d003 color=gold3 fillcolor=gold3 tooltip="author: Sören Krecker <soekkle@freenet.de>\nMon Dec 23 12:04:05 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Dec 26 22:34:28 2024 -0800\n\ndate.c: Fix type missmatch warings from msvc\n\nFix compiler warings from msvc in date.c for value truncation from 64\nbit to 32 bit integers.\n\nAlso switch from int to size_t for all variables with result of strlen()\nwhich cannot become negative.\n\nSigned-off-by: Sören Krecker <soekkle@freenet.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d138188f984f79202e08697c5ada0c394d3ad697 [label=d138188 color=gold3 fillcolor=gold3 tooltip="author: Eric Ju <eric.peijian@gmail.com>\nFri Feb 21 20:04:44 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 21:27:10 2025 -0800\n\nt1006: split test utility functions into new \"lib-cat-file.sh\"\n\nThis refactor extracts utility functions from the cat-file\'s test\nscript \"t1006-cat-file.sh\" into a new \"lib-cat-file.sh\" dedicated\nlibrary file. The goal is to improve code reuse and readability,\nenabling future tests to leverage these utilities without duplicating\ncode.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d13b5baf06b301c3b4297930003759edc1f2edc9 [label=d13b5ba color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 00:45:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 00:45:07 2025 -0800\n\nMerge branch 'bc/contrib-thunderbird-patch-inline-fix' into next\n\nA thunderbird helper script lost its bashism.\n\n* bc/contrib-thunderbird-patch-inline-fix:\nthunderbird-patch-inline: avoid bashism"]
	d1e8f30d0d36c6c806dffb4747c282590e69edd0 [label=d1e8f30 color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nFri Mar 07 16:48:41 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:51:01 2025 -0800\n\nmerge-ort: allow rename detection to be disabled\n\nWhen merge-ort was written, I did not at first allow rename detection to\nbe disabled, because I suspected that most folks disabling rename\ndetection were doing so solely for performance reasons.  Since I put a\nlot of working into providing dramatic speedups for rename detection\nperformance as used by the merge machinery, I wanted to know if there\nwere still real world repositories where rename detection was\nproblematic from a performance perspective.  We have had years now to\ncollect such information, and while we never received one, waiting\nlonger with the option disabled seems unlikely to help surface such\nissues at this point.  Also, there has been at least one request to\nallow rename detection to be disabled for behavioral rather than\nperformance reasons, so let's start heeding the config and command line\nsettings.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d205f06ae07928b0c8b74930d76927a7e9b04781 [label=d205f06 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:10 2025 -0800\n\nMerge branch 'kn/reflog-symref-fix'\n\nreflog entries for symbolic ref updates were broken, which has been\ncorrected.\n\n* kn/reflog-symref-fix:\nrefs: fix creation of reflog entries for symrefs"]
	d2521b5b2190845117d8aa901d598f5f96d12f26 [label=d2521b5 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:18:58 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:33 2025 -0800\n\npack-check: stop depending on `the_repository`\n\nThere are multiple sites in \"pack-check.c\" where we use the global\n`the_repository` variable, either explicitly or implicitly by using\n`the_hash_algo`. In all of those cases we already have a repository\navailable in the calling context though.\n\nRefactor the code to instead use the caller-provided repository and\nremove the `USE_THE_REPOSITORY_VARIABLE` define.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d2c0b6a86cb0f1a73d9ad5fcffda45497cd7ad42 [label=d2c0b6a color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:09 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:49 2024 -0800\n\nmeson: wire up unsafe SHA1 backend\n\nIn 06c92dafb8 (Makefile: allow specifying a SHA-1 for non-cryptographic\nuses, 2024-09-26), we have introduced a cryptographically-insecure\nbackend for SHA1 that can optionally be used in some contexts where the\nprocessed data is not security relevant. This effort was in-flight with\nthe effort to introduce Meson, so we don't have an equivalent here.\n\nWire up a new build option that lets users pick an unsafe SHA1 backend.\n\nNote that for simplicity's sake we have to drop the error condition\naround an unhandled SHA1 backend. This should be fine though given that\nMeson verifies the value for combo-options for us.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d3603152ad074a50ed6022133a71b91a16cc7baf [label=d360315 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:23:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:23:47 2025 -0800\n\nmergetag object fbe8d3079d4a96aeb4e4529cc93cc0043b759a05\ntype commit\ntag v2.48.0\ntagger Junio C Hamano <gitster@pobox.com> 1736529628 -0800\n\nGit 2.48\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmeBVtwACgkQsLXohpav\n5ssbmBAAyud8ydZoSKpKVVaU02oiN9gVLudKSw3PmIz1gITdroMtO5jXwpNXoxHU\nknsl1v+TG38cqBnAj7rpoOx3yuaTWmWBRk5zrN2IVdSllBh8eHDoqcIRVO1BnV7N\nMryzvi1RTc2a5wXJ2ffG8pffpayJC6vq4ChxOb9uvHOcRL/IR61jFQfQFo9LPL8V\nqX5oPjclxRJDqJ437tDg6Le1sh2V3AxA75j52hBZwINOBgvrdyCNKbjL97h9bLXd\nPdhqLI4z6wjROp+WzyaZv+bDVFqkQxzCmLZlfvMF0AtNSO8vw/xurIb5vBpvxEJo\nD9XecLxCHP597xVvp3wnMAZ95bcNoo9IUZEm3u9z0asX2CjwNJMz6MUuWgF30dyL\npDxtptSJFch4xUBQZQOGYS1o59tqJeKn4MIqbrULREeYfbq8BCuVNFIvzkTjbv9O\nS2Vwe2doCJjcFn//dVtfzaugKIl19IWpWpz47nzHy3vCE1ggXMQiBZ2V/EW8Y8ps\nKPoEWpgggK8snZXuWj/kgkKSE10PNwlk83uYpzKaayyhjC+6f89Sk0cBRBSM9GC2\necvuJ2iqavrS0w/NXPXSNAXFFxlxejdlCR43x/IdCnfPbw+ba8wi1MqJHKbkcgZ8\nfaxbM0hA5Wo2IFxDi6/3xtnM+vUjDg5qKYsrjYBvWua7kdjE+GQ=\n=9u46\n-----END PGP SIGNATURE-----\nSync with Git 2.48"]
	d3f24d3204fbb2f1912b6f835462db82fff33c18 [label=d3f24d3 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Mar 07 15:19:03 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:29:34 2025 -0800\n\nobject-file: split out logic regarding hash algorithms\n\nWhile we have a \"hash.h\" header, the actual implementation of the\nsubsystem is hosted by \"object-file.c\". This makes it harder than\nnecessary to find the actual implementation of the hash subsystem and\nintermingles the different concerns with one another.\n\nSplit out the implementation of hash algorithms into a new, separate\n\"hash.c\" file.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d40da0bd4b3c9c591fe36d4772d44209fbd70504 [label=d40da0b color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:02 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:19 2025 -0800\n\nMakefile: update reference to technical/racy-git.adoc\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d460267613da14eba959eb225e2cbf6a1e132eb1 [label=d460267 color=gold3 fillcolor=gold3 tooltip="author: Christian Couder <christian.couder@gmail.com>\nTue Feb 18 12:32:02 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:05:37 2025 -0800\n\nAdd \'promisor-remote\' capability to protocol v2\n\nWhen a server S knows that some objects from a repository are available\nfrom a promisor remote X, S might want to suggest to a client C cloning\nor fetching the repo from S that C may use X directly instead of S for\nthese objects.\n\nNote that this could happen both in the case S itself doesn\'t have the\nobjects and borrows them from X, and in the case S has the objects but\nknows that X is better connected to the world (e.g., it is in a\n$LARGEINTERNETCOMPANY datacenter with petabit/s backbone connections)\nthan S. Implementation of the latter case, which would require S to\nomit in its response the objects available on X, is left for future\nimprovement though.\n\nThen C might or might not, want to get the objects from X. If S and C\ncan agree on C using X directly, S can then omit objects that can be\nobtained from X when answering C\'s request.\n\nTo allow S and C to agree and let each other know about C using X or\nnot, let\'s introduce a new \"promisor-remote\" capability in the\nprotocol v2, as well as a few new configuration variables:\n\n- \"promisor.advertise\" on the server side, and:\n- \"promisor.acceptFromServer\" on the client side.\n\nBy default, or if \"promisor.advertise\" is set to \'false\', a server S will\nnot advertise the \"promisor-remote\" capability.\n\nIf S doesn\'t advertise the \"promisor-remote\" capability, then a client C\nreplying to S shouldn\'t advertise the \"promisor-remote\" capability\neither.\n\nIf \"promisor.advertise\" is set to \'true\', S will advertise its promisor\nremotes with a string like:\n\npromisor-remote=<pr-info>[;<pr-info>]...\n\nwhere each <pr-info> element contains information about a single\npromisor remote in the form:\n\nname=<pr-name>[,url=<pr-url>]\n\nwhere <pr-name> is the urlencoded name of a promisor remote and\n<pr-url> is the urlencoded URL of the promisor remote named <pr-name>.\n\nFor now, the URL is passed in addition to the name. In the future, it\nmight be possible to pass other information like a filter-spec that the\nclient may use when cloning from S, or a token that the client may use\nwhen retrieving objects from X.\n\nIt is C\'s responsibility to arrange how it can reach X though, so pieces\nof information that are usually outside Git\'s concern, like proxy\nconfiguration, must not be distributed over this protocol.\n\nIt might also be possible in the future for \"promisor.advertise\" to have\nother values. For example a value like \"onlyName\" could prevent S from\nadvertising URLs, which could help in case C should use a different URL\nfor X than the URL S is using. (The URL S is using might be an internal\none on the server side for example.)\n\nBy default or if \"promisor.acceptFromServer\" is set to \"None\", C will\nnot accept to use the promisor remotes that might have been advertised\nby S. In this case, C will not advertise any \"promisor-remote\"\ncapability in its reply to S.\n\nIf \"promisor.acceptFromServer\" is set to \"All\" and S advertised some\npromisor remotes, then on the contrary, C will accept to use all the\npromisor remotes that S advertised and C will reply with a string like:\n\npromisor-remote=<pr-name>[;<pr-name>]...\n\nwhere the <pr-name> elements are the urlencoded names of all the\npromisor remotes S advertised.\n\nIn a following commit, other values for \"promisor.acceptFromServer\" will\nbe implemented, so that C will be able to decide the promisor remotes it\naccepts depending on the name and URL it received from S. So even if\nthat name and URL information is not used much right now, it will be\nneeded soon.\n\nHelped-by: Taylor Blau <me@ttaylorr.com>\nHelped-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d4cd75f6bd592e733c3e5b1607aaed991e93902f [label=d4cd75f color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 17 10:56:05 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 18:56:37 2025 -0800\n\ncontrib/subtree: fix building docs\n\nIn a38edab7c8 (Makefile: generate doc versions via GIT-VERSION-GEN,\n2024-12-06), we have refactored how we build our documentation by\ninjecting the Git version into the Asciidoc and AsciiDoctor config\nfiles instead of doing so via arguments. As such, the original config\nfiles were removed, where the expectation is that they get generated via\n`GIT-VERSION-GEN` now.\n\nWhie the git-subtree(1) command part of \"contrib/\" also builds docs\nusing these same config files, its Makefile wasn\'t adjusted accordingly\nand thus building the docs is broken.\n\nFix this by using `GIT-VERSION-GEN` to generate those files.\n\nReported-by: Renato Botelho <garga@FreeBSD.org>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d4e8288c9b136a078a53c228b9fbad96f5850eea [label=d4e8288 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:48:22 2025 -0800\n\nMerge branch 'ua/update-server-info-sans-the-repository' into next\n\nCode clean-up.\n\n* ua/update-server-info-sans-the-repository:\nbuiltin/update-server-info: remove the_repository global variable"]
	d533c1069724d39153f5ae78f2c3a3f2b6a5a6e2 [label=d533c10 color=gold3 fillcolor=gold3 tooltip="author: Jean-Noël Avila <jn.avila@free.fr>\nWed Jan 15 21:23:45 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 15 23:43:36 2025 -0800\n\ndoc: the mode param of -u of git commit is optional\n\nFix the synopsis to reflect the option description.\n\nSigned-off-by: Jean-Noël Avila <jn.avila@free.fr>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d549b6c9ff44d3ccb32b9bfe1816d3cfb1d7052a [label=d549b6c color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 05:05:58 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:51:42 2025 -0800\n\nrefspec: relocate apply_refspecs and related funtions\n\nMove the functions `apply_refspecs()` and `apply_negative_refspecs()`\nfrom `remote.c` to `refspec.c`. These functions focus on applying\nrefspecs, so centralizing them in `refspec.c` improves code organization\nby keeping refspec-related logic in one place.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d601aee6056a0afc6df7f77e15cdc155ff402dee [label=d601aee color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nMon Dec 30 05:24:01 2024 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:18:57 2024 -0800\n\ntest-lib: use individual lsan dir for --stress runs\n\nWhen storing output in test-results/, we usually give each numbered run\nin a --stress set its own output file. But we don't do that for storing\nLSan logs, so something like:\n\n./t0003-attributes.sh --stress\n\nwill have many scripts simultaneously creating, writing to, and deleting\nthe test-results/t0003-attributes.leak directory. This can cause logs\nfrom one run to be attributed to another, spurious failures when\ncreation and deletion race, and so on.\n\nThis has always been broken, but nobody noticed because it's rare to do\na --stress run with LSan (since the point is for the code to run quickly\nmany times in order to hit races). But if you're trying to find a race\nin the leak sanitizing code, it makes sense to use these together.\n\nWe can fix it by using $TEST_RESULTS_BASE, which already incorporates\nthe stress job suffix.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d6348c9f60fe5507e03be9a59896af2607e522a7 [label=d6348c9 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:33 2025 -0800\n\nMerge branch \'ds/backfill\' into next\n\nLazy-loading missing files in a blobless clone on demand is costly\nas it tends to be one-blob-at-a-time.  \"git backfill\" is introduced\nto help bulk-download necessary files beforehand.\n\n* ds/backfill:\nbackfill: assume --sparse when sparse-checkout is enabled\nbackfill: add --sparse option\nbackfill: add --min-batch-size=<n> option\nbackfill: basic functionality and tests\nbackfill: add builtin boilerplate"]
	d658653369e0a5573425c352c44d94447bbbff8d [label=d658653 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 19:36:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 19:36:30 2025 -0800\n\nWhat's cooking (2025/01 #02)"]
	d6787d975147a74f1560fffc09dcb2a1f92460bb [label=d6787d9 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Dec 30 15:24:06 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:50:45 2024 -0800\n\nmeson: require SecurityFramework when it's used as SHA1 backend\n\nThe Security framework is required when we use CommonCrypto either as\nHTTPS or SHA1 backend, but we only require it in case it is set up as\nHTTPS backend. Fix this.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d67b50d35cdbdf01c455d6c630128780fbe81b33 [label=d67b50d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:16 2025 -0800\n\nMerge branch \'tc/clone-single-revision\' into next\n\n\"git clone\" learned to make a shallow clone for a single commit\nthat is not necessarily be at the tip of any branch.\n\n* tc/clone-single-revision:\nbuiltin/clone: teach git-clone(1) the --revision= option\nparse-options: introduce die_for_incompatible_opt2()\nclone: introduce struct clone_opts in builtin/clone.c\nclone: add tags refspec earlier to fetch refspec\nclone: refactor wanted_peer_refs()\nclone: make it possible to specify --tags\nclone: cut down on global variables in clone.c"]
	d6a7cace21e689dbbc6a4135d21a1ff6bdc04ce7 [label=d6a7cac color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:44:53 2025 -0800\n\nMerge branch \'jt/fsck-skiplist-parse-fix\'\n\nA misconfigured \"fsck.skiplist\" configuration variable was not\ndiagnosed as an error, which has been corrected.\n\n* jt/fsck-skiplist-parse-fix:\nfsck: reject misconfigured fsck.skipList"]
	d6b67cefb5c27d1479d41a8fae1a03b8aece82f6 [label=d6b67ce color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:31 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:27 2025 -0800\n\nunpack-trees.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d6d4e05ad1951a7d1fe988bfbab23e1f3c8997d5 [label=d6d4e05 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 00:03:32 2025 -0800\n\nMerge branch \'jk/check-mailmap-wo-name-fix\' into next\n\n\"git check-mailmap\" segfault fix.\n\n* jk/check-mailmap-wo-name-fix:\nmailmap: fix check-mailmap with full mailmap line"]
	d76eb0dcccb19d2f85924a4be177ae76126bf5d3 [label=d76eb0d color=gold3 fillcolor=gold3 tooltip="author: Josh Steadmon <steadmon@google.com>\nWed Jan 29 22:50:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:06:50 2025 -0800\n\nlibgit-sys: also export some config_set functions\n\nIn preparation for implementing a higher-level Rust API for accessing\nGit configs, export some of the upstream configset API via libgitpub and\nlibgit-sys. Since this will be exercised as part of the higher-level API\nin the next commit, no tests have been added for libgit-sys.\n\nWhile we're at it, add git_configset_alloc() and git_configset_free()\nfunctions in libgitpub so that callers can manage config_set structs on\nthe heap. This also allows non-C external consumers to treat config_sets\nas opaque structs.\n\nCo-authored-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Josh Steadmon <steadmon@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d795c65b3a29dca33991c441a9951fb9dd14eead [label=d795c65 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:10 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:21 2025 -0800\n\nadvice.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d7fcbe2c56468ac780c689b02c6a9e056ce39c12 [label=d7fcbe2 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 06 10:24:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 16:57:17 2025 -0800\n\nobject-file: retry linking file into place when occluding file vanishes\n\nPrior to 0ad3d65652 (object-file: fix race in object collision check,\n2024-12-30), callers could expect that a successful return from\n`finalize_object_file()` means that either the file was moved into\nplace, or the identical bytes were already present. If neither of those\nhappens, we'd return an error.\n\nSince that commit, if the destination file disappears between our\nlink(3p) call and the collision check, we'd return success without\nactually checking the contents, and without retrying the link. This\nsolves the common case that the files were indeed the same, but it means\nthat we may corrupt the repository if they weren't (this implies a hash\ncollision, but the whole point of this function is protecting against\nhash collisions).\n\nWe can't be pessimistic and assume they're different; that hurts the\ncommon case that the mentioned commit was trying to fix. But after\nseeing that the destination file went away, we can retry linking again.\nAdapt the code to do so when we see that the destination file has racily\nvanished. This should generally succeed as we have just observed that\nthe destination file does not exist anymore, except in the very unlikely\nevent that it gets recreated by another concurrent process again.\n\nHelped-by: Jeff King <peff@peff.net>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d8093fd6c192d900082eb8d78a385ca1e13effa8 [label=d8093fd color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 24 00:07:01 2025 -0800\n\nMerge branch 'tc/meson-use-our-version-def-h'\n\nThe meson build procedure looked for the 'version-def.h' file in a\nwrong directory, which has been corrected.\n\n* tc/meson-use-our-version-def-h:\nmeson: ensure correct version-def.h is used"]
	d838d821c9687a789673b2ac9dff707fdc599e1e [label=d838d82 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:29 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:09 2024 -0800\n\nmeson: wire up support for AsciiDoctor\n\nWhile our Makefile supports both Asciidoc and AsciiDoctor, our Meson\nbuild instructions only support the former. Wire up support for the\nlatter, as well.\n\nOur Makefile always favors Asciidoc, but Meson will automatically figure\nout which of both to use based on whether they are installed or not. To\nkeep compatibility with our Makefile it favors Asciidoc over Asciidoctor\nin case both are available.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d83bc700a7f348931b07f668680dce2675ffff77 [label=d83bc70 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 21:10:33 2025 -0800\n\nMerge branch \'ds/name-hash-tweaks\' into next\n\n\"git pack-objects\" and its wrapper \"git repack\" learned an option\nto use an alternative path-hash function to improve delta-base\nselection to produce a packfile with deeper history than window\nsize.\n\n* ds/name-hash-tweaks:\npack-objects: prevent name hash version change\ntest-tool: add helper for name-hash values\np5313: add size comparison test\npack-objects: add GIT_TEST_NAME_HASH_VERSION\nrepack: add --name-hash-version option\npack-objects: add --name-hash-version option\npack-objects: create new name-hash function version"]
	d874d378379f4a2e7fa0a8ab52ff6e407f4da343 [label=d874d37 color=gold3 fillcolor=gold3 tooltip="author: Peter Oliver <p.d.oliver@mavit.org.uk>\nTue Feb 18 16:30:42 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 17:04:11 2025 -0800\n\nmeson: bump minimum required Perl version to 5.26.0\n\nCommit 702d8c1f3b (Require Perl 5.26.0, 2024-10-23) dropped support\nfor Perl versions older than 5.26.0. The Meson build system, which\nhas been developed in parallel to that commit, hasn't been bumped\naccordingly and thus still requires Perl 5.8.1 or newer.\n\nFix this by requiring Perl 5.26.0 or newer with Meson.\n\nSigned-off-by: Peter Oliver <git@mavit.org.uk>\nReviewed-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d893741e025a3408c7616a35db91b819327c078f [label=d893741 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:21:15 2025 -0800\n\nMerge branch \'jk/lsan-race-with-barrier\'\n\nCI jobs that run threaded programs under LSan has been giving false\npositives from time to time, which has been worked around.\n\n* jk/lsan-race-with-barrier:\ngrep: work around LSan threading race with barrier\nindex-pack: work around LSan threading race with barrier\nthread-utils: introduce optional barrier type\nRevert \"index-pack: spawn threads atomically\"\ntest-lib: use individual lsan dir for --stress runs"]
	d8af27d309c3637d05bd6b4957b3667c04dc861e [label=d8af27d color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 14:59:39 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:28:11 2024 -0800\n\nt/Makefile: make \"check-meson\" work with Dash\n\nThe \"check-meson\" target uses process substitution to check whether\nextracted contents from \"meson.build\" match expected contents. Process\nsubstitution is unportable though and thus the target will fail when\nusing for example Dash.\n\nFix this by writing data into a temporary directory.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d8baf083c5a1a3e8dd27fe73e6000c5f6dddf1ca [label=d8baf08 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 09 09:53:09 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 09 21:24:26 2025 -0800\n\ntree-diff: use the name \"tail\" to refer to list tail\n\nThe ll_diff_tree_paths() function and its helpers all append to a\nrunning list by taking in a pointer to the old tail and returning the\nnew tail. But they just call this argument \"p\", which is not very\ndescriptive.\n\nIt gets particularly confusing in emit_path(), where we actually add to\nthe list, because \"p\" does double-duty: it is the tail of the list, but\nit is also the entry which we add. Except that in some cases we _don\'t_\nadd a new entry (or we might even add it and roll it back) if the path\nisn\'t interesting. At first glance, this makes it look like a bug that\nwe pass \"p\" on to ll_diff_tree_paths() to recurse; sometimes it is\ngetting the new entry we made and sometimes not!\n\nBut it\'s not a bug, because ll_diff_tree_paths() does not care about the\nentry itself at all. It is only using its \"next\" pointer as the tail of\nthe list.\n\nLet\'s swap out \"p\" for \"tail\" to make this obvious. And then in\nemit_path() we\'ll continue to use \"p\" for our newly allocated entry.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d9213e4716ec8d0ac543d32a52a39c79818cb8ca [label=d9213e4 color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:19 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:16 2025 -0800\n\nt/helper/test-tool: implement sha1-unsafe helper\n\nWith the new \"unsafe\" SHA-1 build knob, it is convenient to have a\ntest-tool that can exercise Git\'s unsafe SHA-1 wrappers for testing,\nsimilar to \'t/helper/test-tool sha1\'.\n\nImplement that helper by altering the implementation of that test-tool\n(in cmd_hash_impl(), which is generic and parameterized over different\nhash functions) to conditionally run the unsafe variants of the chosen\nhash function, and expose the new behavior via a new \'sha1-unsafe\' test\nhelper.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d963ac98ec94fd2003722a794f0168a70ea1b815 [label=d963ac9 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Dec 27 13:10:19 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Dec 27 17:17:19 2024 -0800\n\nmeson: enable auto-discovered \"gitweb\"\n\nIn 7d549fe317 (meson: skip gitweb build when Perl is disabled,\n2024-12-20) we have started to conditionally enable \"gitweb\" based on\nwhether or not Perl is enabled. By accident though that change causes us\nto not build gitweb in case its feature flag is set to \"auto\" even if\nautoconfiguration determines that it could be built. This is because we\nuse \"gitweb_option.enabled()\", which only checks whether the feature has\nbeen explicitly enabled.\n\nFix the issue by using `gitweb_option.allowed()` instead, which returns\ntrue in case it is either explicitly enabled or set to \"auto\". This also\nworks for the case where the feature becomes auto-disabled due to Perl\nnot being present because we use `disable_auto_if(not perl.found())`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d9c5cfb18f4dff87db7d28846bd754c009f6043d [label=d9c5cfb color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:05 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:01 2025 -0800\n\nbuiltin/ls-files: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/ls-files.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_ls_files()` function with `repo` set\nto NULL and then early in the function, `show_usage_with_options_if_asked()`\ncall will give the options help and exit.\n\nPass the repository available in the calling context to both\n`expand_objectsize()` and `show_ru_info()` to remove their\ndependency on the global `the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	d9dce89192504c63787b98961ee514937af88e61 [label=d9dce89 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:06 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:02 2025 -0800\n\nbuiltin/for-each-ref: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/for-each-ref.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_for_each_ref()` function with `repo`\nset to NULL and then early in the function, `parse_options()` call will\ngive the options help and exit.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	da898a5c645ce9b6d72c2d39abe1bc3d48cb0fdb [label=da898a5 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:01:59 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:25 2025 -0800\n\nThe fourth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	db58d5a351031ec51817c1a6566ec5672ba17138 [label=db58d5a color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:02 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:01 2025 -0800\n\nbuiltin/verify-commit: stop using `the_repository`\n\nRemove the_repository global variable in favor of the repository\nargument that gets passed in \"builtin/verify-commit.c\".\n\nWhen `-h` is passed to the command outside a Git repository, the\n`run_builtin()` will call the `cmd_verify_commit()` function with `repo`\nset to NULL and then early in the function, `parse_options()` call will\ngive the options help and exit.\n\nPass the repository available in the calling context to `verify_commit()`\nto remove it\'s dependency on the global `the_repository` variable.\n\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	db91954e18654eeebc54c900f44c704002e1866d [label=db91954 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:52:50 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 17:53:03 2025 -0800\n\nA few more before -rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dc657d56254d335016c02fb14bb257e37b8cde89 [label=dc657d5 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:21 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:24 2025 -0800\n\npseudo-merge.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dc7e61c2226941726f46625696a26f19a1fffc11 [label=dc7e61c color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:40 2025 -0800\n\nrefs/iterator: implement seeking for ref-cache iterators\n\nImplement seeking of ref-cache iterators. This is done by splitting most\nof the logic to seek iterators out of `cache_ref_iterator_begin()` and\nputting it into `cache_ref_iterator_seek()` so that we can reuse the\nlogic.\n\nNote that we cannot use the optimization anymore where we return an\nempty ref iterator when there aren't any references, as otherwise it\nwouldn't be possible to reseek the iterator to a different prefix that\nmay exist. This shouldn't be much of a performance concern though as we\nnow start to bail out early in case `advance()` sees that there are no\nmore directories to be searched.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dc9f4f4abb6960a53f00ec67a669becef283d851 [label=dc9f4f4 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:33 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:36 2025 -0800\n\nobject-name: allow skipping ambiguity checks in `get_oid()` family\n\nWhen reading an object ID via `get_oid_basic()` or any of its related\nfunctions we perform a check whether the object ID is ambiguous, which\ncan be the case when a reference with the same name exists. While the\ncheck is generally helpful, there are cases where it only adds to the\nruntime overhead without providing much of a benefit.\n\nAdd a new flag that allows us to disable the check. The flag will be\nused in a subsequent commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dca924b4508e3147e82be5bba10cfc8aefa7ecf0 [label=dca924b color=gold3 fillcolor=gold3 tooltip="author: Jonathan Tan <jonathantanmy@google.com>\nMon Jan 27 20:02:28 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:05 2025 -0800\n\npack-objects: create new name-hash function version\n\nAs we will explore in later changes, the default name-hash function used\nin \'git pack-objects\' has a tendency to cause collisions and cause poor\ndelta selection. This change creates an alternative that avoids some\ncollisions while preserving some amount of hash locality.\n\nThe pack_name_hash() method has not been materially changed since it was\nintroduced in ce0bd64 (pack-objects: improve path grouping\nheuristics., 2006-06-05). The intention here is to group objects by path\nname, but also attempt to group similar file types together by making\nthe most-significant digits of the hash be focused on the final\ncharacters.\n\nHere\'s the crux of the implementation:\n\n/*\n* This effectively just creates a sortable number from the\n* last sixteen non-whitespace characters. Last characters\n* count \"most\", so things that end in \".c\" sort together.\n*/\nwhile ((c = *name++) != 0) {\nif (isspace(c))\ncontinue;\nhash = (hash >> 2) + (c << 24);\n}\n\nAs the comment mentions, this only cares about the last sixteen\nnon-whitespace characters. This cause some filenames to collide more than\nothers. This collision is somewhat by design in order to promote hash\nlocality for files that have similar types (.c, .h, .json) or could be the\nsame file across a directory rename (a/foo.txt to b/foo.txt). This leads to\ndecent cross-path deltas in cases like shallow clones or packing a\nrepository with very few historical versions of files that share common data\nwith other similarly-named files.\n\nHowever, when the name-hash instead leads to a large number of name-hash\ncollisions for otherwise unrelated files, this can lead to confusing the\ndelta calculation to prefer cross-path deltas over previous versions of the\nsame file.\n\nThe new pack_name_hash_v2() function attempts to fix this issue by\ntaking more of the directory path into account through its hash\nfunction. Its naming implies that we will later wire up details for\nchoosing a name-hash function by version.\n\nThe first change is to be more careful about paths using non-ASCII\ncharacters. With these characters in mind, reverse the bits in the byte\nas the least-significant bits have the highest entropy and we want to\nmaximize their influence. This is done with some bit manipulation that\nswaps the two halves, then the quarters within those halves, and then\nthe bits within those quarters.\n\nThe second change is to perform hash composition operations at every\nlevel of the path. This is done by storing a \'base\' hash value that\ncontains the hash of the parent directory. When reaching a directory\nboundary, we XOR the current level\'s name-hash value with a downshift of\nthe previous level\'s hash. This perturbation intends to create low-bit\ndistinctions for paths with the same final 16 bytes but distinct parent\ndirectory structures.\n\nThe collision rate and effectiveness of this hash function will be\nexplored in later changes as the function is integrated with \'git\npack-objects\' and \'git repack\'.\n\nSigned-off-by: Jonathan Tan <jonathantanmy@google.com>\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dccd9c5cf2314b4150d7aaf21ad0a45d8c77acc1 [label=dccd9c5 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\n\nMerge branch 'ja/doc-restore-markup-update'\n\nDoc mark-up updates.\n\n* ja/doc-restore-markup-update:\ndoc: convert git-restore to new style format"]
	dd19c245e9baf5d5c7bf7f6b54330a0689278283 [label=dd19c24 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:17 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 23:59:17 2025 -0800\n\nMerge branch 'ps/doc-http-upload-archive-service' into next\n\nDoc update.\n\n* ps/doc-http-upload-archive-service:\ndoc: documentation for http.uploadarchive config option"]
	dd1eb665efaaabe4984f51248817d676e6765386 [label=dd1eb66 color=gold3 fillcolor=gold3 tooltip="author: Piotr Szlazak <piotr.szlazak@gmail.com>\nThu Feb 06 18:45:27 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 06 21:33:14 2025 -0800\n\ndoc: documentation for http.uploadarchive config option\n\nIn Git v2.44.0 support for 'git archive' over HTTP protocol\nwas added, but it was nowhere documented how it should be\nenabled in git-http-backend.\n\nAdd missing documentation.\n\nSigned-off-by: Piotr Szlazak <piotr.szlazak@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dd69a12e6a6a4c55b7827238d7267fc2e75684d1 [label=dd69a12 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nMon Feb 03 07:29:35 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:24:57 2025 -0800\n\nt5548: add porcelain push test cases for dry-run mode\n\nNew dry-run test cases:\n\n- git push --porcelain --dry-run\n- git push --porcelain --dry-run --force\n- git push --porcelain --dry-run --atomic\n- git push --porcelain --dry-run --atomic --force\n\nSigned-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	dd98f54f30606a2afc05892bbd0185648311963e [label=dd98f54 color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Jan 20 02:56:03 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:56:10 2025 -0800\n\nRemove obsolete \".txt\" extensions for AsciiDoc files\n\nSince we no longer have any AsciiDoc files that end in \".txt\", don\'t\nmodify them with .gitattributes or ignore them with .gitignore.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ddb5287894c491686e6dc1a82e1c3d0f34e56a7f [label=ddb5287 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Jan 07 08:18:24 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 07 17:31:45 2025 -0800\n\nt7407: use test_grep\n\nThere are a few grep calls here that can benefit from test_grep, which\nproduces more user-friendly output when it fails.\n\nOne of these calls also passes \"-sq\", which is curious. The \"-q\" option\nsuppresses the matched output. But test output is either already\nredirected to /dev/null in non-verbose mode, and in verbose mode it\'s\nbetter to see the output. The \"-s\" option suppresses errors opening\nfiles, but we are just grepping in the \"expected\" file we just\ngenerated, so it should not be needed. Neither of these was really\nhurting anything, but they are not a style we\'d like to see emulated. So\nget rid of them.\n\n(It is also curious to grep in the expected file in the first place, but\nthat is because we are auto-generating the expectation from a Git\ncommand. So this is double-checking it did what we wanted).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	de56e1d746cb940b6947186ac389490693308ed0 [label=de56e1d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\n\nMerge branch 'ja/doc-commit-markup-updates'\n\nDoc updates.\n\n* ja/doc-commit-markup-updates:\ndoc: migrate git-commit manpage secondary files to new format\ndoc: convert git commit config to new format\ndoc: make more direct explanations in git commit options\ndoc: the mode param of -u of git commit is optional\ndoc: apply new documentation guidelines to git commit"]
	df2faf1a65fc821384e618b3c291a184fbed039e [label=df2faf1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:11:42 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 19:11:42 2024 -0800\n\nMerge branch 'as/gitk-git-gui-repo-update'\n\nThe developer documentation has been updated to give the latest\ninfo on gitk and git-gui maintainer.\n\n* as/gitk-git-gui-repo-update:\nUpdate the official repo of gitk"]
	dfc88bd6477bc6c1d2a9eb29a859ebf11a0a351d [label=dfc88bd color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:15 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:35 2025 -0800\n\nmeson: introduce `libgit_curl` dependency\n\nWe've got a set of common source files that we use for those executables\nthat link against libcurl. The setup is somewhat repetitive though.\nSimplify it by declaring a `libgit_curl` dependency that bundles all of\nit together.\n\nNote that we don't include curl itself as a dependency. This is because\nwe already pull it in transitively via the libgit dependency, which is\nunfortunate because libgit itself shouldn't actually link against curl\nin the first place. This will get fixed in the next commit.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e01db872e420197aa9a61f1130d27ebf0594d9eb [label=e01db87 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 18:23:09 2025 -0800\n\nMerge branch 'ps/meson-weak-sha1-build' into next\n\nmeson-based build now supports the unsafe-sha1 build knob.\n\n* ps/meson-weak-sha1-build:\nmeson: provide a summary of configured backends\nmeson: wire up unsafe SHA1 backend\nmeson: add missing dots for build options\nmeson: simplify conditions for HTTPS and SHA1 dependencies\nmeson: require SecurityFramework when it's used as SHA1 backend\nmeson: deduplicate access to SHA1/SHA256 backend options\nmeson: consistenlty spell 'CommonCrypto'"]
	e05e111feb8b551706a6e0ca54d5bbd3d8e44a50 [label=e05e111 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:10:26 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 08 23:10:26 2025 -0800\n\nMerge branch \'sj/meson-perl-build-fix\'\n\nThe build procedure in \"meson\" for the \"perl/\" hierarchy lacked\nnecessary dependencies, which has been corrected.\n\n* sj/meson-perl-build-fix:\nmeson: fix perl dependencies"]
	e075d609ae7c11cefa915a4670c8743e06b5c828 [label=e075d60 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 05 23:00:37 2025 -0800\n\nMerge branch \'zh/gc-expire-to\' into next\n\n\"git gc\" learned the \"--expire-to\" option and passes it down to\nunderlying \"git repack\".\n\n* zh/gc-expire-to:\ngc: add `--expire-to` option"]
	e083ea31547c4f126b39ba1c140cee7c4122ffa7 [label=e083ea3 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:43 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:43 2024 -0800\n\nMerge branch 'ps/object-collision-check' into next\n\n* ps/object-collision-check:\nobject-file: fix race in object collision check"]
	e0ea342c0ead6eb558dfe93bd555cce754fbd489 [label=e0ea342 color=gold3 fillcolor=gold3 tooltip="author: Elijah Newren <newren@gmail.com>\nFri Mar 07 16:48:42 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Mar 07 22:51:02 2025 -0800\n\nmerge-ort: support having merge verbosity be set to 0\n\nVarious callers such as am & checkout set the merge verbosity to 0 to\navoid having conflict messages printed.  While this could be achieved by\navoiding the wrappers from merge-ort-wrappers and instead passing 0 for\ndisplay_update_msgs to merge_switch_to_result(), for simplicity of\nconverting callers simply allow them to also achieve this with the\nmerge-ort-wrappers by setting verbosity to 0.\n\nSigned-off-by: Elijah Newren <newren@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e0f807bdad096ef6a4d9f29de333d65d8282aeb1 [label=e0f807b color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 31 23:14:18 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 23:58:44 2025 -0800\n\nt/unit-tests: adapt example decorate test to use clar test framework\n\nIntroduce `test_example_decorate__initialize()` to explicitly set up\nobject IDs and retrieve corresponding objects before tests run. This\nensures a consistent and predictable test state without relying on data\nfrom previous tests.\n\nAdd `test_example_decorate__cleanup()` to clear decorations after each\ntest, preventing interference between tests and ensuring each runs in\nisolation.\n\nAdapt example decorate test script to clar framework by using clar\nassertions where necessary. Previously, tests relied on data written by\nearlier tests, leading to unintended dependencies between them. This\nexplicitly initializes the necessary state within\n`test_example_decorate__readd`, ensuring it does not depend on prior\ntest executions.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e13861b9f18e0a3644d159aba6621b29e0505143 [label=e13861b color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 00:33:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 00:33:43 2025 -0800\n\nMerge branch 'tc/zlib-ng-fix' into next\n\n* tc/zlib-ng-fix:\nhelp: print zlib-ng version number\nhelp: include git-zlib.h to print zlib version"]
	e1c9548eae406a7aa7274685f8bdbc353827bf16 [label=e1c9548 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:07:40 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:09 2025 -0800\n\npacked-backend: check whether the \"packed-refs\" is sorted\n\nWhen there is a \"sorted\" trait in the header of the \"packed-refs\" file,\nit means that each entry is sorted increasingly by comparing the\nrefname. We should add checks to verify whether the \"packed-refs\" is\nsorted in this case.\n\nUpdate the \"packed_fsck_ref_header\" to know whether there is a \"sorted\"\ntrail in the header. It may seem that we could record all refnames\nduring the parsing process and then compare later. However, this is not\na good design due to the following reasons:\n\n1. Because we need to store the state across the whole checking\nlifetime, we would consume a lot of memory if there are many entries\nin the \"packed-refs\" file.\n2. We cannot reuse the existing compare function \"cmp_packed_ref_records\"\nwhich cause repetition.\n\nBecause \"cmp_packed_ref_records\" needs an extra parameter \"struct\nsnaphost\", extract the common part into a new function\n\"cmp_packed_ref_records\" to reuse this function to compare.\n\nThen, create a new function \"packed_fsck_ref_sorted\" to parse the file\nagain and user the new fsck message \"packedRefUnsorted(ERROR)\" to report\nto the user if the file is not sorted.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e1d34f36ead7daf68fac21902bceaa30db7f4444 [label=e1d34f3 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:56:27 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 15:56:28 2024 -0800\n\nMerge branch 'ms/t7611-test-path-is-file'\n\nTest modernization.\n\n* ms/t7611-test-path-is-file:\nt7611: replace test -f with test_path_is* helpers"]
	e2067b49ecaef9b7f51a17ce251f9207f72ef52d [label=e2067b4 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:09:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 12 19:09:08 2025 -0800\n\nThe tenth batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e21bf2c4314840dba4f45c6e7bbc96a6fc0a8f61 [label=e21bf2c color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nSat Feb 01 22:33:18 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:22:03 2025 -0800\n\nhelp: show the suggested command when help.autocorrect is false\n\nMake the handling of false boolean values for help.autocorrect\nconsistent with the handling of value 0 by showing the suggested\ncommands but not running them.\n\nSuggested-by: Junio C Hamano <gitster@pobox.com>\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e22cc108b684920a6e46f924893279c821135d13 [label=e22cc10 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 19:22:34 2025 -0800\n\nMerge branch \'da/difftool-sans-the-repository\' into next\n\n\"git difftool\" code clean-up.\n\n* da/difftool-sans-the-repository:\ndifftool: eliminate use of USE_THE_REPOSITORY_VARIABLE\ndifftool: eliminate use of the_repository\ndifftool: eliminate use of global variables"]
	e2334d2f358216728d2241ee9a4bf5ec6133769a [label=e2334d2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:45 2025 -0800\n\nMerge branch 'jc/breaking-changes-early-adopter-option'\n\nDoc update.\n\n* jc/breaking-changes-early-adopter-option:\nBreakingChanges: clarify the procedure"]
	e24570b0a3d987e2dfeddb8c3a7cfb9a7a7cf726 [label=e24570b color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:51:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 17:51:00 2025 -0800\n\nMerge branch \'jk/check-mailmap-wo-name-fix\'\n\n\"git check-mailmap\" segfault fix.\n\n* jk/check-mailmap-wo-name-fix:\nmailmap: fix check-mailmap with full mailmap line"]
	e2b37c2c7745b98d13ef129ce09f19e2b0ea2c7d [label=e2b37c2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:25:09 2025 -0800\n\nMerge branch \'pw/apply-ulong-overflow-check\' into next\n\n\"git apply\" internally uses unsigned long for line numbers and uses\nstrtoul() to parse numbers on the hunk headers.  It however forgot\nto check parse errors.\n\n* pw/apply-ulong-overflow-check:\napply: detect overflow when parsing hunk header"]
	e2f6f7658559246ea03015fc7b999af2cd20c122 [label=e2f6f76 color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nSun Jan 19 12:19:27 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:36:34 2025 -0800\n\npack-write: pass repository to `index_pack_lockfile()`\n\nThe `index_pack_lockfile()` function uses the global `the_repository`\nvariable to access the repository. To avoid global variable usage, pass\nthe repository from the layers above.\n\nAltough the layers above could have access to the repository internally,\nsimply pass in `the_repository`. This avoids any compatibility issues\nand bubbles up global variable usage to upper layers which can be\neventually resolved.\n\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e31db89558b7f1d622e5a64cf37779b721099814 [label=e31db89 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:38 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:35 2025 -0800\n\nreftable/stack: stop using `write_in_full()`\n\nSimilar to the preceding commit, drop our use of `write_in_full()` and\nimplement a new wrapper `reftable_write_full()` that handles this logic\nfor us. This is done to reduce our dependency on the Git library.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e39e332e5043d7e8f48fbfc91c3bd6d45a52cb7b [label=e39e332 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:32:06 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:15:39 2025 -0800\n\nci: remove stale code for Azure Pipelines\n\nSupport for Azure Pipelines has been retired in 6081d3898f (ci: retire\nthe Azure Pipelines definition, 2020-04-11) in favor of GitHub Actions.\nOur CI library still has some infrastructure left for Azure though that\nis now unused. Remove it.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e3fc411f907fa0fdb78ae63f0b28d2eff8c18265 [label=e3fc411 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 19:19:06 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 19:19:06 2025 -0800\n\nFix mismerge at 737049d332\n\nThe world order after merging the bc/doc-adoc-not-txt topic\nis that there is no .txt files in Documentation/ hierarchy,\nas everything should have been migrated to .adoc suffix.\n\nThere were a fiew topics that were simultaneously in flight\nthat got graduated earlier than the topic, hence needed an\nevil merge to adjust.  This commit belatedly adjusts the merge\nresult to account for them.  The same merge-fix will be made\nwhen the topic eventually graduates to 'master'.\n\nReported-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e40622a60b7473b7a5feac4a9330239863e1352d [label=e40622a color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:44 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:32 2025 -0800\n\nGIT-VERSION-GEN: simplify computing the dirty marker\n\nThe GIT-VERSION-GEN script computes the version that Git is being built\nfrom. When building from a commit with an unclean worktree it knows to\nappend \"-dirty\" to that version to indicate that there were custom\nchanges applied and that it isn\'t the exact same as that commit.\n\nThe dirtiness check is done manually via git-diff-index(1), which is\nsomewhat puzzling though: we already use git-describe(1) to compute the\nversion, which also knows to compute dirtiness via the \"--dirty\" flag.\nBut digging back in history explains why: the \"-dirty\" suffix was added\nin 31e0b2ca81 (GIT 1.5.4.3, 2008-02-23), and git-describe(1) didn\'t yet\nhave support for \"--dirty\" back then.\n\nRefactor the script to use git-describe(1). Despite being simpler, it\nalso results in a small speedup:\n\nBenchmark 1: git describe --dirty --match \"v[0-9]*\"\nTime (mean ± σ):      12.5 ms ±   0.3 ms    [User: 6.3 ms, System: 8.8 ms]\nRange (min … max):    12.0 ms …  13.5 ms    200 runs\n\nBenchmark 2: git describe --match \"v[0-9]*\" HEAD && git update-index -q --refresh && git diff-index --name-only HEAD --\nTime (mean ± σ):      17.9 ms ±   1.1 ms    [User: 8.8 ms, System: 14.4 ms]\nRange (min … max):    17.0 ms …  30.6 ms    148 runs\n\nSummary\ngit describe --dirty --match \"v[0-9]*\" ran\n1.43 ± 0.09 times faster than git describe --match \"v[0-9]*\" && git update-index -q --refresh && git diff-index --name-only HEAD --\n\nWhile the speedup doesn\'t really matter on Unix-based systems, where\nfilesystem operations are typically fast, they do matter on Windows\nwhere the commands take a couple hundred milliseconds. A quick and dirty\ncheck on that system shows a speedup from ~800ms to ~400ms.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e4542d8b35788c355164794457d46667378e9354 [label=e4542d8 color=gold3 fillcolor=gold3 tooltip="author: David Aguilar <davvid@gmail.com>\nSat Feb 01 22:33:19 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 00:22:05 2025 -0800\n\nhelp: add \"show\" as a valid configuration value\n\nAdd a literal value for showing the suggested autocorrection\nfor consistency with the rest of the help.autocorrect options.\n\nSigned-off-by: David Aguilar <davvid@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e490587933d87764fc4e7888e06a826c4aedcdfb [label=e490587 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 00:09:20 2025 -0800\n\nMerge branch \'js/bundle-unbundle-fd-reuse-fix\' into next\n\nThe code path used when \"git fetch\" fetches from a bundle file\nclosed the same file descriptor twice, which sometimes broke things\nunexpectedly when the file descriptor was reused, which has been\ncorrected.\n\n* js/bundle-unbundle-fd-reuse-fix:\nbundle: avoid closing file descriptor twice"]
	e4981ed1e72d3f25da901b9415d2c4805bed0dbc [label=e4981ed color=gold3 fillcolor=gold3 tooltip="author: René Scharfe <l.s.r@web.de>\nSat Dec 28 10:48:50 2024 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 17:00:44 2024 -0800\n\nreftable: handle realloc error in parse_names()\n\nCheck the final reallocation for adding the terminating NULL and handle\nit just like those in the loop.  Simply use REFTABLE_ALLOC_GROW instead\nof keeping the REFTABLE_REALLOC_ARRAY call and adding code to preserve\nthe original pointer value around it.\n\nSigned-off-by: René Scharfe <l.s.r@web.de>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e4c0a1499cace0c375b90d2d2d7b9baf1af12b76 [label=e4c0a14 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nThu Jan 16 22:35:48 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:02 2025 -0800\n\nt0012: optionally check that \"-h\" output goes to stdout\n\nFor most commands, \"git foo -h\" will send the help output to stdout, as\nthis is what parse-options.c does. But some commands send it to stderr\ninstead. This is usually because they call usage_with_options(), and\nshould be switched to show_usage_help_and_exit_if_asked().\n\nCurrently t0012 is permissive and allows either behavior. We\'d like it\nto eventually enforce that help goes to stdout, and teaching it to do so\nidentifies the commands that need to be changed. But during the\ntransition period, we don\'t want to enforce that for most test runs.\n\nSo let\'s introduce a flag that will let most test runs use the\npermissive behavior, and people interested in converting commands can\nrun:\n\nGIT_TEST_HELP_MUST_BE_STDOUT=1 ./t0012-help.sh\n\nto see the failures. Eventually (when all builtins have been converted)\nwe\'ll remove this flag entirely and always check the strict behavior.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e4c4bf6b44f8f420d2c51d7b91b10ed4b15f7447 [label=e4c4bf6 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:17:28 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:17:28 2025 -0800\n\nMerge branch 'js/git-version-gen-update' into next\n\nBuild regression fix.\n\n* js/git-version-gen-update:\nGIT-VERSION-GEN: allow it to be run in parallel"]
	e4d79ca0f902dfa36d9fcb87bde049eb00bfb285 [label=e4d79ca color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:00 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: improve PATH handling\n\nWhen locating programs required for the build we give some special\ntreatment to Windows systems so that we know to also look up tools\nprovided by a Git for Windows installation. This ensures that the build\ndoesn't have any prerequisites other than Microsoft Visual Studio, Meson\nand Git for Windows.\n\nConsequently, some of the programs returned by `find_program()` may not\nbe found via PATH, but via these extra directories. But while Meson can\nuse these tools directly without any special treatment, any scripts that\nwe execute may not be able to find those programs. To help them we thus\nprepend the directories of a subset of the found programs to PATH.\n\nThis doesn't make much sense though: we don't need to prepend PATH for\nany program that was found via PATH, but we really only need to do so\nfor programs located via the extraneous Windows-specific paths. So\ninstead of prepending all programs paths, we really only need to prepend\nthe Windows-specific paths.\n\nAdapt the code accordingly by only prepeding Windows-specific paths to\nPATH, which both simplifies the code and clarifies intent.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e4f6ab008522c5ad386485720770b8d03b4fb880 [label=e4f6ab0 color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 05:05:54 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:51:41 2025 -0800\n\nremote: rename function omit_name_by_refspec\n\nRename the function `omit_name_by_refspec()` to\n`refname_matches_negative_refspec_item()` to provide clearer intent.\nThe previous function name was vague and did not accurately describe its\npurpose. By using `refname_matches_negative_refspec_item`, make the\nfunction's purpose more intuitive, clarifying that it checks if a\nreference name matches any negative refspec.\n\nRename function parameters for consistency with existing naming\nconventions. Use `refname` instead of `name` to align with terminology\nin `refs.h`.\n\nRemove the redundant doc comment since the function name is now\nself-explanatory.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e565f3755342caf1d21e22359eaf09ec11d8c0ae [label=e565f37 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:30:31 2025 -0800\n\nMerge branch \'ds/backfill\'\n\nLazy-loading missing files in a blobless clone on demand is costly\nas it tends to be one-blob-at-a-time.  \"git backfill\" is introduced\nto help bulk-download necessary files beforehand.\n\n* ds/backfill:\nbackfill: assume --sparse when sparse-checkout is enabled\nbackfill: add --sparse option\nbackfill: add --min-batch-size=<n> option\nbackfill: basic functionality and tests\nbackfill: add builtin boilerplate"]
	e5a0d5d8bbeed7d0cb21533f9727591e110f50b8 [label=e5a0d5d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:33 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 01:12:33 2025 -0800\n\nMerge branch \'master\' into ds/backfill\n\n* master: (446 commits)\nThe seventh batch\nThe sixth batch\nThe fifth batch\nThe fourth batch\nrefs/reftable: fix uninitialized memory access of `max_index`\nremote: announce removal of \"branches/\" and \"remotes/\"\nThe third batch\nhash.h: drop unsafe_ function variants\ncsum-file: introduce hashfile_checkpoint_init()\nt/helper/test-hash.c: use unsafe_hash_algo()\ncsum-file.c: use unsafe_hash_algo()\nhash.h: introduce `unsafe_hash_algo()`\ncsum-file.c: extract algop from hashfile_checksum_valid()\ncsum-file: store the hash algorithm as a struct field\nt/helper/test-tool: implement sha1-unsafe helper\ntrace2: prevent segfault on config collection with valueless true\nrefs: fix creation of reflog entries for symrefs\nci: wire up Visual Studio build with Meson\nci: raise error when Meson generates warnings\nmeson: fix compilation with Visual Studio\n..."]
	e63e62171b489dad8ae9d8bd4675b1938bff92c8 [label=e63e621 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 15:52:05 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 15:52:05 2025 -0800\n\nMerge branch 'master' of https://github.com/j6t/gitk\n\n* 'master' of https://github.com/j6t/gitk:\ngitk: Update Bulgarian translation (327t)"]
	e676694298c4a8d9f6fdf3844cbfb03bbee552cc [label=e676694 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:45 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:37 2025 -0800\n\nreftable/basics: provide wrappers for big endian conversion\n\nWe're using a mixture of big endian conversion functions provided by\nboth the reftable library, but also by the Git codebase. Refactor the\ncode so that we exclusively use reftable-provided wrappers in order to\nuntangle us from the Git codebase.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e680c625424e153580e8f2d78ae2ffaa42335221 [label=e680c62 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:25 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:25 2025 -0800\n\nt/helper/test-rot13-filter.c: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e6ba4c07b85a0a8fee84b6ac7ab414d47a5351f2 [label=e6ba4c0 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:07:17 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:08 2025 -0800\n\npacked-backend: add \"packed-refs\" entry consistency check\n\n\"packed-backend.c::next_record\" will parse the ref entry to check the\nconsistency. This function has already checked the following things:\n\n1. Parse the main line of the ref entry to inspect whether the oid is\nnot correct. Then, check whether the next character is oid. Then\ncheck the refname.\n2. If the next line starts with \'^\', it would continue to parse the\npeeled oid and check whether the last character is \'\\n\'.\n\nAs we decide to implement the ref consistency check for \"packed-refs\",\nlet\'s port these two checks and update the test to exercise the code.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e70c392ca208d04b3b8c750e233ff4c0c007b51d [label=e70c392 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:00 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:20:01 2025 -0800\n\nMerge branch \'kn/reflog-migration-fix-fix\' into next\n\nFix bugs in an earlier attempt to fix \"git refs migration\".\n\n* kn/reflog-migration-fix-fix:\nrefs/reftable: fix uninitialized memory access of `max_index`"]
	e73b24fa32d4a367fd706f509241234cc17591a1 [label=e73b24f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:30 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:30 2025 -0800\n\nMerge branch \'ib/diff-S-G-with-longhand\' into seen\n\nThe commands in the \"diff\" family learned longhands for \"-S\" and\n\"-G\" options.\n\nThe core part looked mostly good.\n\n* ib/diff-S-G-with-longhand:\ndiff: docs: Use --patch-{grep,modifies} over -G/-S\ndiff: --pickaxe-{all,regex} help: Add --patch-{grep,modifies}\ndiff: test: Use --patch-{grep,modifies} over -G/-S\ncompletion: Support --patch-{grep,modifies}\ndiff: --patch-{grep,modifies} arg names for -G and -S\ndocs: gitdiffcore: -G and -S: Use regex/string placeholders\ndiff: short help: Add -G and --pickaxe-grep\ndiff: short help: Correct -S description\ndiff: -G description: Correct copy/paste error\nt/t4209-log-pickaxe: Naming typo: -G takes a regex"]
	e76b53ef23871ff81ab305822eb605baf0cc5bd3 [label=e76b53e color=gold3 fillcolor=gold3 tooltip="author: Alexander Shopov <ash@kambanaria.org>\nTue Dec 24 11:17:58 2024 +0100\ncommitter: Johannes Sixt <j6t@kdbg.org>\nTue Dec 24 11:58:09 2024 +0100\n\ngitk: Update Bulgarian translation (327t)\n\nSigned-off-by: Alexander Shopov <ash@kambanaria.org>\nSigned-off-by: Johannes Sixt <j6t@kdbg.org>"]
	e7ac344d7018d4537eda29d5a09c047a35f27364 [label=e7ac344 color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nTue Feb 25 07:29:40 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 19:24:54 2025 -0800\n\nunpack_loose_header(): report headers without NUL as \"bad\"\n\nIf a caller asks us to read the whole loose object header value into a\nstrbuf (e.g., via \"cat-file --allow-unknown-type\"), we\'ll keep reading\nuntil we see a NUL byte marking the end of the header.\n\nIf we hit Z_STREAM_END before seeing the NUL, we obviously have to stop.\nBut we return ULHR_TOO_LONG, which doesn\'t make any sense. The \"too\nlong\" return code is used in the normal, 32-byte limited mode to\nindicate that we stopped looking. There is no such thing as \"too long\"\nhere, as we\'d keep reading forever until we see the end of stream or the\nNUL.\n\nInstead, we should return ULHR_BAD. The loose object has no NUL marking\nthe end of header, so it is malformed. The behavior difference is\nslight; in either case we\'d consider the object unreadable and refuse to\ngo further. The only difference is the specific error message we\nproduce.\n\nThere\'s no test case here, as we\'d need to generate a valid zlib stream\nwithout a NUL. That\'s not something Git will do without writing new\ncustom code. And in the next patch we\'ll fix another bug in this area\nwhich will make this easier to do (and we will test it then).\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e7c1b9f1231e49f5e0c5250ec84c68376619f415 [label=e7c1b9f color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nWed Jan 22 06:35:48 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 18:51:36 2025 -0800\n\nrefs: use 'uint64_t' for 'ref_update.index'\n\nThe 'ref_update.index' variable is used to store an index for a given\nreference update. This index is used to order the updates in a\npredetermined order, while the default ordering is alphabetical as per\nthe refname.\n\nFor large repositories with millions of references, it should be safer\nto use 'uint64_t'. Let's do that. This also is applied for all other\ncode sections where we store 'index' and pass it around.\n\nReported-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e7f8bf125c078004232e254e71b97226c4fed81b [label=e7f8bf1 color=gold3 fillcolor=gold3 tooltip="author: Josh Steadmon <steadmon@google.com>\nTue Jan 28 23:01:38 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 23:45:47 2025 -0800\n\nlibgit-sys: introduce Rust wrapper for libgit.a\n\nIntroduce libgit-sys, a Rust wrapper crate that allows Rust code to call\nfunctions in libgit.a. This initial patch defines build rules and an\ninterface that exposes user agent string getter functions as a proof of\nconcept. This library can be tested with `cargo test`. In later commits,\na higher-level library containing a more Rust-friendly interface will be\nadded at `contrib/libgit-rs`.\n\nSymbols in libgit can collide with symbols from other libraries such as\nlibgit2. We avoid this by first exposing library symbols in\npublic_symbol_export.[ch]. These symbols are prepended with \"libgit_\" to\navoid collisions and set to visible using a visibility pragma. In\nbuild.rs, Rust builds contrib/libgit-rs/libgit-sys/libgitpub.a, which also\ncontains libgit.a and other dependent libraries, with\n-fvisibility=hidden to hide all symbols within those libraries that\nhaven\'t been exposed with a visibility pragma.\n\nCo-authored-by: Kyle Lippincott <spectral@google.com>\nCo-authored-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Calvin Wan <calvinwan@google.com>\nSigned-off-by: Kyle Lippincott <spectral@google.com>\nSigned-off-by: Josh Steadmon <steadmon@google.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e7fb2ca94556e6aadfc3038afaa1c8cc3525258c [label=e7fb2ca color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Jan 10 12:26:18 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 15:56:55 2025 -0800\n\nbuiltin/blame: fix out-of-bounds write with blank boundary commits\n\nWhen passing the `-b` flag to git-blame(1), then any blamed boundary\ncommits which were marked as uninteresting will not get their actual\ncommit ID printed, but will instead be replaced by a couple of spaces.\n\nThe flag can lead to an out-of-bounds write as though when combined with\n`--abbrev=` when the abbreviation length is longer than `GIT_MAX_HEXSZ`\nas we simply use memset(3p) on that array with the user-provided length\ndirectly. The result is most likely that we segfault.\n\nAn obvious fix would be to cull `length` to `GIT_MAX_HEXSZ` many bytes.\nBut when the underlying object ID is SHA1, and if the abbreviated length\nexceeds the SHA1 length, it would cause us to print more bytes than\ndesired, and the result would be misaligned.\n\nInstead, fix the bug by computing the length via strlen(3p). This makes\nus write as many bytes as the formatted object ID requires and thus\neffectively limits the length of what we may end up printing to the\nlength of its hash. If `--abbrev=` asks us to abbreviate to something\nshorter than the full length of the underlying hash function it would be\nhandled by the call to printf(3p) correctly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e8008110cebf5cac71ae1722e4e2bf9b6b6369e2 [label=e800811 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 22:36:35 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 22:36:35 2025 -0800\n\nSync with 'master'"]
	e8015223c74938548dfd8d6099b1ea5eb6ab9231 [label=e801522 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:12 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:22 2025 -0800\n\nbuiltin.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e969bc875963a10890d61ba84eab3a460bd9e535 [label=e969bc8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:53 2025 -0800\n\nA few more after -rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	e9e924e581c8b6d07ab6429eba4684e35c108666 [label=e9e924e color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:55 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:04 2025 -0800\n\nmeson: wire up git-contacts(1)\n\nWire up the build for git-contacts(1) in Meson.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	eb8728d88ab92d866f454a5b981b7bbfe4e2235b [label=eb8728d color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:19 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:28 2025 -0800\n\nmeson: stop disabling -Wsign-compare\n\nIn 4f9264b0cd (config.mak.dev: drop `-Wno-sign-compare`, 2024-12-06) we\nhave started an effort to make our codebase compile with -Wsign-compare.\nBut while we removed the -Wno-sign-compare flag from \"config.mak.dev\",\nwe didn\'t adjust the Meson build instructions in the same way.\n\nFix this.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ebb35369f1aea0e829a2e13531316a34d8f2e354 [label=ebb3536 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:14 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:35 2025 -0800\n\nmeson: simplify use of the common-main library\n\nThe \"common-main.c\" file is used by multiple executables. In order to\nmake it easy to set it up we have created a separate library that these\nexecutables can link against. All of these executables also want to link\nagainst `libgit.a` though, which makes it necessary to specify both of\nthese as dependencies for every executable.\n\nSimplify this a bit by declaring the library as a source dependency:\ninstead of creating a static library, we now instead compile the common\nset of files into each executable separately.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ebc3ae6ffc90852f148c4266dc5e6566588ad51b [label=ebc3ae6 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:47 2025 -0800\n\nMerge branch \'pw/merge-tree-stdin-deadlock-fix\' into next\n\n\"git merge-tree --stdin\" has been improved (including a workaround\nfor a deadlock).\n\n* pw/merge-tree-stdin-deadlock-fix:\nmerge-tree: fix link formatting in html docs\nmerge-tree: improve docs for --stdin\nmerge-tree: only use basic merge config\nmerge-tree: remove redundant code\nmerge-tree --stdin: flush stdout to avoid deadlock"]
	ebc9625a4c005c126f025455d3404d00e13d7faf [label=ebc9625 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:39 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 30 17:30:39 2024 -0800\n\nMerge branch 'rs/reftable-realloc-errors' into next\n\nThe custom allocator code in the reftable library did not handle\nfailing realloc() very well, which has been addressed.\n\n* rs/reftable-realloc-errors:\nt-reftable-merged: handle realloc errors\nreftable: handle realloc error in parse_names()\nreftable: fix allocation count on realloc error\nreftable: avoid leaks on realloc error"]
	ecac596c7b3492e75cae44aed47f222c198deaea [label=ecac596 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 20:13:23 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Dec 28 20:14:09 2024 -0800\n\nWhat's cooking (2024/12 #10)"]
	ecba2c181c556c1e44c5e3ff58af912c85ec33b2 [label=ecba2c1 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 31 18:44:15 2025 -0800\n\nMerge branch 'sk/strlen-returns-size_t'\n\nCode clean-up.\n\n* sk/strlen-returns-size_t:\ndate.c: Fix type missmatch warings from msvc"]
	ecf8e8bbeff2edddfeebe7213b294c22ced1e8e8 [label=ecf8e8b color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:57:25 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:57:25 2025 -0800\n\nMerge branch \'ps/zlib-ng\' into next\n\nThe code paths to interact with zlib has been cleaned up in\npreparation for building with zlib-ng.\n\n* ps/zlib-ng:\nci: make \"linux-musl\" job use zlib-ng\nci: switch linux-musl to use Meson\ncompat/zlib: allow use of zlib-ng as backend\ngit-zlib: cast away potential constness of `next_in` pointer\ncompat/zlib: provide stubs for `deflateSetHeader()`\ncompat/zlib: provide `deflateBound()` shim centrally\ngit-compat-util: move include of \"compat/zlib.h\" into \"git-zlib.h\"\ncompat: introduce new \"zlib.h\" header\ngit-compat-util: drop `z_const` define\ncompat: drop `uncompress2()` compatibility shim"]
	ed4cf6e8e29bebb9324ba1a400a6c07513f2d642 [label=ed4cf6e color=gold3 fillcolor=gold3 tooltip="author: brian m. carlson <sandals@crustytoothpaste.net>\nMon Jan 20 02:56:01 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 21:56:05 2025 -0800\n\ngitattributes: mark AsciiDoc files as LF-only\n\nIn a future commit, we\'ll move the AsciiDoc documentation files to the\n\".adoc\" extension rather than the extension \".txt\".  We need these files\nto use only LF because they are read by generate-cmdlist.sh using the\nread builtin.\n\nIf we allow CRLF here, the CR at the end of the line is treated as part\nof the synopsis, since a POSIX shell doesn\'t consider it special like\nLF.  In that case, we generate synopsis strings in C that contain a CR,\nwhich the compiler does not like because it believes that the double\nquote string terminator is missing, and as a consequence, compilation\nfails.\n\nBecause we rely on LF-only endings here to compile successfully and we\nwant Git to continue to be able to compile on Windows, mark these files\nas LF-only in the .gitattributes file.\n\nSigned-off-by: brian m. carlson <sandals@crustytoothpaste.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ee00ef41f269bda33370acbacb41f5ca9a200a9b [label=ee00ef4 color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nMon Mar 03 21:44:30 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Mar 03 22:49:27 2025 -0800\n\ntransport.h: *.txt -> *.adoc fixes\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ee0e3bbc8dbd6efff2cbab71c3678ba5d412cbe6 [label=ee0e3bb color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:23:29 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 06 17:23:29 2025 -0800\n\nMerge branch 'jc/doc-opt-tilde-expand'\n\nDocfix.\n\n* jc/doc-opt-tilde-expand:\ngitcli.txt: typeset pathnames as monospace"]
	ee109848cf18df772b0f5f8e70fa7c7f4bfb2e92 [label=ee10984 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:39:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 22:39:42 2025 -0800\n\nMerge branch 'ps/build-meson-fixes' into ps/zlib-ng\n\n* ps/build-meson-fixes:\nci: wire up Visual Studio build with Meson\nci: raise error when Meson generates warnings\nmeson: fix compilation with Visual Studio\nmeson: make the CSPRNG backend configurable\nmeson: wire up fuzzers\nmeson: wire up generation of distribution archive\nmeson: wire up development environments\nmeson: fix dependencies for generated headers\nmeson: populate project version via GIT-VERSION-GEN\nGIT-VERSION-GEN: allow running without input and output files\nGIT-VERSION-GEN: simplify computing the dirty marker"]
	ee145da188a359b4d38e17c1f864f0521f36187e [label=ee145da color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:46 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 18:55:46 2025 -0800\n\nMerge branch \'mh/doc-commit-title-not-subject\' into next\n\nUpdate \"git commit\" documentation to refer to commit titles as\nsuch, not \"subject\".\n\n* mh/doc-commit-title-not-subject:\ndoc: use \'title\' consistently"]
	ee8020ff40dd3b9b472b482bfa7b6674747800cc [label=ee8020f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 21 19:35:53 2025 -0800\n\nMerge branch 'ua/update-server-info-sans-the-repository'\n\nCode clean-up.\n\n* ua/update-server-info-sans-the-repository:\nbuiltin/update-server-info: remove the_repository global variable"]
	eee25bbd84e2c3c00ea75080133374c48eeb3240 [label=eee25bb color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:17 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:36 2025 -0800\n\nmeson: drop separate version library\n\nWhen building `libgit.a` we link it against a `libgit_version.a` library\nthat contains the version information that we inject at build time. The\nintent of this is to avoid rebuilding all of `libgit.a` whenever the\nversion changes. But that wouldn\'t happen in the first place, as we know\nto just rebuild the files that depend on the generated \"version-def.h\"\nfile.\n\nThis is an artifact of an earlier version of the Meson build infra that\ndidn\'t ultimately land. We didn\'t yet have \"version-def.h\", and instead\ninjected the version via preprocessor directives. And here we would have\nrebuilt all of `libgit.a` indeed in case the version changes, because\nthe preprocessor directive applied to all files.\n\nStop building the separate library and instead add \"version-def.h\" to\nthe list of source files directly.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ef18273a2d933b31529ea336161a70ddb8738b34 [label=ef18273 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:32 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 00:40:32 2025 -0800\n\nMerge branch \'ps/meson-contrib-bits\' into next\n\nUpdate meson-based build procedure to cover contrib/ and other\nplaces as well.\n\n* ps/meson-contrib-bits:\nci: exercise credential helpers\nci: fix propagating UTF-8 test locale in musl-based Meson job\nmeson: wire up static analysis via Coccinelle\nmeson: wire up git-contacts(1)\nmeson: wire up credential helpers\ncontrib/credential: fix compilation of \"osxkeychain\" helper\ncontrib/credential: fix compiling \"libsecret\" helper\ncontrib/credential: fix compilation of wincred helper with MSVC\ncontrib/credential: fix \"netrc\" tests with out-of-tree builds\nGIT-BUILD-OPTIONS: propagate project\'s source directory"]
	ef8c3a1b8aa04e09a00dffcfda24daec6908615c [label=ef8c3a1 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:51 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:34 2025 -0800\n\nmeson: make the CSPRNG backend configurable\n\nThe CSPRNG backend is not configurable in Meson and isn't quite\ndiscoverable, either. Make it configurable and add the actual backend\nused to the summary.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	efba7d534cef8489a24f9d55811fbabdf82cfb10 [label=efba7d5 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:44 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 17:27:44 2025 -0800\n\nMerge branch 'dk/zsh-config-completion-fix' into next\n\nCompletion script updates for zsh\n\n* dk/zsh-config-completion-fix:\ncompletion: repair config completion for Zsh"]
	effbef2bebed87b1ce46d449862fb5121dba9d34 [label=effbef2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:37:07 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 02 22:37:08 2025 -0800\n\nMerge branch 'jk/lsan-race-ignore-false-positive'\n\nCI jobs that run threaded programs under LSan has been giving false\npositives from time to time, which has been worked around.\n\nThis is an alternative to the jk/lsan-race-with-barrier topic with\nmuch smaller change to the production code.\n\n* jk/lsan-race-ignore-false-positive:\ntest-lib: ignore leaks in the sanitizer's thread code\ntest-lib: check leak logs for presence of DEDUP_TOKEN\ntest-lib: simplify leak-log checking\ntest-lib: rely on logs to detect leaks\nRevert barrier-based LSan threading race workaround"]
	efff4a85a4fce58b2aa850c6fbf4d8828329f51d [label=efff4a8 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:10:42 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:14 2025 -0800\n\nThe first batch\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f00a07596a82911b16550fb1d50858818f9a7459 [label=f00a075 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\n\nMerge branch 'sk/clar-trailer-urlmatch-norm-test' into jch\n\nA few traditional unit tests have been rewritten to use the clar\nframework.\n\nComments?\n\n* sk/clar-trailer-urlmatch-norm-test:\nt/unit-tests: convert urlmatch-normalization test to clar\nt/unit-tests: convert trailer test to use clar"]
	f046ab2dd4c59aed786da0067f1af68ea1b003eb [label=f046ab2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:08 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 29 23:05:09 2025 -0800\n\nMerge branch 'ds/path-walk-1'\n\nIntroduce a new API to visit objects in batches based on a common\npath, or by type.\n\n* ds/path-walk-1:\npath-walk: drop redundant parse_tree() call\npath-walk: reorder object visits\npath-walk: mark trees and blobs as UNINTERESTING\npath-walk: visit tags and cached objects\npath-walk: allow consumer to specify object types\nt6601: add helper for testing path-walk API\ntest-lib-functions: add test_cmp_sorted\npath-walk: introduce an object walk by path"]
	f074cdea467524afd355766c6cdb27d6d94d1e4e [label=f074cde color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:26 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:26 2024 -0800\n\nMerge branch \'ps/build-hotfix\'\n\nA topic to optionally build with meson, which has graduated to\n\'master\' recently, has regressed the normal Makefile build, which\nis being corrected.\n\n* ps/build-hotfix:\nmeson: add options to override build information\nGIT-VERSION-GEN: fix overriding GIT_BUILT_FROM_COMMIT and GIT_DATE\nGIT-VERSION-GEN: fix overriding GIT_VERSION\nMakefile: introduce template for GIT-VERSION-GEN\nMakefile: drop unneeded indirection for GIT-VERSION-GEN outputs\nMakefile: stop including \"GIT-VERSION-FILE\" in docs"]
	f0a328589fec56e039115150352cdc3aaf00bbc9 [label=f0a3285 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 16:24:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 01:18:00 2025 -0800\n\nbuiltin/gc: split out function to expire reflog entries\n\nWe're about to introduce a new task for git-maintenance(1) that knows to\nexpire reflog entries. The logic will be shared with git-gc(1), which\nalready knows how to do this.\n\nPull out the common logic into a separate function so that we can share\nthe implementation between both builtins.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f0a371a39d8b9945b2e0a414a32aa861614e5352 [label=f0a371a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:22 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:22 2025 -0800\n\nMerge branch \'jc/show-usage-help\'\n\nThe help text from \"git $cmd -h\" appear on the standard output for\nsome $cmd and the standard error for others.  The built-in commands\nhave been fixed to show them on the standard output consistently.\n\n* jc/show-usage-help:\nbuiltin: send usage() help text to standard output\noddballs: send usage() help text to standard output\nbuiltins: send usage_with_options() help text to standard output\nusage: add show_usage_if_asked()\nparse-options: add show_usage_with_options_if_asked()\nt0012: optionally check that \"-h\" output goes to stdout"]
	f0c266af4ea7e4d9b84955f8fed8ee8cb009cbd8 [label=f0c266a color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Jan 23 18:34:33 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 23 19:28:17 2025 -0800\n\ncsum-file.c: use unsafe_hash_algo()\n\nInstead of calling the unsafe_ hash function variants directly, make use\nof the shared 'algop' pointer by initializing it to:\n\nf->algop = unsafe_hash_algo(the_hash_algo);\n\n, thus making all calls use the unsafe variants directly.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f11f0a5a2db955f68776ea95aec42df7fcb8ce1b [label=f11f0a5 color=gold3 fillcolor=gold3 tooltip="author: Karthik Nayak <karthik.188@gmail.com>\nMon Jan 27 10:44:08 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 17:21:41 2025 -0800\n\nrefs/reftable: fix uninitialized memory access of `max_index`\n\nWhen migrating reflogs between reference backends, maintaining the\noriginal order of the reflog entries is crucial. To achieve this, an\n`index` field is stored within the `ref_update` struct that encodes the\nrelative order of reflog entries. This field is used by the reftable\nbackend as update index for the respective reflog entries to maintain\nthat ordering.\n\nThese update indices must be respected when writing table headers, which\nencode the minimum and maximum update index of contained records in the\nheader and footer. This logic was added in commit bc67b4ab5f (reftable:\nwrite correct max_update_index to header, 2025-01-15), which started to\nuse `reftable_writer_set_limits()` to propagate the mininum and maximum\nupdate index of all records contained in a ref transaction.\n\nHowever, we only set the maximum update index for the first transaction\nargument, even though there can be multiple such arguments. This is the\ncase when we write to multiple stacks in a single transaction, e.g. when\nupdating references in two different worktrees at once. Consequently,\nthe update index for all but the first argument remain uninitialized,\nwhich may cause undefined behaviour.\n\nFix this by moving the assignment of the maximum update index in\n`reftable_be_transaction_finish()` inside the loop, which ensures that\nall elements of the array are correctly initialized.\n\nFurthermore, initialize the `max_index` field to 0 when queueing a new\ntransaction argument. This is not strictly necessary, as all elements of\n`write_transaction_table_arg.max_index` are now assigned correctly.\nHowever, this initialization is added for consistency and to safeguard\nagainst potential future changes that might inadvertently introduce\nuninitialized memory access.\n\nReported-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>\nSigned-off-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f1299bff26a20b70bb5b8440526a2bd3c6de298a [label=f1299bf color=gold3 fillcolor=gold3 tooltip="author: Jeff King <peff@peff.net>\nSun Jan 19 14:25:47 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:42:56 2025 -0800\n\nindex-pack, unpack-objects: use get_be32() for reading pack header\n\nBoth of these commands read the incoming pack into a static unsigned\nchar buffer in BSS, and then parse it by casting the start of the buffer\nto a struct pack_header. This can result in SIGBUS on some platforms if\nthe compiler doesn\'t place the buffer in a position that is properly\naligned for 4-byte integers.\n\nThis reportedly happens with unpack-objects (but not index-pack) on\nsparc64 when compiled with clang (but not gcc). But we are definitely in\nthe wrong in both spots; since the buffer\'s type is unsigned char, we\ncan\'t depend on larger alignment. When it works it is only because we\nare lucky.\n\nWe\'ll fix this by switching to get_be32() to read the headers (just like\nthe last few commits similarly switched us to put_be32() for writing\ninto the same buffer).\n\nIt would be nice to factor this out into a common helper function, but\nthe interface ends up quite awkward. Either the caller needs to hardcode\nhow many bytes we\'ll need, or it needs to pass us its fill()/use()\nfunctions as pointers. So I\'ve just fixed both spots in the same way;\nthis is not code that is likely to be repeated a third time (most of the\npack reading code uses an mmap\'d buffer, which should be properly\naligned).\n\nI did make one tweak to the shared code: our pack_version_ok() macro\nexpects us to pass the big-endian value we\'d get by casting. We can\nintroduce a \"native\" variant which uses the host integer ordering.\n\nReported-by: Koakuma <koachan@protonmail.com>\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f1cc562b77053ced18eebaae2febe5ff6d5e2690 [label=f1cc562 color=gold3 fillcolor=gold3 tooltip="author: Lucas Oshiro <lucasseikioshiro@gmail.com>\nSat Feb 08 17:57:31 2025 -0300\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 10 17:03:30 2025 -0800\n\nt7603: replace test -f by test_path_is_file\n\n`test_path_is_file` provides a better output when asserting whether a\nfile exists. Replace the occurrences of `test -f` in t7603 with it,\nfacilitating the trace of possible test failures.\n\nSigned-off-by: Lucas Oshiro <lucasseikioshiro@gmail.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f1ce861c34bffbc02998173016b0bca0f6d9f6c4 [label=f1ce861 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:40 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 22:54:11 2025 -0800\n\nenvironment: move access to \"core.sharedRepository\" into repo settings\n\nSimilar as with the preceding commit, we track \"core.sharedRepository\"\nvia a pair of global variables. Move them into `struct repo_settings` so\nthat we can instead track them per-repository.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f21a56e69073f7eed50985d1b62712075a5c8bea [label=f21a56e color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:24 2025 -0800\n\nMerge branch 'dm/completion-remote-names-fix' into jch\n\nThe bash command line completion script (in contrib/) has been\nupdated to cope with remote repository nicknames with slashes in\nthem.\n\nComments?\n\n* dm/completion-remote-names-fix:\ncompletion: fix bugs with slashes in remote names\ncompletion: add helper to count path components"]
	f21ea69d945f958704f2fe143c2638ecae6e0d12 [label=f21ea69 color=gold3 fillcolor=gold3 tooltip="author: Meet Soni <meetsoni3017@gmail.com>\nTue Feb 04 15:28:52 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 04 18:55:59 2025 -0800\n\nremote: relocate valid_remote_name\n\nMove the `valid_remote_name()` function from the refspec subsystem to\nthe remote subsystem to better align with the separation of concerns.\n\nSigned-off-by: Meet Soni <meetsoni3017@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f23179924bf4ee0e888cfbe911d9bd472918bcb4 [label=f231799 color=gold3 fillcolor=gold3 tooltip="author: Taylor Blau <me@ttaylorr.com>\nThu Feb 13 21:25:50 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 22:16:34 2025 -0800\n\nMakefile: remove accidental recipe prefix in conditional\n\nBack in 728b9ac0c3 (Makefile(s): avoid recipe prefix in conditional\nstatements, 2024-04-08), we prepared our Makefiles for a forthcoming\nchange in upstream Make that would ban the recipe prefix within a\nconditional statement by replacing tabs (the prefix) with eight spaces.\n\nIn b9d6f64393 (compat/zlib: allow use of zlib-ng as backend,\n2025-01-28), a handful of recipe prefix characters were introduced in a\nconditional statement ('ifdef ZLIB_NG'), causing 'make' to fail on my\nsystem, which uses GNU Make 4.4.90.\n\nRemove the recipe prefix characters by replacing them with the same\nscript as is mentioned in 728b9ac0c3.\n\nSigned-off-by: Taylor Blau <me@ttaylorr.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f29f1990b5605f8dbed65324d8e92b67d4dd1713 [label=f29f199 color=gold3 fillcolor=gold3 tooltip="author: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSat Mar 08 00:35:00 2025 +0530\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:52:00 2025 -0800\n\nconfig: teach repo_config to allow `repo` to be NULL\n\nThe `repo` value can be NULL if a builtin command is run outside\nany repository. The current implementation of `repo_config()` will\nfail if `repo` is NULL.\n\nIf the `repo` is NULL the `repo_config()` can ignore the repository\nconfiguration but it should read the other configuration sources like\nthe system-side configuration instead of failing.\n\nTeach the `repo_config()` to allow `repo` to be NULL by calling the\n`read_very_early_config()` which read config but only enumerate system\nand global settings.\n\nThis will be useful in the following commits.\n\nSuggested-by: Junio C Hamano <gitster@pobox.com>\nMentored-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Usman Akinyemi <usmanakinyemi202@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f2cfb42f2267455c78077bd5f34518da5af5177c [label=f2cfb42 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 17:45:57 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:29 2024 -0800\n\nGit 2.48-rc1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f49905d47d42cf6ea4c34b5a8301e84149e7aeba [label=f49905d color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:34 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 19:23:34 2025 -0800\n\nMerge branch 'ps/build-meson-fixes'\n\nMore build fixes and enhancements on meson based build procedure.\n\n* ps/build-meson-fixes:\nci: wire up Visual Studio build with Meson\nci: raise error when Meson generates warnings\nmeson: fix compilation with Visual Studio\nmeson: make the CSPRNG backend configurable\nmeson: wire up fuzzers\nmeson: wire up generation of distribution archive\nmeson: wire up development environments\nmeson: fix dependencies for generated headers\nmeson: populate project version via GIT-VERSION-GEN\nGIT-VERSION-GEN: allow running without input and output files\nGIT-VERSION-GEN: simplify computing the dirty marker"]
	f52abcda959c2fa83243be21041d289735379b7c [label=f52abcd color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:35 2025 -0800\n\nMerge branch \'da/xdiff-w-sign-compare-workaround\'\n\nNoises from \"-Wsign-compare\" in the borrowed xdiff code has been\nsquelched.\n\n* da/xdiff-w-sign-compare-workaround:\nxdiff: avoid signed vs. unsigned comparisons in xutils.c\nxdiff: avoid signed vs. unsigned comparisons in xpatience.c\nxdiff: avoid signed vs. unsigned comparisons in xhistogram.c\nxdiff: avoid signed vs. unsigned comparisons in xemit.c\nxdiff: avoid signed vs. unsigned comparisons in xdiffi.c\nxdiff: move sign comparison warning guard into each file"]
	f5c714e2a7d6239548b94c37ae906484e94b5bc7 [label=f5c714e color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:30 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:22 2025 -0800\n\npath: refactor `repo_submodule_path()` family of functions\n\nAs explained in an earlier commit, we\'re refactoring path-related\nfunctions to provide a consistent interface for computing paths into the\ncommondir, gitdir and worktree. Refactor the \"submodule\" family of\nfunctions accordingly.\n\nNote that in contrast to the other `repo_*_path()` families, we have to\npass in the repository as a non-constant pointer. This is because we end\nup calling `repo_read_gitmodules()` deep down in the callstack, which\nmay end up modifying the repository.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f5fac42e07cc7152ee29d656c8af6dbfb10e92e4 [label=f5fac42 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Feb 26 09:22:16 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 26 18:09:35 2025 -0800\n\nmeson: stop linking libcurl into all executables\n\nWe set up libcurl via the `libgit_dependencies` variable, which gets\npropagated into every user of the `libgit` dependency. This is not\nnecessary though, as most of our executables aren't even supposed to\nlink against libcurl.\n\nFix this by only propagating include directories as a libgit dependency\nand propagating the full curl dependency via `libgit_curl`.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f65d9cfd3fc5a729bf3b4af471861805766d0701 [label=f65d9cf color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 25 23:19:37 2025 -0800\n\nMerge branch 'po/meson-perl-fix'\n\nUpgrade the minimum Perl version enforced by meson-based build to\nmatch what Makefile-based build uses.\n\n* po/meson-perl-fix:\nmeson: fix Perl version check for Meson versions before 1.7.0\nmeson: bump minimum required Perl version to 5.26.0"]
	f66d1423f528403a33e8984f765801deb1b9cb97 [label=f66d142 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nThu Jan 16 22:35:53 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 22:30:03 2025 -0800\n\nbuiltin: send usage() help text to standard output\n\nUsing the show_usage_and_exit_if_asked() helper we introduced\nearlier, fix callers of usage() that want to show the help text when\nexplicitly asked by the end-user.  The help text now goes to the\nstandard output stream for them.\n\nThese are the bog standard \"if we got only \'-h\', then that is a\nrequest for help\" callers.  Their\n\nif (argc == 2 && !strcmp(argv[1], \"-h\"))\nusage(message);\n\nare simply replaced with\n\nshow_usage_and_exit_if_asked(argc, argv, message);\n\nWith this, the built-ins tested by t0012 all send their help text to\ntheir standard output stream, so the check in t0012 that was half\ntightened earlier is now fully tightened to insist on standard error\nstream being empty.\n\nAcked-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f6a2efdc9b24a14f294fdbedfae3df4ce55faa9f [label=f6a2efd color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nWed Jan 22 13:05:45 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 21:37:32 2025 -0800\n\nGIT-VERSION-GEN: allow running without input and output files\n\nThe GIT-VERSION-GEN script requires an input file containing formatting\ndirectives to be replaced as well as an output file that will get\noverwritten in case the file contents have changed. When computing the\nproject version for Meson we don't want to have either though:\n\n- We only want to compute the version without anything else, but don't\nhave an input file that would match that exact format. While we\ncould of course introduce a new file just for that usecase, it feels\nsuboptimal to add another file every time we want to have a slightly\ndifferent format for versioned data.\n\n- The computed version needs to be read from stdout so that Meson can\nwire it up for the project.\n\nExtend the script to handle both usecases by recognizing `--format=` as\nalternative to providing an input path and by writing to stdout in case\nno output file was given.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f6dcf4099927beaea0e4a3231f442bd78beb1814 [label=f6dcf40 color=gold3 fillcolor=gold3 tooltip="author: Luke Shumaker <lukeshu@datawire.io>\nMon Feb 24 15:27:39 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:25 2025 -0800\n\ngit-fast-import.adoc: add missing LF in the BNF\n\nSigned-off-by: Luke Shumaker <lukeshu@datawire.io>\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f705b3209ce9f624048d39a62745ce582d01df2c [label=f705b32 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:37 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Feb 19 00:31:37 2025 -0800\n\nSync with 'master'"]
	f74eae3e475f7d043fd0d4c9ce21f661125b630a [label=f74eae3 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:27 2024 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Dec 23 18:32:27 2024 -0800\n\nMerge branch 'ma/asciidoctor-build-fixes'\n\nA topic to optionally build with meson, which has graduated to\n'master' recently, broke Documentation pipeline with asciidoctor\nfor the normal Makefile build as well as meson-based one, which\nhave been corrected.\n\n* ma/asciidoctor-build-fixes:\nasciidoctor-extensions.rb.in: inject GIT_DATE\nasciidoctor-extensions.rb.in: add missing word\nasciidoctor-extensions.rb.in: delete existing <refmiscinfo/>"]
	f8b9821f7d4f5239911794d03ac74edf27d711e6 [label=f8b9821 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 28 22:02:23 2025 -0800\n\nMerge branch \'jk/pack-header-parse-alignment-fix\'\n\nIt was possible for \"git unpack-objects\" and \"git index-pack\" to\nmake an unaligned access, which has been corrected.\n\n* jk/pack-header-parse-alignment-fix:\nindex-pack, unpack-objects: use skip_prefix to avoid magic number\nindex-pack, unpack-objects: use get_be32() for reading pack header\nparse_pack_header_option(): avoid unaligned memory writes\npackfile: factor out --pack_header argument parsing\nbswap.h: squelch potential sparse -Wcast-truncate warnings"]
	f8d95a323a088d88b5db1dd1cb2d554ac73caa10 [label=f8d95a3 color=gold3 fillcolor=gold3 tooltip="author: M Hickford <mirth.hickford@gmail.com>\nTue Feb 18 08:45:51 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:03 2025 -0800\n\ncontrib/credential: fix compilation of wincred helper with MSVC\n\nThe git-credential-wincred helper does not compile on Windows with\nMicrosoft Visual Studio because of our use of `__attribute__()`, which\nits compiler doesn\'t support. While the rest of our codebase would know\nto handle this because we redefine the macro in \"compat/msvc.h\", this\nstub isn\'t available here because we don\'t include \"git-compat-util.h\"\nin the first place.\n\nFix the issue by making the attribute depend on the `_MSC_VER`\npreprocessor macro.\n\nSigned-off-by: M Hickford <mirth.hickford@gmail.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f8ed12dec459df9ea0d43ccacc93cb2c32702c0e [label=f8ed12d color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:49 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:38 2025 -0800\n\nreftable/basics: stop using `SWAP()` macro\n\nStop using `SWAP()` macro in favor of an open-coded variant of it. Note\nthat this also requires us to open-code the build assert that `SWAP()`\nitself uses to verify that the size of both variables matches.\n\nThis is done to reduce our dependency on the Git codebase.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f8f5af2952e76b4293f1cf0ff09d0e80697f6734 [label=f8f5af2 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 01:35:13 2025 -0800\n\nMerge branch \'as/long-option-help-i18n\'\n\nTweak the help text used for the option value placeholders by\nparse-options API so that translations can customize the \"<>\"\nplaceholder signal (e.g. \"--option=<value>\").\n\n* as/long-option-help-i18n:\nparse-options: localize mark-up of placeholder text in the short help"]
	f93b2a04243ee1a95920ae02a9423accbe1c3719 [label=f93b2a0 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 10:20:50 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 19:55:38 2025 -0800\n\nreftable/basics: introduce `REFTABLE_UNUSED` annotation\n\nIntroduce the `REFTABLE_UNUSED` annotation and replace all existing\nusers of `UNUSED` in the reftable library to use the new macro instead.\n\nNote that we unconditionally define `MAYBE_UNUSED` in the exact same\nway, so doing so unconditionally for `REFTABLE_UNUSED` should be fine,\ntoo.\n\nSuggested-by: Toon Claes <toon@iotcl.com>\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f93ff170b93a1782659637824b25923245ac9dd1 [label=f93ff17 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 21:57:19 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 13 21:57:19 2025 -0800\n\nGit 2.48.1\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f9467895d884908d5588fc920997b2e53dfb3302 [label=f946789 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nFri Feb 07 12:03:29 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 07 18:59:21 2025 -0800\n\nsubmodule: refactor `submodule_to_gitdir()` to accept a repo\n\nThe `submodule_to_gitdir()` function implicitly uses `the_repository` to\nresolve submodule paths. Refactor the function to instead accept a repo\nas parameter to remove the dependency on global state.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	f9d4bb7b9ae14a740f6c074149e7948bf6dcc3fb [label=f9d4bb7 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 18:24:25 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 03 18:24:25 2025 -0800\n\nMerge branch \'ps/ci-misc-updates\' into jk/ci-coverity-update\n\n* ps/ci-misc-updates:\nci: remove stale code for Azure Pipelines\nci: use latest Ubuntu release\nci: stop special-casing for Ubuntu 16.04\ngitlab-ci: add linux32 job testing against i386\ngitlab-ci: remove the \"linux-old\" job\ngithub: simplify computation of the job\'s distro\ngithub: convert all Linux jobs to be containerized\ngithub: adapt containerized jobs to be rootless\nt7422: fix flaky test caused by buffered stdout\nt0060: fix EBUSY in MinGW when setting up runtime prefix"]
	f9f51594f226f52022ca7a78d35f499524387cfe [label=f9f5159 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Mar 06 16:08:47 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Mar 06 18:39:40 2025 -0800\n\nrefs: reuse iterators when determining refname availability\n\nWhen verifying whether refnames are available we have to verify whether\nany reference exists that is nested under the current reference. E.g.\ngiven a reference \"refs/heads/foo\", we must make sure that there is no\nother reference \"refs/heads/foo/*\".\n\nThis check is performed using a ref iterator with the prefix set to the\nnested reference namespace. Until now it used to not be possible to\nreseek iterators, so we always had to reallocate the iterator for every\nsingle reference we\'re about to check. This keeps us from reusing state\nthat the iterator may have and that may make it work more efficiently.\n\nRefactor the logic to reseek iterators. This leads to a sizeable speedup\nwith the \"reftable\" backend:\n\nBenchmark 1: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):      39.8 ms ±   0.9 ms    [User: 29.7 ms, System: 9.8 ms]\nRange (min … max):    38.4 ms …  42.0 ms    62 runs\n\nBenchmark 2: update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):      31.9 ms ±   1.1 ms    [User: 27.0 ms, System: 4.5 ms]\nRange (min … max):    29.8 ms …  34.3 ms    74 runs\n\nSummary\nupdate-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD) ran\n1.25 ± 0.05 times faster than update-ref: create many refs (refformat = reftable, preexisting = 100000, new = 10000, revision = HEAD~)\n\nThe \"files\" backend doesn\'t really show a huge impact:\n\nBenchmark 1: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\nTime (mean ± σ):     392.3 ms ±   7.1 ms    [User: 59.7 ms, System: 328.8 ms]\nRange (min … max):   384.6 ms … 404.5 ms    10 runs\n\nBenchmark 2: update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD)\nTime (mean ± σ):     387.7 ms ±   7.4 ms    [User: 54.6 ms, System: 329.6 ms]\nRange (min … max):   377.0 ms … 397.7 ms    10 runs\n\nSummary\nupdate-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD) ran\n1.01 ± 0.03 times faster than update-ref: create many refs (refformat = files, preexisting = 100000, new = 10000, revision = HEAD~)\n\nThis is mostly because it is way slower to begin with because it has to\ncreate a separate file for each new reference, so the milliseconds we\nshave off by reseeking the iterator doesn\'t really translate into a\nsignificant relative improvement.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fa247cfd4e00fafd7c8d3566ee69b6269d42c977 [label=fa247cf color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:10 2025 -0800\n\nMerge branch 'dm/editorconfig-bash-is-like-sh' into next\n\nThe editorconfig file is updated to tell us that bash scripts are\nsimilar to general Bourne shell scripts.\n\n* dm/editorconfig-bash-is-like-sh:\neditorconfig: add .bash extension"]
	fa6416bf7099adfa1924e2ffa2316a00cfdbc6ef [label=fa6416b color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:21 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 08 01:54:21 2025 -0800\n\nMerge branch 'pb/doc-follow-remote-head' into jch\n\n* pb/doc-follow-remote-head:\nconfig/remote.txt: improve wording for 'remote.<name>.followRemoteHEAD'\nconfig/remote.txt: reunite 'severOption' description paragraphs"]
	fa779fa88d18f550421ae777f7e048dd08ad0006 [label=fa779fa color=gold3 fillcolor=gold3 tooltip="author: Todd Zullinger <tmz@pobox.com>\nSat Mar 01 16:36:03 2025 -0500\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Mar 01 19:00:51 2025 -0800\n\ncontrib/contacts: rename .txt to .adoc\n\nThe .txt extensions were changed to .adoc in 1f010d6bdf (doc: use .adoc\nextension for AsciiDoc files, 2025-01-20).\n\nDo the same for contrib/contacts.\n\nSigned-off-by: Todd Zullinger <tmz@pobox.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fae4c40e90f10851a15b8fd4a77e90e3977968ed [label=fae4c40 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 19:04:52 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 03 19:04:52 2025 -0800\n\nWhat's cooking (2025/01 #01)"]
	fb8899337a87ff32ae4e9d08803c1a7c4fc0df0a [label=fb88993 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 23:40:31 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Feb 28 23:40:31 2025 -0800\n\nWhat's cooking (2025/02 #09)"]
	fbe8d3079d4a96aeb4e4529cc93cc0043b759a05 [label=fbe8d30 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:20:20 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 10 18:20:20 2025 -0800\n\nGit 2.48\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fc07f73f2459f53f1ea784ea984af9403f4b4439 [label=fc07f73 color=gold3 fillcolor=gold3 tooltip="author: Christian Couder <christian.couder@gmail.com>\nMon Feb 24 15:27:40 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Feb 24 17:54:25 2025 -0800\n\nfast-export: fix missing whitespace after switch\n\n\"Documentation/CodingGuidelines\" says that there should be whitespaces\naround operators like \'if\', \'switch\', \'for\', etc.\n\nLet\'s fix this in \"builtin/fast-export.c\".\n\nSigned-off-by: Christian Couder <chriscool@tuxfamily.org>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fc613c01d45b034290e7fb69977a2cc2715b1259 [label=fc613c0 color=gold3 fillcolor=gold3 tooltip="author: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:45:43 2025 +0800\ncommitter: Jiang Xin <worldhello.net@gmail.com>\nTue Jan 07 08:45:43 2025 +0800\n\nMerge branch '2.48-uk-update' of github.com:arkid15r/git-ukrainian-l10n\n\n* '2.48-uk-update' of github.com:arkid15r/git-ukrainian-l10n:\nl10n: uk: v2.48 update"]
	fc62e033cd93ff6b93e312d89bfb5683a4c6f90c [label=fc62e03 color=gold3 fillcolor=gold3 tooltip="author: Derrick Stolee <stolee@gmail.com>\nMon Jan 27 20:02:29 2025 +0000\ncommitter: Junio C Hamano <gitster@pobox.com>\nMon Jan 27 22:21:41 2025 -0800\n\npack-objects: add --name-hash-version option\n\nThe previous change introduced a new pack_name_hash_v2() function that\nintends to satisfy much of the hash locality features of the existing\npack_name_hash() function while also distinguishing paths with similar\nfinal components of their paths.\n\nThis change adds a new --name-hash-version option for \'git pack-objects\'\nto allow users to select their preferred function version. This use of\nan integer version allows for future expansion and a direct way to later\nstore a name hash version in the .bitmap format.\n\nFor now, let\'s consider how effective this mechanism is when repacking a\nrepository with different name hash versions. Specifically, we will\nexecute \'git pack-objects\' the same way a \'git repack -adf\' process\nwould, except we include --name-hash-version=<n> for testing.\n\nOn the Git repository, we do not expect much difference. All path names\nare short. This is backed by our results:\n\n| Stage                 | Pack Size | Repack Time |\n|-----------------------|-----------|-------------|\n| After clone           | 260 MB    | N/A         |\n| --name-hash-version=1 | 127 MB    | 129s        |\n| --name-hash-version=2 | 127 MB    | 112s        |\n\nThis example demonstrates how there is some natural overhead coming from\nthe cloned copy because the server is hosting many forks and has not\noptimized for exactly this set of reachable objects. But the full repack\nhas similar characteristics for both versions.\n\nLet\'s consider some repositories that are hitting too many collisions\nwith version 1. First, let\'s explore the kinds of paths that are\ncommonly causing these collisions:\n\n* \"/CHANGELOG.json\" is 15 characters, and is created by the beachball\n[1] tool. Only the final character of the parent directory can\ndifferentiate different versions of this file, but also only the two\nmost-significant digits. If that character is a letter, then this is\nalways a collision. Similar issues occur with the similar\n\"/CHANGELOG.md\" path, though there is more opportunity for\ndifferences In the parent directory.\n\n* Localization files frequently have common filenames but\ndifferentiates via parent directories. In C#, the name\n\"/strings.resx.lcl\" is used for these localization files and they\nwill all collide in name-hash.\n\n[1] https://github.com/microsoft/beachball\n\nI\'ve come across many other examples where some internal tool uses a\ncommon name across multiple directories and is causing Git to repack\npoorly due to name-hash collisions.\n\nOne open-source example is the fluentui [2] repo, which  uses beachball\nto generate CHANGELOG.json and CHANGELOG.md files, and these files have\nvery poor delta characteristics when comparing against versions across\nparent directories.\n\n| Stage                 | Pack Size | Repack Time |\n|-----------------------|-----------|-------------|\n| After clone           | 694 MB    | N/A         |\n| --name-hash-version=1 | 438 MB    | 728s        |\n| --name-hash-version=2 | 168 MB    | 142s        |\n\n[2] https://github.com/microsoft/fluentui\n\nIn this example, we see significant gains in the compressed packfile\nsize as well as the time taken to compute the packfile.\n\nUsing a collection of repositories that use the beachball tool, I was\nable to make similar comparisions with dramatic results. While the\nfluentui repo is public, the others are private so cannot be shared for\nreproduction. The results are so significant that I find it important to\nshare here:\n\n| Repo     | --name-hash-version=1 | --name-hash-version=2 |\n|----------|-----------------------|-----------------------|\n| fluentui |               440 MB  |               161 MB  |\n| Repo B   |             6,248 MB  |               856 MB  |\n| Repo C   |            37,278 MB  |             6,755 MB  |\n| Repo D   |           131,204 MB  |             7,463 MB  |\n\nFuture changes could include making --name-hash-version implied by a config\nvalue or even implied by default during a full repack.\n\nIt is important to point out that the name hash value is stored in the\n.bitmap file format, so we must force --name-hash-version=1 when bitmaps\nare being read or written. Later, the bitmap format could be updated to\nbe aware of the name hash version so deltas can be quickly computed\nacross the bitmapped/not-bitmapped boundary. To promote the safety of\nthis parameter, the validate_name_hash_version() method will die() if\nthe given name-hash version is incorrect and will disable newer versions\nif not yet compatible with other features, such as --write-bitmap-index.\n\nSigned-off-by: Derrick Stolee <stolee@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fc89d14c639faec779956b4e3cd873c07bd4327b [label=fc89d14 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:13:01 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 01 23:13:01 2025 -0800\n\nRevert barrier-based LSan threading race workaround\n\nThe extra \"barrier\" approach was too much code whose sole purpose\nwas to work around a race that is not even ours (i.e. in LSan\'s\nteardown code).\n\nIn preparation for queuing a solution taking a much-less-invasive\napproach, let\'s revert them."]
	fd21e6e447516421c5abdba21b483187a5637ba2 [label=fd21e6e color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nTue Feb 18 08:45:50 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Feb 18 20:40:03 2025 -0800\n\ncontrib/credential: fix \"netrc\" tests with out-of-tree builds\n\nTests of the \"netrc\" credential helper aren\'t prepared to handle\nout-of-tree builds:\n\n- They expect the \"test.pl\" script to be located relative to the build\ndirectory, even though it is located in the source directory.\n\n- They expect the built \"git-credential-netrc\" helper to be located\nrelative to the \"test.pl\" file, evne though it is loated in the\nbuild directory.\n\nThis works alright as long as source and build directories are the same,\nbut starts to break apart with Meson.\n\nFix these first issue by using the new \"GIT_SOURCE_DIR\" variable to\nlocate the test script itself. And fix the second issue by introducing a\nnew environment variable \"CREDENTIAL_NETRC_PATH\" that can be set for\nout-of-tree builds to locate the built credential helper.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fd3038fefdd56ccacb01f807da193b6b6bbb9e7a [label=fd3038f color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:11 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Mar 04 17:13:11 2025 -0800\n\nMerge branch 'pw/build-meson-technical-and-howto-docs' into next\n\nMeson-based build procedure forgot to build some docs, which has\nbeen corrected.\n\n* pw/build-meson-technical-and-howto-docs:\nmeson: fix building technical and howto docs"]
	fdeca639b8c4d83fe6c16d2a5bc65ef08af0adcb [label=fdeca63 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nThu Jan 30 15:44:01 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Jan 30 23:54:08 2025 -0800\n\nmeson: improve handling of `sane_tool_path` option\n\nThe `sane_tool_path` option can be used to override the PATH variable\nfrom which the build process, tests and ultimately Git will end up\npicking programs from. It is currently lacking though because we only\nuse it to populate the PATH environment variable for executed scripts\nand for the `BROKEN_PATH_FIX` mechanism, but we don't use it to find\nprograms used in the build process itself.\n\nFix this issue by treating it similar to the Windows-specific paths,\nwhich will make us use it both to find programs and to populate the PATH\nenvironment variable.\n\nTo help with this fix, change the type of the option to be an array of\npaths, which makes the handling a bit easier for us. It's also the\ncorrect thing to do as the input indeed is a list of paths.\n\nFurthermore, the option now overrides the default behaviour on Windows,\nwhich si to pick up tools from Git for Windows. This is done so that it\nbecomes easier to override that default behaviour in case it's not\ndesired.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fdf3820b7ef69dcf887bd86565e2442f89edc7c0 [label=fdf3820 color=gold3 fillcolor=gold3 tooltip="author: shejialuo <shejialuo@gmail.com>\nThu Feb 27 17:06:06 2025 +0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 27 23:03:07 2025 -0800\n\nbuiltin/refs: get worktrees without reading head information\n\nIn \"packed-backend.c\", there are some functions such as \"create_snapshot\"\nand \"next_record\" which would check the correctness of the content of\nthe \"packed-ref\" file. When anything is bad, the program will die.\n\nIt may seem that we have nothing relevant to above feature, because we\nare going to read and parse the raw \"packed-ref\" file without creating\nthe snapshot and using the ref iterator to check the consistency.\n\nHowever, when using \"get_worktrees\" in \"builtin/refs\", we would parse\nthe \"HEAD\" information. If the referent of the \"HEAD\" is inside the\n\"packed-ref\", we will call \"create_snapshot\" function to parse the\n\"packed-ref\" to get the information. No matter whether the entry of\n\"HEAD\" in \"packed-ref\" is correct, \"create_snapshot\" would call\n\"verify_buffer_safe\" to check whether there is a newline in the last\nline of the file. If not, the program will die.\n\nAlthough this behavior has no harm for the program, it will\nshort-circuit the program. When the users execute \"git refs verify\" or\n\"git fsck\", we should avoid reading the head information, which may\nexecute the read operation in packed backend with stricter checks to die\nthe program. Instead, we should continue to check other parts of the\n\"packed-refs\" file completely.\n\nFortunately, in 465a22b338 (worktree: skip reading HEAD when repairing\nworktrees, 2023-12-29), we have introduced a function\n\"get_worktrees_internal\" which allows us to get worktrees without\nreading head information.\n\nCreate a new exposed function \"get_worktrees_without_reading_head\", then\nreplace the \"get_worktrees\" in \"builtin/refs\" with the new created\nfunction.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nMentored-by: Karthik Nayak <karthik.188@gmail.com>\nSigned-off-by: shejialuo <shejialuo@gmail.com>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	fe4e60a33197d0b3e003cdc5ca1e94e6d092da89 [label=fe4e60a color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 17:45:51 2025 -0800\n\nMerge branch \'ps/build-meson-subtree\' into next\n\nTHe meson-driven build is now aware of \"git-subtree\" housed in\ncontrib/subtree hierarchy.\n\n* ps/build-meson-subtree:\nmeson: wire up the git-subtree(1) command\nmeson: introduce build option for contrib\ncontrib/subtree: fix building docs"]
	fea214e48d5f406a20433da975a52d9d0e472aec [label=fea214e color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 23:02:49 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Jan 22 23:02:49 2025 -0800\n\nWhat's cooking (2025/01 #06)"]
	feffb34257ee8eef18cc6a3a5a4f01d40720bda1 [label=feffb34 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:43 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nWed Mar 05 19:37:43 2025 -0800\n\nMerge branch \'ps/path-sans-the-repository\'\n\nThe path.[ch] API takes an explicit repository parameter passed\nthroughout the callchain, instead of relying on the_repository\nsingleton instance.\n\n* ps/path-sans-the-repository:\npath: adjust last remaining users of `the_repository`\nenvironment: move access to \"core.sharedRepository\" into repo settings\nenvironment: move access to \"core.hooksPath\" into repo settings\nrepo-settings: introduce function to clear struct\npath: drop `git_path()` in favor of `repo_git_path()`\nrerere: let `rerere_path()` write paths into a caller-provided buffer\npath: drop `git_common_path()` in favor of `repo_common_path()`\nworktree: return allocated string from `get_worktree_git_dir()`\npath: drop `git_path_buf()` in favor of `repo_git_path_replace()`\npath: drop `git_pathdup()` in favor of `repo_git_path()`\npath: drop unused `strbuf_git_path()` function\npath: refactor `repo_submodule_path()` family of functions\nsubmodule: refactor `submodule_to_gitdir()` to accept a repo\npath: refactor `repo_worktree_path()` family of functions\npath: refactor `repo_git_path()` family of functions\npath: refactor `repo_common_path()` family of functions"]
	ff9fcf71b758c504e9ecc82cc8ec07acd674097b [label=ff9fcf7 color=gold3 fillcolor=gold3 tooltip="author: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 04:12:39 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nSat Feb 15 04:12:39 2025 -0800\n\nSync with 'master'"]
	ffbd3f98f999102cab47fda4c992d7fa07e1d912 [label=ffbd3f9 color=gold3 fillcolor=gold3 tooltip="author: Seyi Kuforiji <kuforiji98@gmail.com>\nFri Jan 17 13:29:26 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nFri Jan 17 23:35:12 2025 -0800\n\nt/unit-tests: convert reftable tree test to use clar test framework\n\nAdapts reftable tree test script to clar framework by using clar\nassertions where necessary.\n\nMentored-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Seyi Kuforiji <kuforiji98@gmail.com>\nAcked-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ffbd89cbb7933081446e1dbde736d5dfce983383 [label=ffbd89c color=gold3 fillcolor=gold3 tooltip="author: Yi-Jyun Pan <pan93412@gmail.com>\nTue Dec 17 13:52:43 2024 +0800\ncommitter: Yi-Jyun Pan <pan93412@gmail.com>\nSat Dec 28 06:15:42 2024 +0800\n\ngpgsig -----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg70wnL5lPRZ7tMvjA89O0T2ClVC\nvyKqsyhOnltZVhmE4AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQIT5OZWAqgsNWgnbH/orBEKYChXRWr1jSJV6/u33hFJzhzJ4vA9OJ+9dHlTtrnhj6r\nfPm4O4WXG3YiTGc/nseQM=\n-----END SSH SIGNATURE-----\nl10n: zh_TW: Git 2.48\n\nSigned-off-by: Yi-Jyun Pan <pan93412@gmail.com>"]
	ffdfcab88c2194b66b024a21e75b855d801653a9 [label=ffdfcab color=gold3 fillcolor=gold3 tooltip="author: Illia Bobyr <illia.bobyr@gmail.com>\nWed Feb 12 04:26:54 2025 -0800\ncommitter: Junio C Hamano <gitster@pobox.com>\nThu Feb 13 00:54:25 2025 -0800\n\ndiff: docs: Use --patch-{grep,modifies} over -G/-S\n\nLong argument names are easier to read, compared to short ones.  So\nwhile short arguments are great when you want to type a command quickly,\nthe documentation readability is improved if we use long argument names.\n\nNote for reviewers:  All changes are just a replacement of `-G` with\n`--patch-grep` and `-S` with `--patch-modifies`.  But as the text was\nreformatted to fit the same width in a few places it might look like\nthere are more changes, if the diff is only line-wise and not word-wise.\n\nThe only an exception are changes in `gitdiffcore.adoc`, where I did\nrephrase a sentence.  I've moved introduction of the short versions of\nthe `--patch-{grep,modifies}` into a subsequent paragraph.  The reason\nis that I wanted to keep a note on the `-G` mnemonic, and it was awkward\nif I would repeat the short definition twice over a span of two\nparagraphs.\n\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	ffe664366890f252ad14e87c987c57e080182bca [label=ffe6643 color=gold3 fillcolor=gold3 tooltip="author: Patrick Steinhardt <ps@pks.im>\nMon Jan 20 17:17:24 2025 +0100\ncommitter: Junio C Hamano <gitster@pobox.com>\nTue Jan 21 23:20:29 2025 -0800\n\nreftable/block: adapt header and footer size to return a `size_t`\n\nThe functions `header_size()` and `footer_size()` return a positive\ninteger representing the size of the header and footer, respectively,\ndependent on the version of the reftable format. Similar to the\npreceding commit, these functions return a signed integer though, which\nis nonsensical given that there is no way for these functions to return\nnegative.\n\nAdapt the functions to return a `size_t` instead to fix a couple of sign\ncomparison warnings.\n\nSigned-off-by: Patrick Steinhardt <ps@pks.im>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>"]
	"local-branch-master" [label=master color=forestgreen fillcolor=forestgreen tooltip="-> refs/remotes/origin/master"]
	"origin/HEAD" [label="origin/HEAD" color=cornflowerblue fillcolor=cornflowerblue tooltip="origin/master"]
	"remote-branch-origin/maint" [label="origin/maint" color=firebrick fillcolor=firebrick]
	"remote-branch-origin/master" [label="origin/master" color=firebrick fillcolor=firebrick]
	"remote-branch-origin/next" [label="origin/next" color=firebrick fillcolor=firebrick]
	"remote-branch-origin/seen" [label="origin/seen" color=firebrick fillcolor=firebrick]
	"remote-branch-origin/todo" [label="origin/todo" color=firebrick fillcolor=firebrick]
	e42a29c4b39962e03c43b7ee6e32fd81ce8315a3 [label="v2.48.0" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nFri Jan 10 09:20:28 2025 -0800\n\nGit 2.48\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmeBVtwACgkQsLXohpav\n5ssbmBAAyud8ydZoSKpKVVaU02oiN9gVLudKSw3PmIz1gITdroMtO5jXwpNXoxHU\nknsl1v+TG38cqBnAj7rpoOx3yuaTWmWBRk5zrN2IVdSllBh8eHDoqcIRVO1BnV7N\nMryzvi1RTc2a5wXJ2ffG8pffpayJC6vq4ChxOb9uvHOcRL/IR61jFQfQFo9LPL8V\nqX5oPjclxRJDqJ437tDg6Le1sh2V3AxA75j52hBZwINOBgvrdyCNKbjL97h9bLXd\nPdhqLI4z6wjROp+WzyaZv+bDVFqkQxzCmLZlfvMF0AtNSO8vw/xurIb5vBpvxEJo\nD9XecLxCHP597xVvp3wnMAZ95bcNoo9IUZEm3u9z0asX2CjwNJMz6MUuWgF30dyL\npDxtptSJFch4xUBQZQOGYS1o59tqJeKn4MIqbrULREeYfbq8BCuVNFIvzkTjbv9O\nS2Vwe2doCJjcFn//dVtfzaugKIl19IWpWpz47nzHy3vCE1ggXMQiBZ2V/EW8Y8ps\nKPoEWpgggK8snZXuWj/kgkKSE10PNwlk83uYpzKaayyhjC+6f89Sk0cBRBSM9GC2\necvuJ2iqavrS0w/NXPXSNAXFFxlxejdlCR43x/IdCnfPbw+ba8wi1MqJHKbkcgZ8\nfaxbM0hA5Wo2IFxDi6/3xtnM+vUjDg5qKYsrjYBvWua7kdjE+GQ=\n=9u46\n-----END PGP SIGNATURE-----\n"]
	b3f05734c6457855f7db082e94438ef2125e973c [label="v2.48.0-rc1" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nMon Dec 30 06:58:50 2024 -0800\n\nGit 2.48-rc1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmdytSoACgkQsLXohpav\n5stfuxAArGK7F0IRRzgA59HXl2YHnPs7qtVMHAJFhErTRKfFf9RoawZS0T9B7QpU\ntktW75Mjk4MjQbdLgqyN7vYa5OnffU9YAZJ1dG3/WaiwVOKZCSA1hswiNKEJTxSH\ns9XFT1qbsG7uFcrgMTmewRLs08DsG7VYcW2RkXFMO5Woh+eRFIemFYV10XyOVOxD\nHu47b3OqXczr6a/rzFW+B25d4YiTJtG5iDSZnO5qOo65iHBQ155J3jL0vbkYIJ7K\njeqYgqcP14Y432Mx2ECp7jn4Z1z/qBWeemT9/vMgnFq5rUmyQd2li/sl6zX99pZK\nxgJPwKr+35dcAnmgE4TC4o0pBZwqeKKSBsLGtruVJgLpmAWnUyYkJ/pfRCdXGVuK\nH4qGNVHHzXC768ONzmh1tv3Dw0snhSyuecViGvQ/zZ8TAm0S4Lj+8CUHJPHB16Xv\nplwOB5Qjmz1RZrOyIISg6LSLyLwaWmiYlFd87DTXOVQnrwGxAFBfAwzRn1YhPe8G\nr7phBLrGiGBtECyytyRzlpIN3PlAmGnXukyyyxD+4ZmB7eig/0q1Kb+K0nkcSTdf\nFsxU4KWU0iE6cgWdn/sxpaYE30UGF1B9QOi2LxtBs9feyIwEIU3RhysZOi11Gjyo\nE+M381llKeRobYB3w2eaQRSGW+pkvA5yhfQRlXlT8UiF7UJ02l0=\n=8m64\n-----END PGP SIGNATURE-----\n"]
	"6644ead45e228485686e71a7af4bb9c5c05b382c" [label="v2.48.0-rc2" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nMon Jan 6 08:25:07 2025 -0800\n\nGit 2.48-rc2\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmd8A+MACgkQsLXohpav\n5suUshAA4b/LaAlJQXhC3I6r8yyxhBAmvXJp6j34z5zAeSj8BuP5oyIzVr5gr0rI\nQnyOwttDYBwjgrjTJut85TyJQaXALmtVGWOegSMyR1row0MczqwLNcDKKMSmkagk\nNFbPBpNqfIFTrv/1f7HhabNnWSu5J0zCWMq91gPZz1LUHSEyO/aptfWl9uMIf2j4\n8W595vr8u16Ei4xz+1Y2eAfPUCUtQhg67jOV4bnRKPjkNmtUHeQjNpBzafRMr6Su\n/vdS2QddJiWblgZPVbovFHliKh+HYTIyg+PyU/rmwrOE64rv6xLYakobe0+QeNfm\nCWVfiPf1B6pIzeW/bKF2oT8ivqmXFv556FcaL71VKYtIWhBYC8YAiPB6D4ERAe+p\nUj/WpkCBcy1Y1YJ6zxDEWExx/fSGcyKNELMK0K6lMgFBMSGu4aQMcMFP+Tv9QMT7\nPk//Q8iaOUvrFB6doKkr5APd96JKv7Vd22W7I6DNaGn+GEGXBoOonMdxp2OJGUfb\nsSzYalyAbrciKHViPKpVY3NbHST8P1pZ4KwmZlyz2UqDyP6k0xjTtYeVjOzrohmP\ncHUoJAl14Nq9yzG8J4VYgrEX1cx5c/QT/ANM82AenqYJjrB4PuuxVY06eD+bXFfD\nV6yQ9qUIl8M8DeOHzBEUu2YNEDZ5De/0Xwjo5TI2s+xFmBmZETk=\n=zJTX\n-----END PGP SIGNATURE-----\n"]
	"6768cd3982a5cf8df192224d4da8c3f03d4cb964" [label="v2.48.1" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nMon Jan 13 12:57:43 2025 -0800\n\nGit 2.48.1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmeFfkcACgkQsLXohpav\n5ssp6g//UZovY9wBY/yTEpDoIfJURbahazUA8+1uvxkbkOREIZdZqboj4TiiUg+o\n0UyVSCYniFaSlE4ToO4ISg0r7sgBMtBDkNH5ZHtVVfr9LFnRYH8/zSv87CzteEhQ\nmZiwPVVnVDmxplbZXsmXi+elAzpbNWXyfmCdFnPxfJht4pcj0pjwDQoIRZr2p7/9\n2hwMPzLvQhqul2j501DA1YvGAxdJ4nLuYO+0Yg2//nmTs9XN2jjvk4kQvoiOULnM\n0aWfNNBOCs2I7BvnDguEdsGG3u9pKgBEqXWSYbb8V9FcoR06tMWmSYAGvViUcCMu\n/sB08VKxymF9KPC4xf9ktoyHLfV3AahF6/T6hEGMvmdqYmrwAUjDr7T+LLwfATS1\nfBPfuMjVRiveMO/mXEv5KPpDMeSyCeZsMWk/Gu0WFE8XXRf9O96CrH7jvMwjeZI3\nc/qOFKPjhjED2GrNptH/WKnrdm6O9eMO7dhEBMU5nacSJcNRDLLWO+W2EhJfEDo3\nluQ/y+PBkvukRVrj4SjUkr7yTHNktcMvk8UhLwgjdZ7wcPKU2VcLaStFRi6ge0JH\nnegkIdhaYM08GFoURx5/fnbURQaP60qCftEOc9rprIjeqH3uCyUqD2M9zUPJPkjS\nHeNdyl2lxdSiTxjWPo4GG360G0yuL25VQScuwm9NKuv3RSXrJOs=\n=v7/L\n-----END PGP SIGNATURE-----\n"]
	ea5b86dd3fa3a73809e2f8a58318a2a07e059347 [label="v2.49.0-rc0" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nWed Feb 26 09:21:45 2025 -0800\n\nGit 2.49-rc0\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAme/TakACgkQsLXohpav\n5svfjg//VFdd7H7mD1eGklMW1m7yMy44qHzAVqN3p66Y5cRFPGm0EOPlU+Vzpoxz\nIAXSPGV0flh5I8Z9/tGIm78qr2is6wRvckvxVgCR3Gy7e4U75P1fTGX5AFl2tzm+\nxnpgCEncA6ZZeWhGAvV0+lkXuL5MMFtLdWoTKmmi4cr7QXtuFAyCRbH3S/FMkYFy\nRqKRitxTlb6XDcEfcrKjathK15YkOF3+Te1gLYt51IUxspevUJidrmEq/RPqhB64\nY0Uez8M7rnBHySIpXv5bgYmGMrKS1MQADUPciDYl0g0ZMYWXqR8MlPJNpkiLl/B0\n+oQVYQuh4EfqgrgjBUov66PfjaghtpmRjG0WwnoU4a/KuJHGICp996k0IS08GsxZ\nt1IAO4OoBUd3U4g3umduSuBvX3T/PvO8qYG/57Lb+40LJw/Y4tLqcdPuPs42x7ND\nooW1aesUSco9XkP4Y8aurkWFDafwPaapUlI8xa2bOGuTy66RC/uL4BZL2yA6Xzfk\nNnu9OC+ONfkOb8uKZBmXI7aP36m/+xJyGbXvW86m2Hby1gRvgRBWhG+mz1sUU+Mf\nmRCwRiGP4tUxVQ47DssgGddgOldGd/ZPwWFguHYeqn785/ol3rUgBpv7hvwvEenx\nNcygeZWSHjFRniIK3XTN78pMuUMi2QrWHqIMidXDBvtKBpvntf0=\n=K8b4\n-----END PGP SIGNATURE-----\n"]
	"3074516e1fc49cd2b5fbe53779341d93a45d1c7d" [label="v2.49.0-rc1" color=pink fillcolor=pink tooltip="Junio C Hamano <gitster@pobox.com>\nTue Mar 4 08:19:48 2025 -0800\n\nGit 2.49-rc1\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE4fA2sf7nIh/HeOzvsLXohpav5ssFAmfHKCQACgkQsLXohpav\n5svnDBAAjBNdqmxKmZG0rXZXwXLEtckyzktSdEZWov/5B2IEfYcBQBlrUGTmwOzx\nO51d5q0Jn6EG4JAEZ7QyS4YbH2+OFP+PQNt6TcdRTAhFc2lX21PkYo8zl8rWhSek\nfCI4K6hU3Yd6YdRYG6KffY/wG4y7DwzLpsyPMgAIlUMVG0DeIYR4mMDHrRSB5yi7\n9NkGRiCcC3NPmOq+nOJwvagTIrE/E6ThlFxmLHLtCUKm2a+yI8ylgjc5z/Z0t0RR\n7b75wkGLYUxEXNG41AHkxQ5fwiQFNVkjtUuy56Wgxa0hYq7KIliGPPKDmTxfcxug\nZw/ow51k1rmJRk2ou1RsCuSJC5v7KMbcX5Yr2NkYTss84fQxkdKegSbG0gD0M7pU\ntWsw8p5q7hLKijut0hRWfbC3cQRLEw1FxIf2Ft8xccPYzKMiEwSvRjAism7XSl3+\n/DTW/jSD74xKL9+zCFVx2MDu5vhY5so56OkLjfuBxrpK5dqtjg+vLs5wGQXT/HiO\nsY4gz6XY2lSoQXqwffY7Xqh9h7iyf44TL3NkUTUJ46EZbyEldbAEqmXPk6+9hiwR\n0x1C60Cg3U77NPq8GR6KFAeN2pEw8jXsLjeSAtPl8VARhWtMMK2P9jWoWg1OcRqT\n5+xk4bojEOLi/LgkilkzYbF1XBVXZ5PDoA3hlwSMWaoeLfGkOj0=\n=UmBH\n-----END PGP SIGNATURE-----\n"]
	"0148fd836a9b1954833471f61b4d2e058797af55" -> "1782abd7734acffb8ebc37b74e120fd4c4b9c4cc"
	"017bd8923986acd4992fd21f3451fdd15ec6edce" -> e7c1b9f1231e49f5e0c5250ec84c68376619f415
	"01a587da8cf89f9d6c8c5b19ea3e109efb7c9b7c" -> e676694298c4a8d9f6fdf3844cbfb03bbee552cc
	"01b9465440ef96427162197e6a284dbfdeae7428" -> d533c1069724d39153f5ae78f2c3a3f2b6a5a6e2
	"01f2b845292a11ef1d0a77a705fb003137259cb0" -> "09cbf1597edde2b0200ecbf469c78689c4dcb12f"
	"01f2b845292a11ef1d0a77a705fb003137259cb0" -> "9432ccae14b2e7d6f02ecab0f3d450d325e940e3"
	"028f618658e34230e1d65678f14b6876e0f9856d" -> f1ce861c34bffbc02998173016b0bca0f6d9f6c4
	"02b355f54658bbadc7cc82ebabab6bc78d5ff64a" -> "087ac486745129377a04d6921cddeac291c664aa"
	"02b355f54658bbadc7cc82ebabab6bc78d5ff64a" -> "15341c8499a71502089bf6644d7a6a980824d5e3"
	"02ed88f6a23d142f6e5c7e0b351704654796a6fe" -> c09c29b43046373a0ace268c6de6266b5817dbc3
	"03944513488db4a81fdb4c21c3b515e4cb260b05" -> "60cb8e79cbdb754af8cbd1e3c1bee755dcf07f2c"
	"03e7c454e9bc15f4fa046bd3a5f6147bbd0480e6" -> "8216cf9419a3a8dfcd65b4caad72c4e6cb9c0513"
	"04292c3796bb92664f6111326215d9c060ef71c8" -> a8dd3821fe4fcf1524537ef97e4f5e2cf68ce949
	"044b6f04f23d6c7e3c3750c9829db96b71470874" -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	"0474e4a81581b20d3c2855b42bbc060c6b6568b5" -> "140e9b7c57cf7ce63d434c530df953553bf4628e"
	"04aeeeaab1f02213703c4e1997b2c2f1ca0f8f96" -> "95c09e4d07492fa9e4ad951a268b4ea6bae69038"
	"04c29bdea04e5af5193fd386b62a48c320351f19" -> c5bc9a7f94a41c3e719afebf4a6c3e04cba82e4d
	"0543300b594eb1337ce33415997b47594bf29056" -> "72d385824a75e1d39b2a4395852dc954907fcc7d"
	"0578f1e66aa381356bfe2f53decf3864d88d23d3" -> b2755c15e2359c5436de062bf33a155a99c72c03
	"0696ebe9ce533cf3c839c9eb2bd2331c8fa0f014" -> b88540045c3d70dbf4138c8f32209fea32e40d90
	"06cd5a066d4063da529f6417cb6ca5678055a807" -> d2521b5b2190845117d8aa901d598f5f96d12f26
	"06d9252bccc39c335fa5ab36adf724df4570248c" -> "561de07b57fcc2057fb6b96043f008a5b83f140c"
	"06e496e5d17b34836797d024be7da6afab914ce4" -> c869f76c1da498c41f2eeb3e553b9d46495ea300
	"07242c2a5afb2a633feb110b1aa74e2adcc37575" -> "8e4710f011dce286d24838fdafd5ce52cfac5285"
	"072e3aa3a5c29ca1b68a7aaf570a0a8e7ab67127" -> a204f92d1cb08f3a0450551b5e6759284bbab12a
	"07723ff28a6802dc6e9584e99bf362560f12a43f" -> "211cb0a2fad2a9a4236d6768aabd764b3350a3c6"
	"07723ff28a6802dc6e9584e99bf362560f12a43f" -> "5e22728f25290677f8ef5f2938a7e0ee24d432ac"
	"07892da045c51eb97ad77aabe1ae4c34170ab3b4" -> d4cd75f6bd592e733c3e5b1607aaed991e93902f
	"079036d154c003431f45b7bf2341a84351f260f4" -> "7dc4bdaea8fee93e3653ceed32d2d89d502d67cd"
	"079036d154c003431f45b7bf2341a84351f260f4" -> a0bea0978fe80a64e7ccc27d9cafc1725a61e6dc
	"07a176cdab7a95f53f9df837b8f3a20583b3772d" -> "16d9c40febe65a9b095fa22aebf1c19011967e28"
	"07c401d3922920c8edb2a1060806f06d9c4850b4" -> "414c82300abf8d1f4c8ce7bacc68f3848bdb27f4"
	"07c401d3922920c8edb2a1060806f06d9c4850b4" -> aae91a86fb2a71ff89a71b63ccec3a947b26ca51
	"083a756ca5e325e15259616bf64e62b49bac6b63" -> "107d8893032ef5b4e6216377752f0ac1d17a0615"
	"083a756ca5e325e15259616bf64e62b49bac6b63" -> "3bdec75134d06f3a03dad4921870845f6b7f06c9"
	"087740d65a5d28756ecbe56fc3b10328b52e8d33" -> c5fe29f696f4a490dfdc4dbc75319076baf36def
	"087ac486745129377a04d6921cddeac291c664aa" -> "956b486cacff05ebbe580eb9d89a1c508c4fa3a3"
	"08bdfd453584e489d5a551aecbdcb77584e1b958" -> e24570b0a3d987e2dfeddb8c3a7cfb9a7a7cf726
	"08ce333d361890714829897e9f3b9fc9ec06eb4f" -> d795c65b3a29dca33991c441a9951fb9dd14eead
	"0905ed201a87bc97dc4d47c0cb8fd65316f33269" -> "85ee0680e2d5d667919e06394ca7622f09652310"
	"090c455a1db7ab808fbbf172d104e871bf8cdf1c" -> "306ab352f4e98f6809ce52fc4e5d63fb947d0635"
	"090c455a1db7ab808fbbf172d104e871bf8cdf1c" -> bfe548d87ed7786f06c2d9519f69c38ed47176e6
	"092180990de06a9be1b3d662c7e46eccceb24bb1" -> "5309c1e9fb399c390ed36ef476e91f76f6746fa9"
	"092180990de06a9be1b3d662c7e46eccceb24bb1" -> "9b07c152dfce52663795fe9b4e1ed5626bfda455"
	"09cbf1597edde2b0200ecbf469c78689c4dcb12f" -> d9dce89192504c63787b98961ee514937af88e61
	"09e74b06ea68d4cac8f08b51bf4db2daf1987ae2" -> "5785d9143bcb3ef19452a83bc2e870ff3d5ed95a"
	"09e74b06ea68d4cac8f08b51bf4db2daf1987ae2" -> "78a95e0d806677fbb1d436c2985e39c1f8ce3c00"
	"0a78d61247922f30ebf2ce09025dcaa7bd7e3583" -> cdfd081df6fa42e6cd0da1d978d41b836c1f292b
	"0a99ffb4d6645142e68517c59db61b7e58a4f7cc" -> "998c5f0c7554f511bafff587292f986a42fa2944"
	"0a99ffb4d6645142e68517c59db61b7e58a4f7cc" -> f21ea69d945f958704f2fe143c2638ecae6e0d12
	"0b1493c2d49222ce07b73016bb156fecb5999bb9" -> b748ddb7a470b952b8a5596649f7433278d7f2c4
	"0b4f8afef6b744d5aa92883c5a6c1985be67cc7c" -> "1568d1562eecc31d2062b6d22e37ec03fc3d6747"
	"0b960a53daa1b336bcec5810f70d8af8ced86ca8" -> f93b2a04243ee1a95920ae02a9423accbe1c3719
	"0bf8d1b3954920eb6d9304d187af18fea5f318fd" -> d874d378379f4a2e7fa0a8ab52ff6e407f4da343
	"0c124cba5435c59591da7c91e16bbd901a518bd4" -> e63e62171b489dad8ae9d8bd4675b1938bff92c8
	"0ca6b46d7ca17988da3b7292097e5608be81abad" -> "34736ff48e684dac08bacdad60db41219ce1c520"
	"0ca6b46d7ca17988da3b7292097e5608be81abad" -> acc4fb302b8c5eecf127b1cd91e2fa1ff477bf87
	"0cb454c0727efc1e7ef3ea23d7d6391a80769118" -> b224e8e36cf22df3c058990cfdd8c1d5c51fc5ae
	"0cbcba54550b1ea108e977c24b835e07b96b1c0e" -> "04292c3796bb92664f6111326215d9c060ef71c8"
	"0cbcba54550b1ea108e977c24b835e07b96b1c0e" -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	"0cc13007e5d50b096c95047680ace56749c18789" -> dd98f54f30606a2afc05892bbd0185648311963e
	"0cc13007e5d50b096c95047680ace56749c18789" -> e2067b49ecaef9b7f51a17ce251f9207f72ef52d
	"0d03fda6a5db0b56df7e629ce856d2d38c89a4de" -> aaf8f79c679ea058c58a1114d380d99e1ff34156
	"0d31bab479820c1536893f6fbc0dbb1ef1637eb0" -> "9d16f8958467be0162441820d56eb7697453e120"
	"0d4fe3047f98eaab927964d84ec114bfd504ab0f" -> e76b53ef23871ff81ab305822eb605baf0cc5bd3
	"0d6e6f6d2b6f7d3313f21adb477e10fa9578b10b" -> "10e8a9352bcc7b21a64e0b321f302cf900ac8c77"
	"0d6e6f6d2b6f7d3313f21adb477e10fa9578b10b" -> "2d47d233479d1d8246c833381c0f095b9a14ee41"
	"0d885f2101631a09ef10c11cdb9dc1227dfa96e6" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"0d97b85b106a06c0c2838b62ae163ba389228703" -> "52fe6800fbbe0256780d206a494acb9932e0f60c"
	"0f3d8e2e46baf16358cd2989580ef708820a35f6" -> bc67b4ab5f8bc268ecd2d9bb7dc1b7bf26884a8e
	"0f3d8e2e46baf16358cd2989580ef708820a35f6" -> efff4a85a4fce58b2aa850c6fbf4d8828329f51d
	"0fbe93b36c05bbf4156c157f27998938ce312265" -> "55b5ba87f1ce7ef5c9f891392a7271bfc4d62d2b"
	"0fbe93b36c05bbf4156c157f27998938ce312265" -> "832f56f06a5910b2f41a2e0dd8b382b6c709de07"
	"106140a99fbdb7acf19723473621e0ccaa03c158" -> "9218c0bfe1baef0a67688b8a0189121d7d834926"
	"107940684107a87d0ac58cf071fe1399621f30f3" -> "1c6acfa379f80b1228c996532c93a8277eba9b5e"
	"107d8893032ef5b4e6216377752f0ac1d17a0615" -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	"10b9e8227ba16077c96bdf1bca1d6d65e9eb7929" -> "73897bcc729bd26ea18552b27e1ed5ffad93a951"
	"10b9e8227ba16077c96bdf1bca1d6d65e9eb7929" -> b59358100c203b104e53523e1a4e3c2ad426334c
	"10e8a9352bcc7b21a64e0b321f302cf900ac8c77" -> "27be76b230b07360b64aec06d6b0b9bc9e993603"
	"10f2935c7f2070368dadde582f94c9c76e2fe991" -> "712f6cfe5411fdbbf46688c22a40fac7e0a8839b"
	"10fd0e120317de28002e510d6becc049b81b851f" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"111a9d51d2671abe05352698e3d8cf1454cd9332" -> "97bfea6377783e1560754ab5a12749d1ff161e55"
	"111a9d51d2671abe05352698e3d8cf1454cd9332" -> bba9dd6a96c464e2b32226be81cb1f30257c78c0
	"115458a58b29dbc22318fc81bff4e7c091040e3b" -> "5419445b4d19b0979b14f239fe2362210174f613"
	"115458a58b29dbc22318fc81bff4e7c091040e3b" -> "7b5c9e281e2596d40d152c7df309ac90d574df66"
	"12068bd4de03c7769f50cd8321f792477692d0ea" -> "6d8aa2aec81abf4935c72745790bc5f9bf7541b9"
	"123929bd4276504d953fb4c8be2773f46612ac30" -> "3519492430ba26cadcdb215730a6c8e1bcf5b9cf"
	"123929bd4276504d953fb4c8be2773f46612ac30" -> "714518543f337d2b946562c0ba92b7ef742e0b7a"
	"12ad6b8feaf9dbbe8f040ce8620700cae793708b" -> b1be3953e5ff5c85853e184d16cb213e8f9c4623
	"12bcb4d4d017d50979e168d537d05dc698ebeeee" -> "111a9d51d2671abe05352698e3d8cf1454cd9332"
	"12bcb4d4d017d50979e168d537d05dc698ebeeee" -> b1dbc87686db1da0d9ee8ece2e6faa78354f2970
	"13b2e7ed634ec3333cbed99312f620b2aedec0d6" -> "985345405211cc4cf1ecf4cd330cf0dc1f77fd61"
	"13b67f15c13d2e45215da8950f31ef27645733c3" -> "2dc6cf247e907009950a46c400cbd5efc563a3a2"
	"13cb20fc4634029762e80d2858e081b0691ff50f" -> ef8c3a1b8aa04e09a00dffcfda24daec6908615c
	"140e9b7c57cf7ce63d434c530df953553bf4628e" -> fdeca639b8c4d83fe6c16d2a5bc65ef08af0adcb
	"14650065b76b28d3cfa9453356ac5669b19e706e" -> "4a2b3df546b6fee8cf9cc1220a7120b6e54b37bc"
	"149585079facfbdb5713bb8852caea2068cd4f28" -> "69bc044def16e8d8f85cd321b00ae53abe96a567"
	"14ddc393b17e80036485f69495006b18716c1863" -> f9d4bb7b9ae14a740f6c074149e7948bf6dcc3fb
	"150c31bf88ee3021a51c0482279c7ccac68b0e0e" -> f93ff170b93a1782659637824b25923245ac9dd1
	"15341c8499a71502089bf6644d7a6a980824d5e3" -> "2c3ca00b48fb06f1b59ee6fa4401346e42806cb2"
	"15341c8499a71502089bf6644d7a6a980824d5e3" -> b74ff38af58464688b211140b90ec90598d340c6
	"1568d1562eecc31d2062b6d22e37ec03fc3d6747" -> b74ff38af58464688b211140b90ec90598d340c6
	"15c6383f8035fc902bedfef8b79084d2af2492db" -> "93bfad180c86801a6bcf439675654c38f4b0624e"
	"15db9a895d36a29eac2061ec31eba5e9628b4a5b" -> "508cf7f5d8907a281602a54551abcc58a16d0493"
	"15ff206863a77e3396f5a1e1ed4910b7b70c9f8d" -> "6aa09fd8726b7e8de37c0187a83c2c0fca280358"
	"163109072c24eb2fc0333364708908f0917bc519" -> "98bdef76667ca45d9d2a1cf50ef20ae266dd60fb"
	"163109072c24eb2fc0333364708908f0917bc519" -> af8bf677c150144166454f311642825a0b08e506
	"163a3e97ac12f52217ac24922dad5eb814af291b" -> "567341aaf4f4be52f471e4cfe7e983483eaf0bfa"
	"164a2516eb622fdf032ce526ec97e79a53bf2893" -> b9a9df93a3f5580c7f7b8cc099aad1c204ced8a4
	"168d449ef4f97ecdf65aadae2649630fc1fa67eb" -> "0bf8d1b3954920eb6d9304d187af18fea5f318fd"
	"168d449ef4f97ecdf65aadae2649630fc1fa67eb" -> "717d13af3633b765c629f91a0c3c1c2af8818a2e"
	"169ee10209f7a46e2aebf802c5f4c3f5bff4443d" -> a4dd839e796f325718154db9ca86a5d7dabadf2c
	"16b2e579f91cddb672bc63612d516d65c8be0a7c" -> "1ca727f230d83db20952f8ae7ce2f1749d744334"
	"16b2e579f91cddb672bc63612d516d65c8be0a7c" -> c51a0b47c91106ff50a2a9dca302e80bc7049aba
	"16c89dcf80b742276d927b99fe28dbcde1469417" -> "42846efc3ba31cc0384ca57a70b27fc37313c6ad"
	"16d9c40febe65a9b095fa22aebf1c19011967e28" -> "5463eeaedb2a818f0ac4d590add9808bf3249cd1"
	"1773f2a2ff8b122452da2c1a080abadd92d3d4a6" -> "1ca727f230d83db20952f8ae7ce2f1749d744334"
	"1773f2a2ff8b122452da2c1a080abadd92d3d4a6" -> "6f97affbc47713589631ee58027b956ed723e2a1"
	"1782abd7734acffb8ebc37b74e120fd4c4b9c4cc" -> e4c0a1499cace0c375b90d2d2d7b9baf1af12b76
	"18a7e19846ee186d60dbf7c2c865ac1d1aa531c4" -> ac75b4c265952e382dbd67018058a853393d4ecd
	"191f0c8db22267cab55472961524c70a1d692025" -> "71e19a003197960cec38d30e71b49d182bcf8510"
	"1a18bf3a5b251557a7b10a496f9036f00790086a" -> bc2c65770dca70c1d4e151fad971bc7c7235a702
	"1aabec0b484f4f073defb343dfdcdac601a26adc" -> cb0ae672aeabefca9704477ea8018ac94f523970
	"1aabec0b484f4f073defb343dfdcdac601a26adc" -> ce9886320447440ab5dc8011072ecf331fd77c6a
	"1ab5948141e62b52bcb812b04a901b3efaf1b578" -> "0905ed201a87bc97dc4d47c0cb8fd65316f33269"
	"1b0e5f4499a0c099d99b00a2a6a3edb45ae98660" -> "344a107b557604d3f958e7bf7ebf0901290c50d5"
	"1b0fc3be4253a69878b6ea6687cb867091bf59ae" -> "017bd8923986acd4992fd21f3451fdd15ec6edce"
	"1b0fc3be4253a69878b6ea6687cb867091bf59ae" -> "9d20f0b55aaaf584c236a64adfd377fbe357007e"
	"1b4e9a5f8b5f048972c21fe8acafe0404096f694" -> "5419445b4d19b0979b14f239fe2362210174f613"
	"1b4e9a5f8b5f048972c21fe8acafe0404096f694" -> effbef2bebed87b1ce46d449862fb5121dba9d34
	"1bc1ab6ecc2b71eecec0671746d85bf7036037e8" -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	"1bc1ab6ecc2b71eecec0671746d85bf7036037e8" -> fd3038fefdd56ccacb01f807da193b6b6bbb9e7a
	"1c14b1aedec6e9307e0c73276b8c1c283413ea41" -> db58d5a351031ec51817c1a6566ec5672ba17138
	"1c6acfa379f80b1228c996532c93a8277eba9b5e" -> "5209a247e7aa6c9e47e649613fad3f4cb79502a2"
	"1ca727f230d83db20952f8ae7ce2f1749d744334" -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	"1cb2f293f5a594fd5dee8400213bd2f395fbd2bf" -> "547f719d9b022e87eb8cf3cb7a7632822b996e29"
	"1cee22ebff9621c849afa8d766d7627b291ec9d0" -> "3f22889276ee75195f56bb3779ee8af5acbedbf0"
	"1d04a76669ba5d04fc25afc09850d541c427d5c7" -> "06e496e5d17b34836797d024be7da6afab914ce4"
	"1d04a76669ba5d04fc25afc09850d541c427d5c7" -> fa6416bf7099adfa1924e2ffa2316a00cfdbc6ef
	"1d3743f005324d61fd3635c9bc3963caef3aad4e" -> "3171845b731fb90dfa49d89be174ccc6dfbf5729"
	"1d3743f005324d61fd3635c9bc3963caef3aad4e" -> b224e8e36cf22df3c058990cfdd8c1d5c51fc5ae
	"1d4db69ce0785ff83cfa0336749127da4509381d" -> "38d7016891e37a789d389eddc7cd3dc9b76370b4"
	"1d4db69ce0785ff83cfa0336749127da4509381d" -> "6c04ab211ccd52829e0658fb08bd9a9f9b0d655b"
	"1d584ee42d368be2b9599562ee3d1d4c8cac4018" -> "3d7cd910b5151794d9f1e5ef64357e90bda0689b"
	"1d584ee42d368be2b9599562ee3d1d4c8cac4018" -> ddb5287894c491686e6dc1a82e1c3d0f34e56a7f
	"1dca492eddf4f45cbeac4c7a0d77553211489593" -> "5419445b4d19b0979b14f239fe2362210174f613"
	"1de40edade52ee1d3deb225ed4719978d7fcf47e" -> d08b30fd7886b87dcf8fcd58d3ab1b1eb135af9c
	"1e72e889e722af06c2bd17b92becbc123c3b84c5" -> a3f79e9abdbdb27308ac7e3d9e362bcc361cecdc
	"1e781209284eb5952e153339f45bf0c1555e78bb" -> e4981ed1e72d3f25da901b9415d2c4805bed0dbc
	"1ecb7c7c9c817c334f4b39253cb1df8fd1d9523d" -> "3d58d63932c66a56b87671ef10eb01d40aae3afa"
	"1ecb7c7c9c817c334f4b39253cb1df8fd1d9523d" -> "4e3dd47c9d5f9dcae0a0d6c59c6676213914ac0e"
	"1f010d6bdf756129db13d1367c888aa4153f6d87" -> ed4cf6e8e29bebb9324ba1a400a6c07513f2d642
	"1f054af72f509f1247687b91a360961b5d930869" -> b1e4b6f4dc27481e8c07acc2e7629ae206d25f6c
	"1f124f30244654fdf3e87efe1b70948fbfeab4b0" -> b83a2f9006cdf5293370b1254f4f4cb2770c1b9f
	"1f124f30244654fdf3e87efe1b70948fbfeab4b0" -> f11f0a5a2db955f68776ea95aec42df7fcb8ce1b
	"1fa37a06082584d4087937467ad3f3b0f0f31905" -> "38d7016891e37a789d389eddc7cd3dc9b76370b4"
	"1fa37a06082584d4087937467ad3f3b0f0f31905" -> e63e62171b489dad8ae9d8bd4675b1938bff92c8
	"202d97e6a8b42bb5b9fb218a2823dc9334bd7842" -> "5b648b819c6fb3137850fc31c0ad80b2ff55f14d"
	"2069f4865c39ed7017d66df693937600eaa8fa2b" -> "45761988ac01b99f9a81ad6ec884bef3c2d8e402"
	"2069f4865c39ed7017d66df693937600eaa8fa2b" -> d4e8288c9b136a078a53c228b9fbad96f5850eea
	"20bc2023784191fecf708c40bc48d377ac85f7f0" -> "2d0ff147e5f6a46554605d137993ba385698eb4e"
	"20bc2023784191fecf708c40bc48d377ac85f7f0" -> a5ae1ce8010b6f3e0f4c7f3b46debc3c84e04787
	"211cb0a2fad2a9a4236d6768aabd764b3350a3c6" -> "24eae7eaeb8b3461eda6ad97ceb6356100cae25c"
	"2196ecadc4142e7f7f07ea9176571bbd7c6076f1" -> "970fcdf59db2819f0c1c5269d631f2ede634782f"
	"219877e46581872adb47141cf85371f174f484ac" -> "4e2609601248b96297febd6e39a59f45c0d0013c"
	"21d81b4f098f55e9a390af3cdece79f81fe14a12" -> "5309c1e9fb399c390ed36ef476e91f76f6746fa9"
	"21d81b4f098f55e9a390af3cdece79f81fe14a12" -> ebc3ae6ffc90852f148c4266dc5e6566588ad51b
	"21e1b4486586d3a15d2d7bf0479e77636359b816" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"22fab08fb88f4d8a4ddf1bd7a28dda13311dd26f" -> "87eccc3a81d133e636150268c24d2220cad70fe5"
	"22fab08fb88f4d8a4ddf1bd7a28dda13311dd26f" -> cdf458c60eaaced338990f2aad96341a05836236
	"230d022fe3ba67465e867ac1fa4da3bcf0d31630" -> e4f6ab008522c5ad386485720770b8d03b4fb880
	"2329b6b461d8290f4706658ff080a888b74e9aef" -> bc0f5939a58fda328bdba70eb64a19c969b9f8d8
	"235fe77c2990ca6762ad9146105915987acf956d" -> c1d6628c9433c09ff62f916f2b933ee12995e9d8
	"238c0c095f21f919fd268d8519d6b1b07ffc1540" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"238c8d3984fc38d10a257c0972f142793ae5af96" -> "4ebba56419f0a7530ae8378284d7ee0cec22ebfa"
	"238c8d3984fc38d10a257c0972f142793ae5af96" -> ab09eddf601501290b5c719574fbe6c02314631f
	"24027256aa9614a445563707a72af7ce5ff49b5b" -> "5e7fe8a7b89a07d8c3ab298ac69bc33f6ba88b47"
	"246569bf83f2a586268d26559c7d6ea54c9316b6" -> "0578f1e66aa381356bfe2f53decf3864d88d23d3"
	"246569bf83f2a586268d26559c7d6ea54c9316b6" -> "0ca6b46d7ca17988da3b7292097e5608be81abad"
	"24e11756a0368777d2820ed7a6dd8687b669895b" -> "202d97e6a8b42bb5b9fb218a2823dc9334bd7842"
	"24eae7eaeb8b3461eda6ad97ceb6356100cae25c" -> "2b1e0f8cd5058c7e0b85760e54706b9e74cb4766"
	"24eae7eaeb8b3461eda6ad97ceb6356100cae25c" -> ca1e4435de9266b87cadd5e2d6851dfaab2c8f5a
	"255136f4c1ed0ad7e2bd0c9123096af8d836b71d" -> "9a38f5956e725e5374da658eb28724032a71215c"
	"255136f4c1ed0ad7e2bd0c9123096af8d836b71d" -> cf15095ec52f1e997ec9eef42bdf275d2a68fe66
	"25c618bf37b6285c8beb0e7b6c9fa2aa4dbae5fb" -> "78a95e0d806677fbb1d436c2985e39c1f8ce3c00"
	"25c618bf37b6285c8beb0e7b6c9fa2aa4dbae5fb" -> d67b50d35cdbdf01c455d6c630128780fbe81b33
	"27e8960037289dc10e6f659b424c66bfb07146b5" -> "3656d57bbf4d82b62f368d56d3c4703f3916c2dc"
	"28911f7dcad1ccc6ac4f6939036de76bb4f4c09b" -> "88d4bff8c376cae3029b7da94a21c4fd4ac0249e"
	"294673a17e818d8a29c8d23b0922855734e1925d" -> "76baf97fa13c4109c335180b121140c8ba1bf97b"
	"294673a17e818d8a29c8d23b0922855734e1925d" -> aa31820d9da83cecfb028c76327d74694e3fc11f
	"2962899aa01f25457bbc204d2cc407ff5c0ca12d" -> c5895dc4401fa7f204025d460ea2419f0bf62a77
	"296cf82f93b4b04ac5af71dc00fbf91526bf3d2d" -> a0bea0978fe80a64e7ccc27d9cafc1725a61e6dc
	"296cf82f93b4b04ac5af71dc00fbf91526bf3d2d" -> c5216a1bc68745ee81ba869adc6052ed892ebac1
	"29f656c46551209ed9e817ac9ac9cdb958207049" -> "5fa232d8520f577dbc41cc0414e884dbd85fa66b"
	"2a137451012657aa06d702c5b01c06c15ddae17a" -> "819fdd6e76d6dbd3410e9614be843cd50f8a6c75"
	"2a1530a953cc4d2ae62416db86c545c7ccb73ace" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"2a1530a953cc4d2ae62416db86c545c7ccb73ace" -> "63a597dd94079887a1b5ad72f64a8b0ee822dc27"
	"2a21098b98ae2f9581a91e2e474c397e5cbede12" -> "65f586132bfa21c3e9fe7b2803ef526133a3b269"
	"2a8bd34c5576e02fed38d85dc5c90ffb9d4ecfb3" -> d838d821c9687a789673b2ac9dff707fdc599e1e
	"2b1e0f8cd5058c7e0b85760e54706b9e74cb4766" -> "49d9cd8dea520a318412792b50ab4b91ce71b9fe"
	"2b4ef0d5c0421decc96d16671be3cd9d3d3709ab" -> "6b2655567dedb24571ef309c45f9ec45caf67933"
	"2bf3c7fab19a59cde3a3dda9398075f0fe8d57c1" -> bc204b742735ae06f65bb20291c95985c9633b7f
	"2bf3c7fab19a59cde3a3dda9398075f0fe8d57c1" -> e39e332e5043d7e8f48fbfc91c3bd6d45a52cb7b
	"2c374ea4bb47c84f80f905df3a00b7d724386a28" -> "3ee3a6eb522fd3ad672e7734e5708f5ddcc63fce"
	"2c3ca00b48fb06f1b59ee6fa4401346e42806cb2" -> ffbd89cbb7933081446e1dbde736d5dfce983383
	"2c6fd30198187c928cbf927802556908c381799c" -> "5040f9f164ea7d633237e52bed311d1e9773c78e"
	"2c6fd30198187c928cbf927802556908c381799c" -> "6024f321d491c4f37a2698239260757df64c611b"
	"2ca67c6f1433586e61487295bb04cc424992db12" -> "879780f9a15177ed703f56bf347e0a410c22e9d1"
	"2cca185e85171c462166839cfd6ee57c09573160" -> "8db127d43f5b0eff254a851f9c966b7b85d91992"
	"2cf14d1bfd6cdf6629e56046dd30d1ef15175fc9" -> a7eb054c60a11246e86641152a4b8caf0723ef35
	"2d0ff147e5f6a46554605d137993ba385698eb4e" -> e7fb2ca94556e6aadfc3038afaa1c8cc3525258c
	"2d2a71ce85026edcc40f469678a1035df0dfcf57" -> "84a5ce3f03aa409d9b0b22f532a943ddb3e11740"
	"2d47d233479d1d8246c833381c0f095b9a14ee41" -> "255136f4c1ed0ad7e2bd0c9123096af8d836b71d"
	"2d47d233479d1d8246c833381c0f095b9a14ee41" -> c1cf918d3adbe832fdaf278a23151502be255bb2
	"2d7a874493df07d76d7f1294e72b807ff936cd55" -> "39de0ffbe33fbb6498a3027207deb3a5d30ff678"
	"2d7a874493df07d76d7f1294e72b807ff936cd55" -> e4542d8b35788c355164794457d46667378e9354
	"2dc6cf247e907009950a46c400cbd5efc563a3a2" -> "46fb0843536f2e9281c45042b024098a38236b17"
	"2de15960026972a7a1d933881dad8a3879471155" -> "551580e959894626c27474d35a73409be337b82a"
	"2de15960026972a7a1d933881dad8a3879471155" -> "92f8da8de36decbfcc4e30dc069b2c9ea28e3f6a"
	"2ebbe2b2dbe67fcde41d0717a0ab27d2fd24566a" -> "044b6f04f23d6c7e3c3750c9829db96b71470874"
	"2ebbe2b2dbe67fcde41d0717a0ab27d2fd24566a" -> "092180990de06a9be1b3d662c7e46eccceb24bb1"
	"2feabab25ac114bf8c527464543c96d97ac1f8bb" -> "168d449ef4f97ecdf65aadae2649630fc1fa67eb"
	"2feabab25ac114bf8c527464543c96d97ac1f8bb" -> b838bf1938926a7a900166136d995d86f8a00e24
	"3010ffb1eaaede91bd20a3e8adfd76b1531f95c4" -> "14650065b76b28d3cfa9453356ac5669b19e706e"
	"3010ffb1eaaede91bd20a3e8adfd76b1531f95c4" -> "466f64b96f0ea720ef53599d792de5a0d77e3003"
	"3028db4af289560e670b9f362aea16eaf3d1825e" -> dd69a12e6a6a4c55b7827238d7267fc2e75684d1
	"30696be71f64ca3764b1d334927da927d6d8df78" -> ce961135ccf5bc008b8160404cc7c995789b942e
	"306ab352f4e98f6809ce52fc4e5d63fb947d0635" -> d963ac98ec94fd2003722a794f0168a70ea1b815
	"306ab352f4e98f6809ce52fc4e5d63fb947d0635" -> df2faf1a65fc821384e618b3c291a184fbed039e
	"3074516e1fc49cd2b5fbe53779341d93a45d1c7d" -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	"30ceb7b040fb0d98a6c17a39c106f6eb9a112b24" -> "9520f7d9985d8879bddd157309928fc0679c8e92"
	"30ceb7b040fb0d98a6c17a39c106f6eb9a112b24" -> dd19c245e9baf5d5c7bf7f6b54330a0689278283
	"30f7414ca17bc675105d3d731a827778d7367b11" -> "3a0599788fd38822dcd2f32de538afdd36a478aa"
	"3171845b731fb90dfa49d89be174ccc6dfbf5729" -> "20bc2023784191fecf708c40bc48d377ac85f7f0"
	"31761f391192909f6486ecb532e72dfaee756be6" -> "4478ad37a7d233b8db4d46dd563ece0bc8b00af4"
	"318f4c98276de7e515f838a9626bcf60d757ee20" -> bc204b742735ae06f65bb20291c95985c9633b7f
	"31c747e0be7828de7d391fb927d069302b7f3816" -> "70bdbde0d8d43ac32506877ab3a45783cb38651f"
	"31eb6d7cf09c3fa668c1839d8c5759ab7cdf280c" -> "8214e27d275915079ddf7c294c379515e34e8efb"
	"320f2061b63b0157ea8b21362ed12e4ce90258e2" -> e63e62171b489dad8ae9d8bd4675b1938bff92c8
	"32346e0c3be7f2f43d3ef9eb2c4fa68f5ac7460a" -> b7a42309b25632b0c63e8f189fd6f4d85dea293e
	"32346e0c3be7f2f43d3ef9eb2c4fa68f5ac7460a" -> cf15095ec52f1e997ec9eef42bdf275d2a68fe66
	"3262a53c123844b3b9140f4e35b86f1444555aad" -> "507595e568fb5cb49cf7c2c93c7864130d7b0353"
	"3295c3539896750f742a56de0c4ac965f8d96303" -> c6d896bcfde1cfb626c8bc25c71d00662ef7f22c
	"3306edb3805aac7baf77c4916b5495ff278353e5" -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	"33319b0976ff9975e7509b6096887370146893f4" -> "7c4c1cbc0b94665d6a94ac7df385459346af5265"
	"3334de6494363af27393f468c2e7f32f02654f47" -> "2c6fd30198187c928cbf927802556908c381799c"
	"3334de6494363af27393f468c2e7f32f02654f47" -> c84209a8fda86dd1c7647f52bf0fd6eb8aaaaad2
	"3339180b28da5138eacb6b64f89c03e21493a73d" -> f0c266af4ea7e4d9b84955f8fed8ee8cb009cbd8
	"337855629f59a3f435dabef900e22202ce8e00e1" -> "9144b9362b2ed972f5886dcc7beee6a2acce2708"
	"33af5a333416317f5d1fe0c8c9f980617a413aa8" -> "82deaae3b94d59caf13ea21c980ab386df6dac9e"
	"33d02ed447cf730fa56a1ca15cda74ee88011d52" -> "1cb2f293f5a594fd5dee8400213bd2f395fbd2bf"
	"33d02ed447cf730fa56a1ca15cda74ee88011d52" -> "1d04a76669ba5d04fc25afc09850d541c427d5c7"
	"3444b4bf367e16f70d77ec0fc00e0cc3b587195e" -> "6dff5de1da7157de20310b10e5a0c09953dbb4bb"
	"3444b4bf367e16f70d77ec0fc00e0cc3b587195e" -> b0c5685768ec6f326550dce42bbb3b6419ca2408
	"344a107b557604d3f958e7bf7ebf0901290c50d5" -> f93ff170b93a1782659637824b25923245ac9dd1
	"345aaf3976a6abc491026c8a465b5e8ccbc8da5a" -> b81f8c8dd3ec81a8d622e2d3d6b2af426ca53f05
	"345aaf3976a6abc491026c8a465b5e8ccbc8da5a" -> e565f3755342caf1d21e22359eaf09ec11d8c0ae
	"34736ff48e684dac08bacdad60db41219ce1c520" -> "442b7e0018fac61874a8423270e8fee2c0c7e689"
	"34736ff48e684dac08bacdad60db41219ce1c520" -> a206058fdaab6274ae7b9bdca274011efba74e11
	"36463e32dfef16dc3a903763f14f5bbf6e0248e7" -> d460267613da14eba959eb225e2cbf6a1e132eb1
	"3656d57bbf4d82b62f368d56d3c4703f3916c2dc" -> ee109848cf18df772b0f5f8e70fa7c7f4bfb2e92
	"366074dc1843764c199c5b7a6354c58b8ac0b5c2" -> "8ea7d41f171fd52d3c920d40fdb390fd969a3270"
	"373a4326961c504ad6365fc1e4a9082e387499c7" -> "5fa0c4dd296d3731bbbd1977d7bf9c50d8c4b7c1"
	"37b34c4e99f0fed81b7523d6e674ca976f994afc" -> a8a5bb1f7813ceb42199ef2bcf9d925da007f047
	"37b34c4e99f0fed81b7523d6e674ca976f994afc" -> c2d96bc42cfc358178078d8c2c65d550671d3ed0
	"3859e3965993493defd39cd54a2ab2097957e270" -> bba59f58a4eeda6fafaa3d41e14f3d00a179923f
	"388218fac77d0405a5083cd4b4ee20f6694609c3" -> "50e1821529fd0a096fe03f137eab143b31e8ef55"
	"38876148a5b3b346f47b4fcdc3554c26ffdb8731" -> "92757728872a98f2ef4fe04c3ea50ce39e7a6fb4"
	"38b066ee7685d0074d3430284f975addda934c17" -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	"3902b083e7bfe3824fc070ea2081c74f19236509" -> "564b907c8a39ac6e6f8aecc6b2a1c125d41ada66"
	"3902b083e7bfe3824fc070ea2081c74f19236509" -> "6a0ee54f9a3ebf667e86f7110c36b2240df96166"
	"3936e95a7f056877425c6faa6994d9f3712a6fb0" -> "5c0375266594f19f3d73969718a5806662cd6d63"
	"396b22da087e500e65aaf9433c0aa1861a9787cd" -> "83834291fa7c15234c3de59dd8459903b144d00e"
	"39938f41fd287e29636771dae20db5c4af59e042" -> b6c66824c156363e934b3d989fb123efb1a9c63d
	"39938f41fd287e29636771dae20db5c4af59e042" -> d963ac98ec94fd2003722a794f0168a70ea1b815
	"39ba2e8e5627a8a3062d257928824139ca71c5f3" -> "4ad47d2de3cf71686a0dffcdda069cbd202938bd"
	"39ba2e8e5627a8a3062d257928824139ca71c5f3" -> "6ecb4fc149c725e16392dc88f1f419dd56aaddcc"
	"39de0ffbe33fbb6498a3027207deb3a5d30ff678" -> "0a99ffb4d6645142e68517c59db61b7e58a4f7cc"
	"39de0ffbe33fbb6498a3027207deb3a5d30ff678" -> "4e3dd47c9d5f9dcae0a0d6c59c6676213914ac0e"
	"3a0599788fd38822dcd2f32de538afdd36a478aa" -> "5173099aae25bedf7a87225891d124569cba7076"
	"3adba40858036a5a44f550aaab5287ad135f5f87" -> "98a1a00d53018c7e664644d886466a820aa5e6d7"
	"3ae35648bfc135e212c787f25caaed92ea7e0084" -> "64f3ff3ffcfed10b8b5bf42cda3fc19776fb29f2"
	"3ae35648bfc135e212c787f25caaed92ea7e0084" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"3b0d05c4a79d0e441283680a864529b02dca5f08" -> "296cf82f93b4b04ac5af71dc00fbf91526bf3d2d"
	"3bdec75134d06f3a03dad4921870845f6b7f06c9" -> "33d02ed447cf730fa56a1ca15cda74ee88011d52"
	"3bdec75134d06f3a03dad4921870845f6b7f06c9" -> f9f51594f226f52022ca7a78d35f499524387cfe
	"3c0f4abaf5b3e47d9426bb2bffb06d5ee47b1c95" -> "89be7d2774f81f3d8663999975a6ab64d46bf42e"
	"3c0f4abaf5b3e47d9426bb2bffb06d5ee47b1c95" -> "9d8cce051add2eb82cb0be97a58201c1d3fe0c1b"
	"3d58d63932c66a56b87671ef10eb01d40aae3afa" -> "5b53c492157b34c83e9e4f10661d7a8c6dc38f65"
	"3d58d63932c66a56b87671ef10eb01d40aae3afa" -> f21ea69d945f958704f2fe143c2638ecae6e0d12
	"3d7cd910b5151794d9f1e5ef64357e90bda0689b" -> "164a2516eb622fdf032ce526ec97e79a53bf2893"
	"3d7cd910b5151794d9f1e5ef64357e90bda0689b" -> "3f8e2ee942185870bbc736375fc20e2c977cf7bb"
	"3dc7f0777a17a184029228c661ca0a505b737aed" -> "8abf3ad23cb1008aeadaa2e1ed68a2649be74bb0"
	"3ddeb7f3373ae0e309d9df62ada24375afa456c7" -> "63d555a2dcb4c308ede76b96be1239950768a7d1"
	"3ddeb7f3373ae0e309d9df62ada24375afa456c7" -> "8454b42f947e185a65b2950123493928558f2f5e"
	"3dea2ad17d01ea0595abdaa738bee3806683752d" -> "22fab08fb88f4d8a4ddf1bd7a28dda13311dd26f"
	"3dea2ad17d01ea0595abdaa738bee3806683752d" -> bad79103998cd329584e844a315e85c3e1ac3839
	"3e234437defb84b809f64cba35fa174e394baeb2" -> "38876148a5b3b346f47b4fcdc3554c26ffdb8731"
	"3e681a7ccc97b81f9c93e5b4ca6d3a85d9817285" -> "54cf5d2da897d4ca2ed4872bd9b7e48851e5573e"
	"3e6ce570cacd28f40e1ffbabc35f9987ce2c7779" -> "8f6a2dbe34017e616f8bb35bc668538eb11a8d33"
	"3e6ce570cacd28f40e1ffbabc35f9987ce2c7779" -> "9a6bfee70ed19e9fbc726930e228a7e17e2a3a76"
	"3ec55e07033dc051c24d8c282abcd52a36cd6c2c" -> "1dca492eddf4f45cbeac4c7a0d77553211489593"
	"3ec55e07033dc051c24d8c282abcd52a36cd6c2c" -> "76e9e8173680e7454adbda82391affa3a2a567ab"
	"3ee3a6eb522fd3ad672e7734e5708f5ddcc63fce" -> "16c89dcf80b742276d927b99fe28dbcde1469417"
	"3f22889276ee75195f56bb3779ee8af5acbedbf0" -> a47b8733b3f7db0c0db8cbfbdfc0aa2c197af6ee
	"3f3fd0f34617bc9901d5cfaca9a5b5a12eec8cf4" -> "318f4c98276de7e515f838a9626bcf60d757ee20"
	"3f3fd0f34617bc9901d5cfaca9a5b5a12eec8cf4" -> "9865ef24578c750625054e2f382b9c764befe870"
	"3f8e2ee942185870bbc736375fc20e2c977cf7bb" -> "5efe7e2f5dd8a788ff03d69293ba2020dfec44c8"
	"3f8e2ee942185870bbc736375fc20e2c977cf7bb" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"3f8f2abe05c0aeb0ea60768d44a99261ed456d44" -> "757161efcca150a9a96b312d9e780a071e601a03"
	"3fc0e14928d60d588efd1fcc0edb202e4c0023b3" -> "7a8d9efc26f194eb20114d1f639ec9fa48d70bff"
	"3fc0e14928d60d588efd1fcc0edb202e4c0023b3" -> e083ea31547c4f126b39ba1c140cee7c4122ffa7
	"40fdd46b7f90b40f58a2b9f4bba5735c29dc82a8" -> "996f0c583b36aa5d6c6308285aea1421eb7efae7"
	"414c82300abf8d1f4c8ce7bacc68f3848bdb27f4" -> f93ff170b93a1782659637824b25923245ac9dd1
	"41875498b7944e2c73e7a8ed9b6a91c9d7001b12" -> "028f618658e34230e1d65678f14b6876e0f9856d"
	"41875498b7944e2c73e7a8ed9b6a91c9d7001b12" -> "7e8431ab257e4492cf65950dd066524370c30347"
	"41c78cf69092b6975ed9512a7c42575c7a2dfcc8" -> "24027256aa9614a445563707a72af7ce5ff49b5b"
	"41c78cf69092b6975ed9512a7c42575c7a2dfcc8" -> "8677dc54d23642379db0014f8fa76565a086b1d5"
	"41c793eae900e632dbc73ec7f900ea1e7d38aa92" -> "2a1530a953cc4d2ae62416db86c545c7ccb73ace"
	"41f1a8435a900b660b7a6bc9da8dce2665e4b70a" -> "629188ede7ee00c925ef28b85b1e68fc9e05fb93"
	"41fd39392bd24555d446260b1a45b986ab14e987" -> f0a328589fec56e039115150352cdc3aaf00bbc9
	"4278fbdd486c6c3c84a2612285ce8b12dc898718" -> d138188f984f79202e08697c5ada0c394d3ad697
	"42846efc3ba31cc0384ca57a70b27fc37313c6ad" -> "454d79b61be88831c1b899a1268f7b3d6cc577d2"
	"42c0ae87b126c6787791d005ec559bf3f6bc5de7" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"42c0ae87b126c6787791d005ec559bf3f6bc5de7" -> "76db3e05d55a7d485e776ee1981179b10871051e"
	"43464adc45b4c749ca1136f2e500b0c0cb201603" -> ba5df28904d1d3c6a60c03fd8a79dc1d632904ef
	"43464adc45b4c749ca1136f2e500b0c0cb201603" -> d11d003ba5e98c036fb94204df6dcef28aafe2f8
	"43850dcf9c4ca6407abdd167aa3acc098e0e0f7c" -> "14650065b76b28d3cfa9453356ac5669b19e706e"
	"43a839197795a7f0582efd66bc249dac89f86b68" -> f29f1990b5605f8dbed65324d8e92b67d4dd1713
	"442b7e0018fac61874a8423270e8fee2c0c7e689" -> "7e88640cd1801b6fe0288f744da7310b4749c0c8"
	"442b7e0018fac61874a8423270e8fee2c0c7e689" -> "9520f7d9985d8879bddd157309928fc0679c8e92"
	"445f9f4f35c663fb668425f8c8fe0a1d58e1d8c7" -> "6f6127decde6785b9ba5f22a07a7754d1fda1a59"
	"44732094fb8d221b28438b928866e03148476a74" -> d3f24d3204fbb2f1912b6f835462db82fff33c18
	"4478ad37a7d233b8db4d46dd563ece0bc8b00af4" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"44945dfe867e56aab1685a0f371665273291a2af" -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	"454d79b61be88831c1b899a1268f7b3d6cc577d2" -> eee25bbd84e2c3c00ea75080133374c48eeb3240
	"455ac07021d4feede4f5b7e39bf00dc186ce3c09" -> "1ab5948141e62b52bcb812b04a901b3efaf1b578"
	"45843d8f4eb2bbfc73cc361ba9d612d088dc8a4f" -> "04aeeeaab1f02213703c4e1997b2c2f1ca0f8f96"
	"458f8b0eab9af7b770a25e9277f70bb4df3c8d90" -> "550fac1d131d764c7c5ec5d69f53290c30855be6"
	"466f64b96f0ea720ef53599d792de5a0d77e3003" -> a41e394e21eff277e77d3b14b451271f75caa812
	"466f64b96f0ea720ef53599d792de5a0d77e3003" -> cd96b0ac826c35f0ec819a7e522a0ae27b38e18f
	"469e1df3f9863738c533e348b4525a6963cb1025" -> aa8d1657d8976e6f1a6d66f33343f568cdcec0e0
	"46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"46fb0843536f2e9281c45042b024098a38236b17" -> "0d31bab479820c1536893f6fbc0dbb1ef1637eb0"
	"4767266eb4cedeaf40e4bda87fb9c8b6ae1ef127" -> "3eeed876a909c45695f2f3a3edd4141be331a3be"
	"4767266eb4cedeaf40e4bda87fb9c8b6ae1ef127" -> ab142d21e83327d8eb26a482349093f1609556ae
	"4771501c0a125dd3560391cbd716c63a281e8244" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"48524fac643afd7ec70d43684902598ad6d5b954" -> d9213e4716ec8d0ac543d32a52a39c79818cb8ca
	"49b299215dd779b781c5a39af85a5acb6294acbd" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"49d9cd8dea520a318412792b50ab4b91ce71b9fe" -> "78cdeed4c79d165c915e8de0355cc3fb7f5797c5"
	"4a2b3df546b6fee8cf9cc1220a7120b6e54b37bc" -> a41e394e21eff277e77d3b14b451271f75caa812
	"4a2b3df546b6fee8cf9cc1220a7120b6e54b37bc" -> fc613c01d45b034290e7fb69977a2cc2715b1259
	"4a6cc6a20eeb593f1ad0f60475a9867532d7c5d5" -> "9990b581facb3c9d97aacbdf90eb03ed6f1f4d94"
	"4a6cc6a20eeb593f1ad0f60475a9867532d7c5d5" -> b4c06f7c4d6c87091f138877b702489755fd59ef
	"4ad71b16cdc8f5f367931b908fa904e8e8c48b47" -> "5aea4ff36c58bd3c6d6c0852e6b3469261348e0d"
	"4af44766d51c0fc28a140e395604f3d46fb1bf18" -> a3b56f5f431d2421b575f329d401361e3196b467
	"4af44766d51c0fc28a140e395604f3d46fb1bf18" -> ff9fcf71b758c504e9ecc82cc8ec07acd674097b
	"4b5073c64b6e4180dcf1bed09c6fdd52cd1b2d21" -> "04c29bdea04e5af5193fd386b62a48c320351f19"
	"4b995465b2ed97cb6df5d48bcb843f7f631627bf" -> e0f807bdad096ef6a4d9f29de333d65d8282aeb1
	"4cbe9e0e21fca682d78980a03184071e9fe1c955" -> e76b53ef23871ff81ab305822eb605baf0cc5bd3
	"4cd33545ba4fa82324b454aa5bf2748b40a572fb" -> "8f38331e32f8ce20b45be4edef428dcecf6a768a"
	"4cd33545ba4fa82324b454aa5bf2748b40a572fb" -> a36e024e989f4d35f35987a60e3af8022cac3420
	"4d2f9d7f18c5060a49537fa0f263be1b7fa775b8" -> c0086e901505c59d6f9714f961c0d48cd86ef36b
	"4d2f9d7f18c5060a49537fa0f263be1b7fa775b8" -> e39e332e5043d7e8f48fbfc91c3bd6d45a52cb7b
	"4e2609601248b96297febd6e39a59f45c0d0013c" -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	"4e3dd47c9d5f9dcae0a0d6c59c6676213914ac0e" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"4e5a29be8250487b387ff3b254e30b2320407821" -> "5a526e5e18ddb9a7dfc5a2967d21d6154df64a4f"
	"4e5a29be8250487b387ff3b254e30b2320407821" -> "63db268d4778f250892479e7e517e23c54ac8eda"
	"4e746b1a31f9f0036032b6f94279cf16fb363203" -> "85cf8801c8839f42a68cef584a522de69a3b02ed"
	"4ebba56419f0a7530ae8378284d7ee0cec22ebfa" -> "55b5ba87f1ce7ef5c9f891392a7271bfc4d62d2b"
	"4f02f4d68d8eefe728008974640839ef6e1b2182" -> "798e0f451661f81f4568dce4033cf1c9076f224f"
	"5040f9f164ea7d633237e52bed311d1e9773c78e" -> "36463e32dfef16dc3a903763f14f5bbf6e0248e7"
	"50707f29dbb2fce94666d9fcd390d64079dbf547" -> "10e8a9352bcc7b21a64e0b321f302cf900ac8c77"
	"50707f29dbb2fce94666d9fcd390d64079dbf547" -> "7583a8b724bd38889376a90fb593cadbd8a97e9c"
	"507595e568fb5cb49cf7c2c93c7864130d7b0353" -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	"507595e568fb5cb49cf7c2c93c7864130d7b0353" -> "8f6a2dbe34017e616f8bb35bc668538eb11a8d33"
	"508cf7f5d8907a281602a54551abcc58a16d0493" -> "366074dc1843764c199c5b7a6354c58b8ac0b5c2"
	"50d91206465b8dd42e275810dc78572fc35935b8" -> aeaabab9cff9f0b7be4f652791dd8110cc2fe5d9
	"50e1821529fd0a096fe03f137eab143b31e8ef55" -> "14ddc393b17e80036485f69495006b18716c1863"
	"50e1821529fd0a096fe03f137eab143b31e8ef55" -> "6f0b72205d6da3ae20fd9834b3ba5fb2e3d15811"
	"515579756c8d23ea2f3c6386a9333ecbe84d8a08" -> cfea2f2da8d418edd7984e5b5073825834099a27
	"5173099aae25bedf7a87225891d124569cba7076" -> "706779344155823518745a19515601905877c41f"
	"51a22e98a1c37d80c3150930dffd2ffcb128448d" -> "0b432748507a12b92677653104b18834d83cfb10"
	"51a22e98a1c37d80c3150930dffd2ffcb128448d" -> bf1f004a4abf2e01ffff8257b3d85971346078f1
	"5209a247e7aa6c9e47e649613fad3f4cb79502a2" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"526c0a851b14d1bbec4b8d31a23d93ca0eb82637" -> "7d0037b59ae0d22a2718c28d8e70e3ef3f3f991e"
	"5290fb63c276db44dd623457095bb82eb0775882" -> "7c1d34fe5d1229362f2c3ecf2d493167a1f555a2"
	"5290fb63c276db44dd623457095bb82eb0775882" -> "96a862b6f88b0e3033180f76100016a687cf09a6"
	"52eef501e17078b369da571d7e6b72c7494bb779" -> "0cbcba54550b1ea108e977c24b835e07b96b1c0e"
	"52fe6800fbbe0256780d206a494acb9932e0f60c" -> c7acdd02db4782c56c49d6e87c4037c4073fcf92
	"52fe6800fbbe0256780d206a494acb9932e0f60c" -> e0ea342c0ead6eb558dfe93bd555cce754fbd489
	"532e3cf469e505fd9eca90441234d96a6081e159" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"53d75bd3e4f1e1d6c721fd90f9754a80caa61fd5" -> "6ff99174d152f0e1359c30e30ef08ab75b137037"
	"540e2bae1174027b2620034ebd4cdcdaaf8417d8" -> "841c3a38a616df29b69e556e431a42bf9dbe23f3"
	"540e2bae1174027b2620034ebd4cdcdaaf8417d8" -> d7fcbe2c56468ac780c689b02c6a9e056ce39c12
	"5419445b4d19b0979b14f239fe2362210174f613" -> d8af27d309c3637d05bd6b4957b3667c04dc861e
	"5463eeaedb2a818f0ac4d590add9808bf3249cd1" -> "3e234437defb84b809f64cba35fa174e394baeb2"
	"547f719d9b022e87eb8cf3cb7a7632822b996e29" -> "84b5c1a099e6df35f4b54d651b425a894513e62b"
	"54cf5d2da897d4ca2ed4872bd9b7e48851e5573e" -> "1b0e5f4499a0c099d99b00a2a6a3edb45ae98660"
	"550fac1d131d764c7c5ec5d69f53290c30855be6" -> "02ed88f6a23d142f6e5c7e0b351704654796a6fe"
	"551580e959894626c27474d35a73409be337b82a" -> "6bea9376c4351ec0c6672131cf3b8c30b520dea3"
	"551580e959894626c27474d35a73409be337b82a" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"55aaa8c63e25a59afc718ae2154f7e3c3064c4a7" -> "9350423982a851695b8f0fab1fd7aa8fafb10654"
	"55aaa8c63e25a59afc718ae2154f7e3c3064c4a7" -> cf8ba1cde5a673dd7f2354ddd2148f31e4c4e033
	"55b5ba87f1ce7ef5c9f891392a7271bfc4d62d2b" -> "45761988ac01b99f9a81ad6ec884bef3c2d8e402"
	"55b5ba87f1ce7ef5c9f891392a7271bfc4d62d2b" -> ee8020ff40dd3b9b472b482bfa7b6674747800cc
	"561de07b57fcc2057fb6b96043f008a5b83f140c" -> fa779fa88d18f550421ae777f7e048dd08ad0006
	"5637d5542021294e81cf0d8344fe140368117296" -> c92e7e156e6b406e7555fb5df058d18758a0b3f0
	"564b907c8a39ac6e6f8aecc6b2a1c125d41ada66" -> "24027256aa9614a445563707a72af7ce5ff49b5b"
	"564b907c8a39ac6e6f8aecc6b2a1c125d41ada66" -> "66e01e510a7cca4235489eac128913b069fa58a4"
	"56610beac248f698ea312d129ef8f1fbe6a0039e" -> "12bcb4d4d017d50979e168d537d05dc698ebeeee"
	"56610beac248f698ea312d129ef8f1fbe6a0039e" -> a2df58fb15aa6319e1f4159d0218814245e48e35
	"567341aaf4f4be52f471e4cfe7e983483eaf0bfa" -> "715e8ca8f0be3cd2e52db230bdb82a77e63a5cf5"
	"5785d9143bcb3ef19452a83bc2e870ff3d5ed95a" -> "0cc13007e5d50b096c95047680ace56749c18789"
	"5785d9143bcb3ef19452a83bc2e870ff3d5ed95a" -> "337855629f59a3f435dabef900e22202ce8e00e1"
	"57adf71b93efa9f9b4db5147e9fa1235f0a1d5ba" -> "5ac65f0d6b867ff031fda03779c2f2613f022b10"
	"57ebdd5af4031ddd0e012e68c5e423fd0671ed8c" -> "5a59d1e1a004d1a449b5f490efa7918d2c3df812"
	"57ebdd5af4031ddd0e012e68c5e423fd0671ed8c" -> ddb5287894c491686e6dc1a82e1c3d0f34e56a7f
	"584a16821b6998325b5cc60b970d69cf8faea950" -> c364310f83e726ab108cbaa7e5c1f508320e229e
	"58b5801aa94ad5031978f8e42c1be1230b3d352f" -> "81309f424b095b788449e640be913fd002c572f7"
	"58f577ccc8ff870063da604b7c4e69b11425f8a0" -> "107940684107a87d0ac58cf071fe1399621f30f3"
	"599a63409bed67d61c359d316da5a10bcddc954b" -> "106140a99fbdb7acf19723473621e0ccaa03c158"
	"59d92809088f28b06b0cd102dd166ba8b3144fc7" -> "9100c91cd4c83827b6c3c296e3b2ce89f9e98f52"
	"5a17181a3224c5bf83ea61ce6d023896a190f071" -> "71f41b00d8cac733315206fddf476d8bed484a36"
	"5a17181a3224c5bf83ea61ce6d023896a190f071" -> f66d1423f528403a33e8984f765801deb1b9cb97
	"5a526e5e18ddb9a7dfc5a2967d21d6154df64a4f" -> f65d9cfd3fc5a729bf3b4af471861805766d0701
	"5a59d1e1a004d1a449b5f490efa7918d2c3df812" -> "164a2516eb622fdf032ce526ec97e79a53bf2893"
	"5a59d1e1a004d1a449b5f490efa7918d2c3df812" -> efff4a85a4fce58b2aa850c6fbf4d8828329f51d
	"5ac2c61b550eb801d3acab1aa68f52379f9ad33b" -> "8b4b41aefb87c9b3dbdf40bb65686cb37038cb71"
	"5ac65f0d6b867ff031fda03779c2f2613f022b10" -> "072e3aa3a5c29ca1b68a7aaf570a0a8e7ab67127"
	"5aea4ff36c58bd3c6d6c0852e6b3469261348e0d" -> b133d3071ae6c648aced1c40e12914cb6b2ccec9
	"5b34dd08d0ffc967b92abe187cc890d52ade5ac7" -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	"5b53c492157b34c83e9e4f10661d7a8c6dc38f65" -> "7bbd51e504b715034afeea2e0d294224c516fb24"
	"5b53c492157b34c83e9e4f10661d7a8c6dc38f65" -> d549b6c9ff44d3ccb32b9bfe1816d3cfb1d7052a
	"5b648b819c6fb3137850fc31c0ad80b2ff55f14d" -> "2962899aa01f25457bbc204d2cc407ff5c0ca12d"
	"5b9d01bc4d84a1e09087a0b9dad206e855f49bf2" -> "08032fa30fefa3101bec4b774e79f4d091b516a6"
	"5b9d01bc4d84a1e09087a0b9dad206e855f49bf2" -> a4af0b6288e25eb327ae9018cee09def9e43f1cd
	"5bd10b2adcf3a080169574dd08c5529de81eecb1" -> c8a8e04099a99d6eafbe6e9bb1db3b50996836f8
	"5c0375266594f19f3d73969718a5806662cd6d63" -> "87e0910fb821d125fc06d25a8309d3c668045f57"
	"5ce6e0e2421af8aaa2be5684176a66388561d44e" -> f23179924bf4ee0e888cfbe911d9bd472918bcb4
	"5ce6e0e2421af8aaa2be5684176a66388561d44e" -> f52abcda959c2fa83243be21041d289735379b7c
	"5d0cf6bb3a126725f70529f205a32b4720f81183" -> "53d75bd3e4f1e1d6c721fd90f9754a80caa61fd5"
	"5d6b46764e6cf7bd048645875c580452f8a9835e" -> "29f656c46551209ed9e817ac9ac9cdb958207049"
	"5dd710cb628d10abe95fac61afb35cf798779589" -> "716b00e6e9e661c055de1b5baf440279c23f2da0"
	"5dd710cb628d10abe95fac61afb35cf798779589" -> f1cc562b77053ced18eebaae2febe5ff6d5e2690
	"5e22728f25290677f8ef5f2938a7e0ee24d432ac" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"5e58db65750a20ae6d0c620f8a2010e038d408f5" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"5e7fe8a7b89a07d8c3ab298ac69bc33f6ba88b47" -> "455ac07021d4feede4f5b7e39bf00dc186ce3c09"
	"5eb02dd8f08fc3b7ff22320c3311cd1da6a5ab4d" -> "4cbe9e0e21fca682d78980a03184071e9fe1c955"
	"5efe7e2f5dd8a788ff03d69293ba2020dfec44c8" -> cce5ed7397fb35440002d8bfbdc11f0999ddd8ba
	"5efe7e2f5dd8a788ff03d69293ba2020dfec44c8" -> d02c37c3e6baf1515e7d1372afa5941b9518ca5b
	"5f338eae76ea739954517292b8b057d1b6187926" -> "087740d65a5d28756ecbe56fc3b10328b52e8d33"
	"5f338eae76ea739954517292b8b057d1b6187926" -> "9d0e81e2ae3bd7f6d8a655be53c2396d7af3d2b0"
	"5f8f7081f7761acdf83d0a4c6819fe3d724f01d7" -> "39ba2e8e5627a8a3062d257928824139ca71c5f3"
	"5fa0c4dd296d3731bbbd1977d7bf9c50d8c4b7c1" -> fc89d14c639faec779956b4e3cd873c07bd4327b
	"5fa232d8520f577dbc41cc0414e884dbd85fa66b" -> "6b64ee2d16d3226b28d727d6b77c860d404d2898"
	"5fcc683338e947d1226a9426174e7c48ce849c47" -> "48524fac643afd7ec70d43684902598ad6d5b954"
	"5ffbd7fcf84b313bb07e91246eb9419ebd94a7e7" -> d13b5baf06b301c3b4297930003759edc1f2edc9
	"5ffbd7fcf84b313bb07e91246eb9419ebd94a7e7" -> e2067b49ecaef9b7f51a17ce251f9207f72ef52d
	"60017ef61a148b814867f3ca8f89f15a80916aaa" -> "98046591b96a213e05d17569b1645e772df91b90"
	"60017ef61a148b814867f3ca8f89f15a80916aaa" -> fe4e60a33197d0b3e003cdc5ca1e94e6d092da89
	"6024f321d491c4f37a2698239260757df64c611b" -> "149585079facfbdb5713bb8852caea2068cd4f28"
	"6024f321d491c4f37a2698239260757df64c611b" -> feffb34257ee8eef18cc6a3a5a4f01d40720bda1
	"60c208db584c5a1558acaef9c2ba2fdf15999bc9" -> "3028db4af289560e670b9f362aea16eaf3d1825e"
	"60cb8e79cbdb754af8cbd1e3c1bee755dcf07f2c" -> "82522a9e2ce3e2b400a217a21b05204a2034edbc"
	"60cb8e79cbdb754af8cbd1e3c1bee755dcf07f2c" -> dd1eb665efaaabe4984f51248817d676e6765386
	"6128301075c90ac1d25badcc29771d1547fdf80f" -> bd262d07b65af894b1014cd8cc2d02aaee65800b
	"61cd812130bda9c8996c90283501ee00c029c7a4" -> d6b67cefb5c27d1479d41a8fae1a03b8aece82f6
	"627208d89dea747b35cb848eb5e2c8eddf878dfd" -> "663485ae52c79430708592789f1bc4d96066e7b3"
	"627208d89dea747b35cb848eb5e2c8eddf878dfd" -> db91954e18654eeebc54c900f44c704002e1866d
	"62898b8f5e86b67dbc8f9092ae9ee0819823a0be" -> "388218fac77d0405a5083cd4b4ee20f6694609c3"
	"629188ede7ee00c925ef28b85b1e68fc9e05fb93" -> "27e8960037289dc10e6f659b424c66bfb07146b5"
	"62c58891e177bb3860ab19d2dc2e23909759c6ed" -> "61cd812130bda9c8996c90283501ee00c029c7a4"
	"62c58891e177bb3860ab19d2dc2e23909759c6ed" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"6311e1aa59fd9d7949ef622bc27aa8399ae1f76a" -> a36e024e989f4d35f35987a60e3af8022cac3420
	"637fb902283a2244f4c910fee179d46c1fe9e867" -> "757161efcca150a9a96b312d9e780a071e601a03"
	"638060dcb95ed7ef3b2f6e6038ac12744d8ba238" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"63a597dd94079887a1b5ad72f64a8b0ee822dc27" -> "235fe77c2990ca6762ad9146105915987acf956d"
	"63d555a2dcb4c308ede76b96be1239950768a7d1" -> "49b299215dd779b781c5a39af85a5acb6294acbd"
	"63d555a2dcb4c308ede76b96be1239950768a7d1" -> "8d335468eca3c8b37d7b939f7d7f17b31c514e8f"
	"63db268d4778f250892479e7e517e23c54ac8eda" -> af8fc7be10fa486c93acfb177af4dd1fa7757deb
	"63db268d4778f250892479e7e517e23c54ac8eda" -> d6d4e05ad1951a7d1fe988bfbab23e1f3c8997d5
	"64156589d9fc24afbc872a4dffb709926d67262f" -> "6a0ee54f9a3ebf667e86f7110c36b2240df96166"
	"64156589d9fc24afbc872a4dffb709926d67262f" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"64f3ff3ffcfed10b8b5bf42cda3fc19776fb29f2" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"65c10aa8d5000e0ecab34a9652056f0520fe51ed" -> d76eb0dcccb19d2f85924a4be177ae76126bf5d3
	"65f586132bfa21c3e9fe7b2803ef526133a3b269" -> b537af720ec22c0283923afcdbbc1df306907542
	"65faad6d841c29d4545e9cf3676d75f4e6e4872c" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"6632bcba514f4a195447eb77264f75fed3a768e6" -> d8baf083c5a1a3e8dd27fe73e6000c5f6dddf1ca
	"663485ae52c79430708592789f1bc4d96066e7b3" -> "32346e0c3be7f2f43d3ef9eb2c4fa68f5ac7460a"
	"663485ae52c79430708592789f1bc4d96066e7b3" -> "5040f9f164ea7d633237e52bed311d1e9773c78e"
	"6644ead45e228485686e71a7af4bb9c5c05b382c" -> b74ff38af58464688b211140b90ec90598d340c6
	"66e01e510a7cca4235489eac128913b069fa58a4" -> d7fcbe2c56468ac780c689b02c6a9e056ce39c12
	"66e01e510a7cca4235489eac128913b069fa58a4" -> f8f5af2952e76b4293f1cf0ff09d0e80697f6734
	"6764f8d562be65cdd822e1394a10aaea5f2f10dc" -> "2b4ef0d5c0421decc96d16671be3cd9d3d3709ab"
	"6768cd3982a5cf8df192224d4da8c3f03d4cb964" -> f93ff170b93a1782659637824b25923245ac9dd1
	"678b22f528d533ab49944a696639e664d301a7e7" -> "4ad71b16cdc8f5f367931b908fa904e8e8c48b47"
	"67a6b1aeb82fd4685e862a3a7807d4ed8ea5d899" -> "0b1493c2d49222ce07b73016bb156fecb5999bb9"
	"6840fe9ee29ab51ffd7d924c624dc62da22c50bf" -> "1e72e889e722af06c2bd17b92becbc123c3b84c5"
	"68c3be61fc58cafe3786625f5a2b5cf8e7186392" -> "16b2e579f91cddb672bc63612d516d65c8be0a7c"
	"68c3be61fc58cafe3786625f5a2b5cf8e7186392" -> "3306edb3805aac7baf77c4916b5495ff278353e5"
	"68f51871df87d82a504cbcca3230aba570719ba6" -> "4b5073c64b6e4180dcf1bed09c6fdd52cd1b2d21"
	"69666e6746e4e87535ebf89c463980a9c655bae7" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"6979bf6f8f5e831ef38214edb158c7fb493540f7" -> "6632bcba514f4a195447eb77264f75fed3a768e6"
	"69bc044def16e8d8f85cd321b00ae53abe96a567" -> "869a1edf4470fab379fdead671036d6906112da2"
	"69f6dea44cf272dc80be6dffd0ac8db5c50585b4" -> b20d7d348c4d32777cd577c221de529452baca03
	"6a0ee54f9a3ebf667e86f7110c36b2240df96166" -> d2c0b6a86cb0f1a73d9ad5fcffda45497cd7ad42
	"6a64ac7b014fa2cfa7a69af3c253bcd53a94b428" -> db91954e18654eeebc54c900f44c704002e1866d
	"6a9ae8101525360b8f79ed20d2f483616bd39c90" -> "3e681a7ccc97b81f9c93e5b4ca6d3a85d9817285"
	"6aa09fd8726b7e8de37c0187a83c2c0fca280358" -> "0a78d61247922f30ebf2ce09025dcaa7bd7e3583"
	"6af23ac66cc5050aa4aa2adb5037196536c824e3" -> "75a044f748f2c37a2a08854acd49ed1fbdb86bb1"
	"6b2655567dedb24571ef309c45f9ec45caf67933" -> a9edfb5dfd882255b7563c5cc341fcbe9a8a3c30
	"6b2aa7fd371c93df44cebff072bef193104f43f8" -> "7653e9af9b9ddfc465df50203c78f5c8569d8c79"
	"6b64ee2d16d3226b28d727d6b77c860d404d2898" -> "9a307cd2d656df87bcab0772285a3602af3e9a42"
	"6bba6f604ba1658ad9b6b1de6eab299fb9fb35de" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"6bc06e8f20a8cd67d6e49d31472d5bc8c048cae0" -> "678b22f528d533ab49944a696639e664d301a7e7"
	"6bd1c91b067bc73fdcedcc85aa2367f340cf3a2b" -> "318f4c98276de7e515f838a9626bcf60d757ee20"
	"6bd1c91b067bc73fdcedcc85aa2367f340cf3a2b" -> "5290fb63c276db44dd623457095bb82eb0775882"
	"6bea9376c4351ec0c6672131cf3b8c30b520dea3" -> "72b47a15e918065d3df5ff68594d3890697f3db6"
	"6bea9376c4351ec0c6672131cf3b8c30b520dea3" -> c1cf918d3adbe832fdaf278a23151502be255bb2
	"6c04ab211ccd52829e0658fb08bd9a9f9b0d655b" -> "115458a58b29dbc22318fc81bff4e7c091040e3b"
	"6c04ab211ccd52829e0658fb08bd9a9f9b0d655b" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"6cd5b60792c63fcf958b0a48813a84830a5764d6" -> "89ad48db1442b5f60b4d0bd02a5edf2044ef411b"
	"6cd5b60792c63fcf958b0a48813a84830a5764d6" -> "8ce506d9ab7ac14a28d365ce150de191da956eb1"
	"6d385fe277a467fea1c24adbc0d7b77472896904" -> "59d26bd9619c1bb37b1ccb4a93a71221bec46e12"
	"6d385fe277a467fea1c24adbc0d7b77472896904" -> "5dd710cb628d10abe95fac61afb35cf798779589"
	"6d872e6042484f8883c097f9ee8cef34dc4c0629" -> "49b299215dd779b781c5a39af85a5acb6294acbd"
	"6d872e6042484f8883c097f9ee8cef34dc4c0629" -> "799bbc6b82d223e23e2550aba4ccca4dec29d0c2"
	"6d8aa2aec81abf4935c72745790bc5f9bf7541b9" -> d6787d975147a74f1560fffc09dcb2a1f92460bb
	"6dc24dfdaff5e6b5c5e185345c87a74383198d4a" -> "087740d65a5d28756ecbe56fc3b10328b52e8d33"
	"6dc24dfdaff5e6b5c5e185345c87a74383198d4a" -> ecf8e8bbeff2edddfeebe7213b294c22ced1e8e8
	"6defb0235c6e7c46974d7d65de7530e559ddcf0c" -> "58b5801aa94ad5031978f8e42c1be1230b3d352f"
	"6defb0235c6e7c46974d7d65de7530e559ddcf0c" -> "6dc24dfdaff5e6b5c5e185345c87a74383198d4a"
	"6dff5de1da7157de20310b10e5a0c09953dbb4bb" -> "89be7d2774f81f3d8663999975a6ab64d46bf42e"
	"6e3ea71639a3541523f2be8f950325c8a0aa6768" -> "445f9f4f35c663fb668425f8c8fe0a1d58e1d8c7"
	"6ecb4fc149c725e16392dc88f1f419dd56aaddcc" -> "294673a17e818d8a29c8d23b0922855734e1925d"
	"6ecb4fc149c725e16392dc88f1f419dd56aaddcc" -> a90ff409f0490aef6266f17656fa626154af9715
	"6f0b72205d6da3ae20fd9834b3ba5fb2e3d15811" -> "246569bf83f2a586268d26559c7d6ea54c9316b6"
	"6f0b72205d6da3ae20fd9834b3ba5fb2e3d15811" -> af8bf677c150144166454f311642825a0b08e506
	"6f3fbed8eda577703426d77dacc71ce0ba46634e" -> b411ed60c7438eda3fd85a308050e88159f275fd
	"6f4f191fd104d28584edf39c3394f11b8b8c72e3" -> "9e471b69619848d48b5887171b7195ee649b879a"
	"6f6127decde6785b9ba5f22a07a7754d1fda1a59" -> "9d9fac0f34ec47cc6eafeb3e10378ab8f3310346"
	"6f8ae955bda8ad246cc1f5f7a15f1c3b1c04696a" -> f74eae3e475f7d043fd0d4c9ce21f661125b630a
	"6f91663493cf992b692e681fb020a8a0b98729d8" -> "396b22da087e500e65aaf9433c0aa1861a9787cd"
	"6f97affbc47713589631ee58027b956ed723e2a1" -> "4e5a29be8250487b387ff3b254e30b2320407821"
	"6fb8cb3d685382089a2e34ba35a30e898d63ab26" -> "373a4326961c504ad6365fc1e4a9082e387499c7"
	"6ff99174d152f0e1359c30e30ef08ab75b137037" -> f6a2efdc9b24a14f294fdbedfae3df4ce55faa9f
	"6ffe58157f8cdec5de7add4d7e35065e9a38b870" -> "6f91663493cf992b692e681fb020a8a0b98729d8"
	"706779344155823518745a19515601905877c41f" -> "949bb8f74f6db7405d6ad8bbf02ebc42a947801d"
	"70a16ff8a162ad0b6a39d17a1699a2949e2a2674" -> bc204b742735ae06f65bb20291c95985c9633b7f
	"70afa6fa318db517adb0cc7d4cb66260061bb684" -> e31db89558b7f1d622e5a64cf37779b721099814
	"70bdbde0d8d43ac32506877ab3a45783cb38651f" -> "3dc7f0777a17a184029228c661ca0a505b737aed"
	"70ef27a53fad21da39345973258be23bc3d80dcb" -> "3adba40858036a5a44f550aaab5287ad135f5f87"
	"70ef27a53fad21da39345973258be23bc3d80dcb" -> ac2f26bf17c32214fcb34a33db7ac7b688be9e02
	"712f6cfe5411fdbbf46688c22a40fac7e0a8839b" -> "01a587da8cf89f9d6c8c5b19ea3e109efb7c9b7c"
	"714518543f337d2b946562c0ba92b7ef742e0b7a" -> aa9235f01514a80b262b3aaadc12432c1e503bb2
	"714518543f337d2b946562c0ba92b7ef742e0b7a" -> c5490ce9d1b625516b17253d1d2d0352730b7b84
	"715e8ca8f0be3cd2e52db230bdb82a77e63a5cf5" -> "79be31650910025eaaec448221191bf37cc4776f"
	"716b00e6e9e661c055de1b5baf440279c23f2da0" -> "7722b997c65b99aa824f83fd8e674ae77ea698f3"
	"716b00e6e9e661c055de1b5baf440279c23f2da0" -> "7c2f2919434b0b9d8df79f469903d0bca815557b"
	"717d13af3633b765c629f91a0c3c1c2af8818a2e" -> "044b6f04f23d6c7e3c3750c9829db96b71470874"
	"717d13af3633b765c629f91a0c3c1c2af8818a2e" -> "21d81b4f098f55e9a390af3cdece79f81fe14a12"
	"71e19a003197960cec38d30e71b49d182bcf8510" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"71f41b00d8cac733315206fddf476d8bed484a36" -> "4ad47d2de3cf71686a0dffcdda069cbd202938bd"
	"71f41b00d8cac733315206fddf476d8bed484a36" -> a70beabaf5ff19c87cae865f4f7d7c50eed5324c
	"72749cdeaf475612deb2ca4a959a59b0e9425c0e" -> a8a42585320b0b7487e82f875a5906d9e3ead589
	"72b47a15e918065d3df5ff68594d3890697f3db6" -> "831296c55738229a56ac0eb4be6c0cdaafa821d5"
	"72b47a15e918065d3df5ff68594d3890697f3db6" -> bad79103998cd329584e844a315e85c3e1ac3839
	"72d385824a75e1d39b2a4395852dc954907fcc7d" -> dc657d56254d335016c02fb14bb257e37b8cde89
	"72f1ddfbc95b47c6011bb423e6947418d1d72709" -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	"72f1ddfbc95b47c6011bb423e6947418d1d72709" -> "7304bd2bc390aa6cf27f7a2527d7806dd3fad53e"
	"72fe8bfac832a1f1b9b7cdc4efa793c48e13933e" -> "1c14b1aedec6e9307e0c73276b8c1c283413ea41"
	"7304bd2bc390aa6cf27f7a2527d7806dd3fad53e" -> a8179952e13af2902d4806d2e2982bcfeb6339eb
	"7346e340f147131ca32089f61f7d0f502f80d19d" -> "52eef501e17078b369da571d7e6b72c7494bb779"
	"737049d33235a7e1b5395cfdde28e09eb0c8b565" -> "079036d154c003431f45b7bf2341a84351f260f4"
	"737049d33235a7e1b5395cfdde28e09eb0c8b565" -> dd98f54f30606a2afc05892bbd0185648311963e
	"73897bcc729bd26ea18552b27e1ed5ffad93a951" -> f2cfb42f2267455c78077bd5f34518da5af5177c
	"73c152e6106c3ead1f15f920f4b4f4c38fbfcdb3" -> "6a63995335e7a941d34bdafb93a56f789ebeed75"
	"73c152e6106c3ead1f15f920f4b4f4c38fbfcdb3" -> c032b1d8bc29de4fb1322d841d8216ca961dcb53
	"73e055d71ea39c54e78b6e9a28ea0d8e7999a5cb" -> "0b432748507a12b92677653104b18834d83cfb10"
	"73e055d71ea39c54e78b6e9a28ea0d8e7999a5cb" -> f8b9821f7d4f5239911794d03ac74edf27d711e6
	"73e35b172a74cfab8f1db450113f2bf826b40b60" -> "1e781209284eb5952e153339f45bf0c1555e78bb"
	"73e35b172a74cfab8f1db450113f2bf826b40b60" -> bc2c65770dca70c1d4e151fad971bc7c7235a702
	"746ef86a415990beed959ab8f5adb54c4a1ebc90" -> "8668b5f11941223dcb449205930fb141be7bb92a"
	"74a3c43834882219aa12aa1815d441a1762ba558" -> "1ecb7c7c9c817c334f4b39253cb1df8fd1d9523d"
	"74a3c43834882219aa12aa1815d441a1762ba558" -> e4542d8b35788c355164794457d46667378e9354
	"757161efcca150a9a96b312d9e780a071e601a03" -> "46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07"
	"757161efcca150a9a96b312d9e780a071e601a03" -> f93ff170b93a1782659637824b25923245ac9dd1
	"7583a8b724bd38889376a90fb593cadbd8a97e9c" -> "2de15960026972a7a1d933881dad8a3879471155"
	"7583a8b724bd38889376a90fb593cadbd8a97e9c" -> "970916368764347c38d36c727b2e6e0086e784e3"
	"759d2a534a2ca290f3dce24a29b1e5390781706c" -> "469e1df3f9863738c533e348b4525a6963cb1025"
	"75a044f748f2c37a2a08854acd49ed1fbdb86bb1" -> "0b960a53daa1b336bcec5810f70d8af8ced86ca8"
	"7653e9af9b9ddfc465df50203c78f5c8569d8c79" -> e2f6f7658559246ea03015fc7b999af2cd20c122
	"76baf97fa13c4109c335180b121140c8ba1bf97b" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"76cf4f61c87855ebf0784b88aaf737d6b09f504b" -> "996f0c583b36aa5d6c6308285aea1421eb7efae7"
	"76db3e05d55a7d485e776ee1981179b10871051e" -> "887758c998c31a7f461c808cb3931318f4e5ea3f"
	"76db3e05d55a7d485e776ee1981179b10871051e" -> c2b83ec2e7b6a02d6c8f4756b4aa5e47010deac7
	"76e9e8173680e7454adbda82391affa3a2a567ab" -> "4771501c0a125dd3560391cbd716c63a281e8244"
	"76e9e8173680e7454adbda82391affa3a2a567ab" -> "89cd7778c9694b36085f31f195fc598a0130d65d"
	"7722b997c65b99aa824f83fd8e674ae77ea698f3" -> "3295c3539896750f742a56de0c4ac965f8d96303"
	"7722b997c65b99aa824f83fd8e674ae77ea698f3" -> "345aaf3976a6abc491026c8a465b5e8ccbc8da5a"
	"77b2d29e91c568dc3b08adbfc48fea641d4e39f7" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"780f7fdaa36b70d08fb26191904c3103207cc40d" -> "21e1b4486586d3a15d2d7bf0479e77636359b816"
	"780f7fdaa36b70d08fb26191904c3103207cc40d" -> "7b39a128c814a2362d0533c7df0ab7a2fef6fa4b"
	"782243c5383dd40d26d75dc97d7fc39900fb60a7" -> "388218fac77d0405a5083cd4b4ee20f6694609c3"
	"782243c5383dd40d26d75dc97d7fc39900fb60a7" -> e22cc108b684920a6e46f924893279c821135d13
	"78a95e0d806677fbb1d436c2985e39c1f8ce3c00" -> "58b5801aa94ad5031978f8e42c1be1230b3d352f"
	"78cdeed4c79d165c915e8de0355cc3fb7f5797c5" -> "84bb5eeace7f797c3898ad6ee6c4909200be0c77"
	"791677a5ddce9730a1203188938406ae030ed170" -> "5b9d01bc4d84a1e09087a0b9dad206e855f49bf2"
	"791677a5ddce9730a1203188938406ae030ed170" -> "6bba6f604ba1658ad9b6b1de6eab299fb9fb35de"
	"796fda3f786b3cd5518462b46895244dfecad63c" -> "150c31bf88ee3021a51c0482279c7ccac68b0e0e"
	"798e0f451661f81f4568dce4033cf1c9076f224f" -> "2105064b10758c9032b94112276e8d3eb5718a2f"
	"799bbc6b82d223e23e2550aba4ccca4dec29d0c2" -> "5a17181a3224c5bf83ea61ce6d023896a190f071"
	"799bbc6b82d223e23e2550aba4ccca4dec29d0c2" -> ffbd3f98f999102cab47fda4c992d7fa07e1d912
	"79be31650910025eaaec448221191bf37cc4776f" -> "72f1ddfbc95b47c6011bb423e6947418d1d72709"
	"7a3136e5c713c4a5ed2af51ccb8abb5cfa3d98bf" -> bcf7edee09e8f9c1779fafa953832f63e9a23545
	"7a52a8c7d855d3ed779059af160248934ac2c6b0" -> "2ca67c6f1433586e61487295bb04cc424992db12"
	"7a8d9efc26f194eb20114d1f639ec9fa48d70bff" -> "526c0a851b14d1bbec4b8d31a23d93ca0eb82637"
	"7b081d2f70feb7eadd1e93f52146e5d68371451d" -> "5fcc683338e947d1226a9426174e7c48ce849c47"
	"7b24a170d2c36c83c3669d194af46a09ccdeec43" -> be0905fed1cdc9a2269f19569c518f00d54d2dbe
	"7b39a128c814a2362d0533c7df0ab7a2fef6fa4b" -> d6a7cace21e689dbbc6a4135d21a1ff6bdc04ce7
	"7b5c9e281e2596d40d152c7df309ac90d574df66" -> b119a687d411864433aed92017c144d311b53a4c
	"7b5c9e281e2596d40d152c7df309ac90d574df66" -> b6b6757d77288d542bbb20ed40ec5a0aabfedb71
	"7b9397e6b1db991107f91c762642d064adc990e3" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"7bbd51e504b715034afeea2e0d294224c516fb24" -> "6bba6f604ba1658ad9b6b1de6eab299fb9fb35de"
	"7bbd51e504b715034afeea2e0d294224c516fb24" -> e075d609ae7c11cefa915a4670c8743e06b5c828
	"7c075d304c5a215465fa1962b95dd8b3ee6520cc" -> e13861b9f18e0a3644d159aba6621b29e0505143
	"7c1d34fe5d1229362f2c3ecf2d493167a1f555a2" -> bc204b742735ae06f65bb20291c95985c9633b7f
	"7c2f2919434b0b9d8df79f469903d0bca815557b" -> a24953f3df4546cad670892c652978cce161ec79
	"7c4c1cbc0b94665d6a94ac7df385459346af5265" -> "1f054af72f509f1247687b91a360961b5d930869"
	"7c67d2a07055150b76e81efa8850221d52705305" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"7c78c599bb9b51e5cbdae3e7dc1d723eefcf7c61" -> c50fbb2dd225e7e82abba4380423ae105089f4d7
	"7d0037b59ae0d22a2718c28d8e70e3ef3f3f991e" -> ca9d60f2460c296b32b3da97eb953bbc4d292197
	"7d4212b8f376ddf1aa403e51b46c92106d079b2d" -> bc9342771b7438ddf785960cd418ab8c6a7aebef
	"7d90a272ac4f9a2755d7b4f5807d670e0212e70f" -> "33af5a333416317f5d1fe0c8c9f980617a413aa8"
	"7d93e5ad978ba1d3fb88d5395bdf32201b3bdd36" -> b81f8c8dd3ec81a8d622e2d3d6b2af426ca53f05
	"7d93e5ad978ba1d3fb88d5395bdf32201b3bdd36" -> d6348c9f60fe5507e03be9a59896af2607e522a7
	"7dc4bdaea8fee93e3653ceed32d2d89d502d67cd" -> "123929bd4276504d953fb4c8be2773f46612ac30"
	"7dc4bdaea8fee93e3653ceed32d2d89d502d67cd" -> "2fd367cf63cd5f94368340cc6fe1cd0a3fb021df"
	"7e3cb2e515ea2e2bc11d80bdb9a20f0daebc19a2" -> "191f0c8db22267cab55472961524c70a1d692025"
	"7e3cb2e515ea2e2bc11d80bdb9a20f0daebc19a2" -> "4e746b1a31f9f0036032b6f94279cf16fb363203"
	"7e8431ab257e4492cf65950dd066524370c30347" -> ae4b89d849ef425bee1157421f2c44071bb9b5c5
	"7e8431ab257e4492cf65950dd066524370c30347" -> aea7c185beedb0be3437d9de9f7c894b0da6c547
	"7e88640cd1801b6fe0288f744da7310b4749c0c8" -> "796fda3f786b3cd5518462b46895244dfecad63c"
	"7ee4fd18ace71d187ee3ea5ba745a6a3493e0e0a" -> "5e58db65750a20ae6d0c620f8a2010e038d408f5"
	"7f17900b5ba2569d9d07352be51ce90a249a0b46" -> f5c714e2a7d6239548b94c37ae906484e94b5bc7
	"7f420a6bda9704684ccc924070e8404dac55ffdf" -> "58b5801aa94ad5031978f8e42c1be1230b3d352f"
	"7f9870794f743922aff6caa24e1991d5600b1b8a" -> "30696be71f64ca3764b1d334927da927d6d8df78"
	"802a553add113ff0fe93eb3690d88ac97aa91c99" -> c2f2af1d09f6c7f50a40ed51e6d9f834b73f5533
	"803b5acaa7cb979b5d623270af18d6d8354fce9b" -> "8ccc75c2452b5814d2445d60d54266293ca48674"
	"803b5acaa7cb979b5d623270af18d6d8354fce9b" -> c43136d67b7c6a9ecfa988004eb4a87bfbe957a0
	"8086c4ca6055b80c96a420b717be6b2915f210a1" -> "4ebba56419f0a7530ae8378284d7ee0cec22ebfa"
	"8086c4ca6055b80c96a420b717be6b2915f210a1" -> "55aaa8c63e25a59afc718ae2154f7e3c3064c4a7"
	"80b09099f88bb73430e785a6ff4272a616a129e3" -> "07a176cdab7a95f53f9df837b8f3a20583b3772d"
	"81309f424b095b788449e640be913fd002c572f7" -> bdd1988eb335830fc8602f589e04d56348596abd
	"819fdd6e76d6dbd3410e9614be843cd50f8a6c75" -> "01b9465440ef96427162197e6a284dbfdeae7428"
	"8214e27d275915079ddf7c294c379515e34e8efb" -> cade724b527d753def6b2cd169df62ef03bdbfe2
	"8241ae63d821efc7906d13654cb63523dc4f0a3a" -> bc204b742735ae06f65bb20291c95985c9633b7f
	"8244d01de6402606c9fb588ce2143aa629aa7d0e" -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	"82522a9e2ce3e2b400a217a21b05204a2034edbc" -> "017bd8923986acd4992fd21f3451fdd15ec6edce"
	"82522a9e2ce3e2b400a217a21b05204a2034edbc" -> c3fffcfe8e6c3bfbe358366c973a6109fb95d4e6
	"82deaae3b94d59caf13ea21c980ab386df6dac9e" -> "06d9252bccc39c335fa5ab36adf724df4570248c"
	"831296c55738229a56ac0eb4be6c0cdaafa821d5" -> "1bc1ab6ecc2b71eecec0671746d85bf7036037e8"
	"831296c55738229a56ac0eb4be6c0cdaafa821d5" -> "61cd812130bda9c8996c90283501ee00c029c7a4"
	"83834291fa7c15234c3de59dd8459903b144d00e" -> fea214e48d5f406a20433da975a52d9d0e472aec
	"839741ad40b010b4c8ac49a53117562b062e906f" -> "8086c4ca6055b80c96a420b717be6b2915f210a1"
	"839741ad40b010b4c8ac49a53117562b062e906f" -> b07dd9078b8ba5f3b7f5c88f84f7ee9c34fa65e1
	"841c3a38a616df29b69e556e431a42bf9dbe23f3" -> "233d48f5de1d6cdba0eb64165212dfbf6fa444d7"
	"841c3a38a616df29b69e556e431a42bf9dbe23f3" -> b3e6e7acbc16ce8a8986ee84b24ad7d97f6017c4
	"8454b42f947e185a65b2950123493928558f2f5e" -> "07892da045c51eb97ad77aabe1ae4c34170ab3b4"
	"84a5ce3f03aa409d9b0b22f532a943ddb3e11740" -> "0fbe93b36c05bbf4156c157f27998938ce312265"
	"84a5ce3f03aa409d9b0b22f532a943ddb3e11740" -> "3eeed876a909c45695f2f3a3edd4141be331a3be"
	"84b5c1a099e6df35f4b54d651b425a894513e62b" -> "9929a6791703c96e5f613cc3b52f4f9e16baa49c"
	"84bb5eeace7f797c3898ad6ee6c4909200be0c77" -> b9d6f64393275b505937a8621a6cc4875adde8e0
	"85127bcdeab5ab34f9c738da3fcc88d637f39089" -> bff455576750bd013a3c87b15cc7086cb8c1eab0
	"851ecc4290cbdb57f36f10b77da9c1ae13c10469" -> "0696ebe9ce533cf3c839c9eb2bd2331c8fa0f014"
	"85cc9f2d1ee4d65cb1edb00d4f56863185a53e0f" -> "757161efcca150a9a96b312d9e780a071e601a03"
	"85cc9f2d1ee4d65cb1edb00d4f56863185a53e0f" -> "865b1218246386580c57d3fed915310d1168e86c"
	"85cf8801c8839f42a68cef584a522de69a3b02ed" -> "43850dcf9c4ca6407abdd167aa3acc098e0e0f7c"
	"85cf8801c8839f42a68cef584a522de69a3b02ed" -> "73c152e6106c3ead1f15f920f4b4f4c38fbfcdb3"
	"85d8a43baa5b4d93dce18f8c2261cb001571779a" -> a620046b29d3a9b8a0337c0396441c26ac84ebe9
	"85d8a43baa5b4d93dce18f8c2261cb001571779a" -> f705b3209ce9f624048d39a62745ce582d01df2c
	"85e342adbdea3adbd70d607c0748c8a036d26c34" -> "238c8d3984fc38d10a257c0972f142793ae5af96"
	"85e342adbdea3adbd70d607c0748c8a036d26c34" -> b07dd9078b8ba5f3b7f5c88f84f7ee9c34fa65e1
	"85ee0680e2d5d667919e06394ca7622f09652310" -> "45843d8f4eb2bbfc73cc361ba9d612d088dc8a4f"
	"865b1218246386580c57d3fed915310d1168e86c" -> "43850dcf9c4ca6407abdd167aa3acc098e0e0f7c"
	"865b1218246386580c57d3fed915310d1168e86c" -> d3603152ad074a50ed6022133a71b91a16cc7baf
	"8668b5f11941223dcb449205930fb141be7bb92a" -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	"866ea877036ce581e0d3c130f527631cd8b36bdf" -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	"8677dc54d23642379db0014f8fa76565a086b1d5" -> "3fc0e14928d60d588efd1fcc0edb202e4c0023b3"
	"8677dc54d23642379db0014f8fa76565a086b1d5" -> bc2c65770dca70c1d4e151fad971bc7c7235a702
	"869a1edf4470fab379fdead671036d6906112da2" -> a16a2ee312b088ae6ac2ab3302ed191d19a71718
	"8705c9bd139028aae148251420da27c9bf1c4745" -> "6b2aa7fd371c93df44cebff072bef193104f43f8"
	"8765508c349a7c225a96d7c7a8bd2045945e5ff0" -> ecac596c7b3492e75cae44aed47f222c198deaea
	"879780f9a15177ed703f56bf347e0a410c22e9d1" -> bc26f7690a318fd0a875bfd8d56c70e1ccb79ccb
	"87e0910fb821d125fc06d25a8309d3c668045f57" -> bbd6174b2501a3523d778dbd479e85119c86840f
	"87eccc3a81d133e636150268c24d2220cad70fe5" -> cb0ae672aeabefca9704477ea8018ac94f523970
	"887758c998c31a7f461c808cb3931318f4e5ea3f" -> "8ccc75c2452b5814d2445d60d54266293ca48674"
	"88955fe5b4b1dc7505854d9ee138915a27e8210d" -> "3295c3539896750f742a56de0c4ac965f8d96303"
	"88955fe5b4b1dc7505854d9ee138915a27e8210d" -> "7d93e5ad978ba1d3fb88d5395bdf32201b3bdd36"
	"88d4bff8c376cae3029b7da94a21c4fd4ac0249e" -> "5d0cf6bb3a126725f70529f205a32b4720f81183"
	"88dd321cfedc6ee190dfafe4670a83ea33cdf4a3" -> "8ee018d863e521f32a9cb92db66c25e848b5e0d0"
	"88e08b92e9a55fa453d44b26061a6a67a7eefafc" -> ae0b33939d233fa340f1ebb768588dc46a128e4c
	"8922506cb2c34527f8b2321b4f7a4b454a325a07" -> "88e08b92e9a55fa453d44b26061a6a67a7eefafc"
	"89ad48db1442b5f60b4d0bd02a5edf2044ef411b" -> cf7ee481902df64b26ac8b1741eca861a8d2f7cc
	"89ad48db1442b5f60b4d0bd02a5edf2044ef411b" -> e8008110cebf5cac71ae1722e4e2bf9b6b6369e2
	"89be7d2774f81f3d8663999975a6ab64d46bf42e" -> e2067b49ecaef9b7f51a17ce251f9207f72ef52d
	"89cd7778c9694b36085f31f195fc598a0130d65d" -> "191f0c8db22267cab55472961524c70a1d692025"
	"89cd7778c9694b36085f31f195fc598a0130d65d" -> ae8f9ce9a0f0a385386661ae2d4595c92a50d21c
	"89cdbffa8619b0f5e87bacf12dfa400259511b1e" -> "757161efcca150a9a96b312d9e780a071e601a03"
	"8a867933946ca8ca306ef9bed35f6a7d5a91e909" -> "06cd5a066d4063da529f6417cb6ca5678055a807"
	"8a9f3a5cdca8beda7b0ba5c019d652683327a923" -> "6cd5b60792c63fcf958b0a48813a84830a5764d6"
	"8a9f3a5cdca8beda7b0ba5c019d652683327a923" -> "975fc0471abf12cd3fdf8ce3220d2388aca7f759"
	"8abf3ad23cb1008aeadaa2e1ed68a2649be74bb0" -> "2cf14d1bfd6cdf6629e56046dd30d1ef15175fc9"
	"8b4b41aefb87c9b3dbdf40bb65686cb37038cb71" -> "7c78c599bb9b51e5cbdae3e7dc1d723eefcf7c61"
	"8b4d916cbf5f85685bcaa75648f6034b008a017a" -> "1de40edade52ee1d3deb225ed4719978d7fcf47e"
	"8b4d916cbf5f85685bcaa75648f6034b008a017a" -> e7fb2ca94556e6aadfc3038afaa1c8cc3525258c
	"8b702f93dd4d239acd07f9a4991be3297ef333c9" -> c143dfa7ed4115d1fd7d23150a0314768377f108
	"8c53354658462aa6783022def86750ab0b79eb6f" -> a8dda1af6ab400d45b7524bc46b64e04d14fc912
	"8ccc75c2452b5814d2445d60d54266293ca48674" -> "68f51871df87d82a504cbcca3230aba570719ba6"
	"8ce506d9ab7ac14a28d365ce150de191da956eb1" -> "9e18a5fe40f7fe926b61f5a8aed03af2643bab99"
	"8d24d56ce1da13caff82cfa8950413309e08da13" -> b119a687d411864433aed92017c144d311b53a4c
	"8d335468eca3c8b37d7b939f7d7f17b31c514e8f" -> f0a371a39d8b9945b2e0a414a32aa861614e5352
	"8d335468eca3c8b37d7b939f7d7f17b31c514e8f" -> ffbd3f98f999102cab47fda4c992d7fa07e1d912
	"8d6240d4c68e2d2aa372a116bdab8bcf3ff6d66b" -> c5490ce9d1b625516b17253d1d2d0352730b7b84
	"8d6240d4c68e2d2aa372a116bdab8bcf3ff6d66b" -> de56e1d746cb940b6947186ac389490693308ed0
	"8db127d43f5b0eff254a851f9c966b7b85d91992" -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	"8ddca35c13898d9698973d48fb71ac6b35f54c9b" -> "238c0c095f21f919fd268d8519d6b1b07ffc1540"
	"8ddca35c13898d9698973d48fb71ac6b35f54c9b" -> ac8fe418a61c4ef0e16a7fbab0d768a8ba023e5b
	"8e4710f011dce286d24838fdafd5ce52cfac5285" -> "3859e3965993493defd39cd54a2ab2097957e270"
	"8ea7d41f171fd52d3c920d40fdb390fd969a3270" -> e680c625424e153580e8f2d78ae2ffaa42335221
	"8ee018d863e521f32a9cb92db66c25e848b5e0d0" -> "07242c2a5afb2a633feb110b1aa74e2adcc37575"
	"8f38331e32f8ce20b45be4edef428dcecf6a768a" -> "3adba40858036a5a44f550aaab5287ad135f5f87"
	"8f38331e32f8ce20b45be4edef428dcecf6a768a" -> b0520af5047038f5c257ad8ba5f74e981aaf07e4
	"8f6a2dbe34017e616f8bb35bc668538eb11a8d33" -> "6af23ac66cc5050aa4aa2adb5037196536c824e3"
	"8fd74ceeed3d1ed2e0e1e085f8ba944d9f57e816" -> "4af44766d51c0fc28a140e395604f3d46fb1bf18"
	"8fd74ceeed3d1ed2e0e1e085f8ba944d9f57e816" -> f23179924bf4ee0e888cfbe911d9bd472918bcb4
	"900c79808fbd0ccd17e0aaa37c1f93f60af13aa6" -> "5b34dd08d0ffc967b92abe187cc890d52ade5ac7"
	"900c79808fbd0ccd17e0aaa37c1f93f60af13aa6" -> ebc9625a4c005c126f025455d3404d00e13d7faf
	"900fdeb843063c1fddbddf9fcaffe3cf334f7195" -> "163a3e97ac12f52217ac24922dad5eb814af291b"
	"9100c91cd4c83827b6c3c296e3b2ce89f9e98f52" -> "5ac2c61b550eb801d3acab1aa68f52379f9ad33b"
	"9144b9362b2ed972f5886dcc7beee6a2acce2708" -> "7a52a8c7d855d3ed779059af160248934ac2c6b0"
	"9170c03fd7f970d594cbf8510515f6eb855d25a9" -> bb5d35c1a871cb1d8e4301e7b9b04e3266aec7f6
	"92757728872a98f2ef4fe04c3ea50ce39e7a6fb4" -> "584a16821b6998325b5cc60b970d69cf8faea950"
	"928ef41dd879a1e12373842e865477e9e1167621" -> fc62e033cd93ff6b93e312d89bfb5683a4c6f90c
	"92f8da8de36decbfcc4e30dc069b2c9ea28e3f6a" -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	"9350423982a851695b8f0fab1fd7aa8fafb10654" -> "2c374ea4bb47c84f80f905df3a00b7d724386a28"
	"93a8cfaf3c24f8c1f999b2ca5532ff8f46e0808d" -> bdfc07bfdf3f4f4ef94580c0cb46eef5977bb810
	"93bfad180c86801a6bcf439675654c38f4b0624e" -> "6ffe58157f8cdec5de7add4d7e35065e9a38b870"
	"93dc16483a312b77c0b6533a6c2705d1df3e3687" -> "638060dcb95ed7ef3b2f6e6038ac12744d8ba238"
	"9432ccae14b2e7d6f02ecab0f3d450d325e940e3" -> "7c075d304c5a215465fa1962b95dd8b3ee6520cc"
	"9432ccae14b2e7d6f02ecab0f3d450d325e940e3" -> bd52d9a0583a2d12f584fdf6b47d2c2f51c0d791
	"949bb8f74f6db7405d6ad8bbf02ebc42a947801d" -> a60673e9252b08d4eca90543b3729f4798b9aafd
	"9520f7d9985d8879bddd157309928fc0679c8e92" -> "5f338eae76ea739954517292b8b057d1b6187926"
	"9548e0478edaad0ec1e5dc4b7afc7af51dee43b0" -> "2a21098b98ae2f9581a91e2e474c397e5cbede12"
	"956b486cacff05ebbe580eb9d89a1c508c4fa3a3" -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	"9597182d1d407a71dc51f81a32bc53721a6f9b8d" -> "14ddc393b17e80036485f69495006b18716c1863"
	"9597182d1d407a71dc51f81a32bc53721a6f9b8d" -> "163109072c24eb2fc0333364708908f0917bc519"
	"95c09e4d07492fa9e4ad951a268b4ea6bae69038" -> "44945dfe867e56aab1685a0f371665273291a2af"
	"96a862b6f88b0e3033180f76100016a687cf09a6" -> "414c82300abf8d1f4c8ce7bacc68f3848bdb27f4"
	"96a862b6f88b0e3033180f76100016a687cf09a6" -> d83bc700a7f348931b07f668680dce2675ffff77
	"96e3d2cfa39bc62cedcdd51644828df679c48590" -> "07723ff28a6802dc6e9584e99bf362560f12a43f"
	"96e3d2cfa39bc62cedcdd51644828df679c48590" -> "802a553add113ff0fe93eb3690d88ac97aa91c99"
	"970916368764347c38d36c727b2e6e0086e784e3" -> "31761f391192909f6486ecb532e72dfaee756be6"
	"970fcdf59db2819f0c1c5269d631f2ede634782f" -> "8ccc75c2452b5814d2445d60d54266293ca48674"
	"970fcdf59db2819f0c1c5269d631f2ede634782f" -> "97e76074b304a8b886884172e017eb5cef1e1205"
	"97343c8c2f6e63fd0889b422ab65126448e68619" -> "89cdbffa8619b0f5e87bacf12dfa400259511b1e"
	"97350e18e2fc2e753e34df4ee8c1107457aa0a91" -> "59d92809088f28b06b0cd102dd166ba8b3144fc7"
	"973ca677824b432c480923f150f92fd3bd2d280e" -> "6764f8d562be65cdd822e1394a10aaea5f2f10dc"
	"975fc0471abf12cd3fdf8ce3220d2388aca7f759" -> b838bf1938926a7a900166136d995d86f8a00e24
	"97bfea6377783e1560754ab5a12749d1ff161e55" -> "31f5549c285ec793a67a9d072db38fec087c7e32"
	"97bfea6377783e1560754ab5a12749d1ff161e55" -> b987f159e3e44bdc068614a0c09f5b64df514096
	"97e76074b304a8b886884172e017eb5cef1e1205" -> "6979bf6f8f5e831ef38214edb158c7fb493540f7"
	"97e76074b304a8b886884172e017eb5cef1e1205" -> "9e0d6f9a5e2b0c6ffff4601b87cef921729ef81b"
	"98046591b96a213e05d17569b1645e772df91b90" -> f1299bff26a20b70bb5b8440526a2bd3c6de298a
	"98422943f013b56352dd1a2f8823368b27267e57" -> "599a63409bed67d61c359d316da5a10bcddc954b"
	"98422943f013b56352dd1a2f8823368b27267e57" -> "73e35b172a74cfab8f1db450113f2bf826b40b60"
	"985345405211cc4cf1ecf4cd330cf0dc1f77fd61" -> b5301d5386052381a1ef28b5fb5818b5b52b1aca
	"9865ef24578c750625054e2f382b9c764befe870" -> "07c401d3922920c8edb2a1060806f06d9c4850b4"
	"9865ef24578c750625054e2f382b9c764befe870" -> "7c1d34fe5d1229362f2c3ecf2d493167a1f555a2"
	"98a1a00d53018c7e664644d886466a820aa5e6d7" -> e969bc875963a10890d61ba84eab3a460bd9e535
	"98bdef76667ca45d9d2a1cf50ef20ae266dd60fb" -> "0578f1e66aa381356bfe2f53decf3864d88d23d3"
	"98bdef76667ca45d9d2a1cf50ef20ae266dd60fb" -> bf225248c988bc547241cbe91dd883d4bf06f1e4
	"98d6370d2e4569f69a6496f984225c74caaa73b8" -> "41fd39392bd24555d446260b1a45b986ab14e987"
	"98d6370d2e4569f69a6496f984225c74caaa73b8" -> f00a07596a82911b16550fb1d50858818f9a7459
	"9929a6791703c96e5f613cc3b52f4f9e16baa49c" -> "67a6b1aeb82fd4685e862a3a7807d4ed8ea5d899"
	"996f0c583b36aa5d6c6308285aea1421eb7efae7" -> "6f8ae955bda8ad246cc1f5f7a15f1c3b1c04696a"
	"998c5f0c7554f511bafff587292f986a42fa2944" -> "791677a5ddce9730a1203188938406ae030ed170"
	"998c5f0c7554f511bafff587292f986a42fa2944" -> d549b6c9ff44d3ccb32b9bfe1816d3cfb1d7052a
	"9990b581facb3c9d97aacbdf90eb03ed6f1f4d94" -> "18a7e19846ee186d60dbf7c2c865ac1d1aa531c4"
	"9990b581facb3c9d97aacbdf90eb03ed6f1f4d94" -> e76b53ef23871ff81ab305822eb605baf0cc5bd3
	"9a307cd2d656df87bcab0772285a3602af3e9a42" -> "15c6383f8035fc902bedfef8b79084d2af2492db"
	"9a38f5956e725e5374da658eb28724032a71215c" -> a36e024e989f4d35f35987a60e3af8022cac3420
	"9a38f5956e725e5374da658eb28724032a71215c" -> bd52d9a0583a2d12f584fdf6b47d2c2f51c0d791
	"9a6bfee70ed19e9fbc726930e228a7e17e2a3a76" -> "96e3d2cfa39bc62cedcdd51644828df679c48590"
	"9a84794ad8ad1bc8ec6b2c4e1592a1f63765e753" -> f93ff170b93a1782659637824b25923245ac9dd1
	"9b07c152dfce52663795fe9b4e1ed5626bfda455" -> "37b34c4e99f0fed81b7523d6e674ca976f994afc"
	"9b07c152dfce52663795fe9b4e1ed5626bfda455" -> "6a9ae8101525360b8f79ed20d2f483616bd39c90"
	"9b8f84ebe292b53ceed1cee81e83a9c53b1d8480" -> "6a63995335e7a941d34bdafb93a56f789ebeed75"
	"9b8f84ebe292b53ceed1cee81e83a9c53b1d8480" -> efba7d534cef8489a24f9d55811fbabdf82cfb10
	"9c273688ad0bb9d484da41aac6502afb8b31341c" -> "8a867933946ca8ca306ef9bed35f6a7d5a91e909"
	"9d0e81e2ae3bd7f6d8a655be53c2396d7af3d2b0" -> "78cdeed4c79d165c915e8de0355cc3fb7f5797c5"
	"9d0e81e2ae3bd7f6d8a655be53c2396d7af3d2b0" -> "9fad473faed7862855ced123de81a53fa27187d9"
	"9d16f8958467be0162441820d56eb7697453e120" -> "388218fac77d0405a5083cd4b4ee20f6694609c3"
	"9d20f0b55aaaf584c236a64adfd377fbe357007e" -> "25c618bf37b6285c8beb0e7b6c9fa2aa4dbae5fb"
	"9d20f0b55aaaf584c236a64adfd377fbe357007e" -> "93dc16483a312b77c0b6533a6c2705d1df3e3687"
	"9d8cce051add2eb82cb0be97a58201c1d3fe0c1b" -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	"9d8cce051add2eb82cb0be97a58201c1d3fe0c1b" -> cf7ee481902df64b26ac8b1741eca861a8d2f7cc
	"9d9fac0f34ec47cc6eafeb3e10378ab8f3310346" -> a967966432f25324c79524c0cb18d6e152d0b6af
	"9e0d6f9a5e2b0c6ffff4601b87cef921729ef81b" -> "04292c3796bb92664f6111326215d9c060ef71c8"
	"9e0d6f9a5e2b0c6ffff4601b87cef921729ef81b" -> e3fc411f907fa0fdb78ae63f0b28d2eff8c18265
	"9e18a5fe40f7fe926b61f5a8aed03af2643bab99" -> "0474e4a81581b20d3c2855b42bbc060c6b6568b5"
	"9e471b69619848d48b5887171b7195ee649b879a" -> "4278fbdd486c6c3c84a2612285ce8b12dc898718"
	"9ec6785566993ea05d28010e7a742dc2d8f0daae" -> "540e2bae1174027b2620034ebd4cdcdaaf8417d8"
	"9ec6785566993ea05d28010e7a742dc2d8f0daae" -> b74ff38af58464688b211140b90ec90598d340c6
	"9f04cd7c61d35a9afc81d0625dc914c5221d22ab" -> "0543300b594eb1337ce33415997b47594bf29056"
	"9f280bea9878d7c7f5ee18ee5c316468da5072ed" -> "68c3be61fc58cafe3786625f5a2b5cf8e7186392"
	"9f280bea9878d7c7f5ee18ee5c316468da5072ed" -> "887758c998c31a7f461c808cb3931318f4e5ea3f"
	"9fad473faed7862855ced123de81a53fa27187d9" -> "2bf3c7fab19a59cde3a3dda9398075f0fe8d57c1"
	"9fad473faed7862855ced123de81a53fa27187d9" -> "9a84794ad8ad1bc8ec6b2c4e1592a1f63765e753"
	HEAD -> "local-branch-master"
	a0fc18f0427fa9e4bd04cae60bee346b6ae78663 -> "4e3dd47c9d5f9dcae0a0d6c59c6676213914ac0e"
	a0fc18f0427fa9e4bd04cae60bee346b6ae78663 -> f93ff170b93a1782659637824b25923245ac9dd1
	a16a2ee312b088ae6ac2ab3302ed191d19a71718 -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	a17fd7dd3ada289df8e44e64ff52a5d886dfee95 -> "33319b0976ff9975e7509b6096887370146893f4"
	a17fd7dd3ada289df8e44e64ff52a5d886dfee95 -> "73e055d71ea39c54e78b6e9a28ea0d8e7999a5cb"
	a204f92d1cb08f3a0450551b5e6759284bbab12a -> eb8728d88ab92d866f454a5b981b7bbfe4e2235b
	a24953f3df4546cad670892c652978cce161ec79 -> "8241ae63d821efc7906d13654cb63523dc4f0a3a"
	a265e7f00ac6a30899bcb2b60535824bc4776a7c -> "13b2e7ed634ec3333cbed99312f620b2aedec0d6"
	a295b89dcccaaae03aa7396c91c0e45ed9025b6a -> "3262a53c123844b3b9140f4e35b86f1444555aad"
	a295b89dcccaaae03aa7396c91c0e45ed9025b6a -> "3e6ce570cacd28f40e1ffbabc35f9987ce2c7779"
	a2dcb6999837c762b85735174eb16f941830a2e7 -> "41f1a8435a900b660b7a6bc9da8dce2665e4b70a"
	a2df58fb15aa6319e1f4159d0218814245e48e35 -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	a36a822d7d42f36baf0b3d7a0af5691ce692ce20 -> b821c999ca5cb472160a2ebb33aeeac5efc2fddc
	a36e024e989f4d35f35987a60e3af8022cac3420 -> "970916368764347c38d36c727b2e6e0086e784e3"
	a36e024e989f4d35f35987a60e3af8022cac3420 -> bc86ef104acd8e7c0ee7eb25de981ed5a3255615
	a3b56f5f431d2421b575f329d401361e3196b467 -> "13b67f15c13d2e45215da8950f31ef27645733c3"
	a3f79e9abdbdb27308ac7e3d9e362bcc361cecdc -> e5a0d5d8bbeed7d0cb21533f9727591e110f50b8
	a41e394e21eff277e77d3b14b451271f75caa812 -> "233d48f5de1d6cdba0eb64165212dfbf6fa444d7"
	a41e394e21eff277e77d3b14b451271f75caa812 -> b74ff38af58464688b211140b90ec90598d340c6
	a47b8733b3f7db0c0db8cbfbdfc0aa2c197af6ee -> f8d95a323a088d88b5db1dd1cb2d554ac73caa10
	a4af0b6288e25eb327ae9018cee09def9e43f1cd -> "3f3fd0f34617bc9901d5cfaca9a5b5a12eec8cf4"
	a4af0b6288e25eb327ae9018cee09def9e43f1cd -> "65c10aa8d5000e0ecab34a9652056f0520fe51ed"
	a4dd839e796f325718154db9ca86a5d7dabadf2c -> fc07f73f2459f53f1ea784ea984af9403f4b4439
	a554262210b4a2ee6fa2d594e1f09f5830888c56 -> "6d385fe277a467fea1c24adbc0d7b77472896904"
	a5ae1ce8010b6f3e0f4c7f3b46debc3c84e04787 -> "33319b0976ff9975e7509b6096887370146893f4"
	a5ae1ce8010b6f3e0f4c7f3b46debc3c84e04787 -> "51a22e98a1c37d80c3150930dffd2ffcb128448d"
	a5c4e31af9b8b8fb362472ce3a1ec404df0da032 -> "69f6dea44cf272dc80be6dffd0ac8db5c50585b4"
	a60673e9252b08d4eca90543b3729f4798b9aafd -> d02c37c3e6baf1515e7d1372afa5941b9518ca5b
	a60673e9252b08d4eca90543b3729f4798b9aafd -> e05e111feb8b551706a6e0ca54d5bbd3d8e44a50
	a620046b29d3a9b8a0337c0396441c26ac84ebe9 -> f93ff170b93a1782659637824b25923245ac9dd1
	a70beabaf5ff19c87cae865f4f7d7c50eed5324c -> a90ff409f0490aef6266f17656fa626154af9715
	a70beabaf5ff19c87cae865f4f7d7c50eed5324c -> bcb5e21e0b4b0b03c003c5ec8f26de9a9ff9e85a
	a7eb054c60a11246e86641152a4b8caf0723ef35 -> "0d885f2101631a09ef10c11cdb9dc1227dfa96e6"
	a8179952e13af2902d4806d2e2982bcfeb6339eb -> "13cb20fc4634029762e80d2858e081b0691ff50f"
	a8a42585320b0b7487e82f875a5906d9e3ead589 -> fb8899337a87ff32ae4e9d08803c1a7c4fc0df0a
	a8a5bb1f7813ceb42199ef2bcf9d925da007f047 -> "5ce6e0e2421af8aaa2be5684176a66388561d44e"
	a8a5bb1f7813ceb42199ef2bcf9d925da007f047 -> a620046b29d3a9b8a0337c0396441c26ac84ebe9
	a8dd3821fe4fcf1524537ef97e4f5e2cf68ce949 -> "3339180b28da5138eacb6b64f89c03e21493a73d"
	a8dda1af6ab400d45b7524bc46b64e04d14fc912 -> ca3abe41d71c4789ca00cba0ca2b6c22d67f08a3
	a90ff409f0490aef6266f17656fa626154af9715 -> cf5b8276dcfdad44f02c082a934be5589ff14586
	a967966432f25324c79524c0cb18d6e152d0b6af -> "70afa6fa318db517adb0cc7d4cb66260061bb684"
	a9edfb5dfd882255b7563c5cc341fcbe9a8a3c30 -> "24e11756a0368777d2820ed7a6dd8687b669895b"
	aa0ba82319d0e6a5ccc7a5004dc0a6d3eaabe6b3 -> aea7c185beedb0be3437d9de9f7c894b0da6c547
	aa0ba82319d0e6a5ccc7a5004dc0a6d3eaabe6b3 -> ca39da6997dbc4eb295219d7764fd68ecd80361e
	aa31820d9da83cecfb028c76327d74694e3fc11f -> "1dca492eddf4f45cbeac4c7a0d77553211489593"
	aa31820d9da83cecfb028c76327d74694e3fc11f -> d8093fd6c192d900082eb8d78a385ca1e13effa8
	aa8d1657d8976e6f1a6d66f33343f568cdcec0e0 -> "532e3cf469e505fd9eca90441234d96a6081e159"
	aa9235f01514a80b262b3aaadc12432c1e503bb2 -> "1d3743f005324d61fd3635c9bc3963caef3aad4e"
	aa9235f01514a80b262b3aaadc12432c1e503bb2 -> "2a137451012657aa06d702c5b01c06c15ddae17a"
	aae2b431b003e7c55a1e359062c8547e6521098f -> "757161efcca150a9a96b312d9e780a071e601a03"
	aae91a86fb2a71ff89a71b63ccec3a947b26ca51 -> "388218fac77d0405a5083cd4b4ee20f6694609c3"
	aae91a86fb2a71ff89a71b63ccec3a947b26ca51 -> b4cf68476a983ff063846b43cd46ee9805f2c0bb
	aaf8f79c679ea058c58a1114d380d99e1ff34156 -> f93ff170b93a1782659637824b25923245ac9dd1
	ab09eddf601501290b5c719574fbe6c02314631f -> "1aabec0b484f4f073defb343dfdcdac601a26adc"
	ab09eddf601501290b5c719574fbe6c02314631f -> "9350423982a851695b8f0fab1fd7aa8fafb10654"
	ab142d21e83327d8eb26a482349093f1609556ae -> "2069f4865c39ed7017d66df693937600eaa8fa2b"
	ab142d21e83327d8eb26a482349093f1609556ae -> "832f56f06a5910b2f41a2e0dd8b382b6c709de07"
	ac1fefbba15ae94724da9af846d1c43a07092dd9 -> "65c10aa8d5000e0ecab34a9652056f0520fe51ed"
	ac1fefbba15ae94724da9af846d1c43a07092dd9 -> "6bd1c91b067bc73fdcedcc85aa2367f340cf3a2b"
	ac2f26bf17c32214fcb34a33db7ac7b688be9e02 -> "09cbf1597edde2b0200ecbf469c78689c4dcb12f"
	ac2f26bf17c32214fcb34a33db7ac7b688be9e02 -> "0d6e6f6d2b6f7d3313f21adb477e10fa9578b10b"
	ac75b4c265952e382dbd67018058a853393d4ecd -> baaa9d6d8688ac1787e4be6087173c9e4341b162
	ac8fe418a61c4ef0e16a7fbab0d768a8ba023e5b -> "02b355f54658bbadc7cc82ebabab6bc78d5ff64a"
	ac8fe418a61c4ef0e16a7fbab0d768a8ba023e5b -> "1a18bf3a5b251557a7b10a496f9036f00790086a"
	acc4fb302b8c5eecf127b1cd91e2fa1ff477bf87 -> f93ff170b93a1782659637824b25923245ac9dd1
	ae0b33939d233fa340f1ebb768588dc46a128e4c -> "851ecc4290cbdb57f36f10b77da9c1ae13c10469"
	ae4b89d849ef425bee1157421f2c44071bb9b5c5 -> cb0ae672aeabefca9704477ea8018ac94f523970
	ae4b89d849ef425bee1157421f2c44071bb9b5c5 -> ef18273a2d933b31529ea336161a70ddb8738b34
	ae8f9ce9a0f0a385386661ae2d4595c92a50d21c -> "85cc9f2d1ee4d65cb1edb00d4f56863185a53e0f"
	ae8f9ce9a0f0a385386661ae2d4595c92a50d21c -> bc67b4ab5f8bc268ecd2d9bb7dc1b7bf26884a8e
	aea7c185beedb0be3437d9de9f7c894b0da6c547 -> "7304bd2bc390aa6cf27f7a2527d7806dd3fad53e"
	aeaabab9cff9f0b7be4f652791dd8110cc2fe5d9 -> dc7e61c2226941726f46625696a26f19a1fffc11
	af47976cc044ecfd52105bb45f6a9085b3c8a772 -> "0f3d8e2e46baf16358cd2989580ef708820a35f6"
	af8bf677c150144166454f311642825a0b08e506 -> "4b995465b2ed97cb6df5d48bcb843f7f631627bf"
	af8fc7be10fa486c93acfb177af4dd1fa7757deb -> f93ff170b93a1782659637824b25923245ac9dd1
	afa46543182269e615998c970dd16742d63d692f -> "3ec55e07033dc051c24d8c282abcd52a36cd6c2c"
	afa46543182269e615998c970dd16742d63d692f -> efff4a85a4fce58b2aa850c6fbf4d8828329f51d
	b0520af5047038f5c257ad8ba5f74e981aaf07e4 -> "50707f29dbb2fce94666d9fcd390d64079dbf547"
	b0520af5047038f5c257ad8ba5f74e981aaf07e4 -> b6e37a70b033824f389746e747eae4f8fdbcc5eb
	b07dd9078b8ba5f3b7f5c88f84f7ee9c34fa65e1 -> e2067b49ecaef9b7f51a17ce251f9207f72ef52d
	b08a0c8e23af8c65bb9c83f4247785d23c2f8379 -> "39938f41fd287e29636771dae20db5c4af59e042"
	b08a0c8e23af8c65bb9c83f4247785d23c2f8379 -> cef3d4a89f8d21fae6669822cbb540927020d93b
	b09b10ad2660f6ad8c513f09a7e50ae7d7fffb7b -> "2d0ff147e5f6a46554605d137993ba385698eb4e"
	b09b10ad2660f6ad8c513f09a7e50ae7d7fffb7b -> a17fd7dd3ada289df8e44e64ff52a5d886dfee95
	b0c5685768ec6f326550dce42bbb3b6419ca2408 -> c268e3285d4eafeec048d98672faa43f21857990
	b0c5685768ec6f326550dce42bbb3b6419ca2408 -> fa247cfd4e00fafd7c8d3566ee69b6269d42c977
	b119a687d411864433aed92017c144d311b53a4c -> "6fb8cb3d685382089a2e34ba35a30e898d63ab26"
	b133d3071ae6c648aced1c40e12914cb6b2ccec9 -> "9548e0478edaad0ec1e5dc4b7afc7af51dee43b0"
	b1be3953e5ff5c85853e184d16cb213e8f9c4623 -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	b1dbc87686db1da0d9ee8ece2e6faa78354f2970 -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	b1e4b6f4dc27481e8c07acc2e7629ae206d25f6c -> ffe664366890f252ad14e87c987c57e080182bca
	b20d7d348c4d32777cd577c221de529452baca03 -> "8c53354658462aa6783022def86750ab0b79eb6f"
	b2755c15e2359c5436de062bf33a155a99c72c03 -> "7346e340f147131ca32089f61f7d0f502f80d19d"
	b27710019bdb95530e7c7a2659767cbd15f87f22 -> "5f8f7081f7761acdf83d0a4c6819fe3d724f01d7"
	b27710019bdb95530e7c7a2659767cbd15f87f22 -> d02f3c8a9c26bae5436580124cbd175cff4a56d1
	b28fb93e51a94907eca9cc08eb1a2db51fe1ddc8 -> "3ae35648bfc135e212c787f25caaed92ea7e0084"
	b28fb93e51a94907eca9cc08eb1a2db51fe1ddc8 -> e7fb2ca94556e6aadfc3038afaa1c8cc3525258c
	b3e6e7acbc16ce8a8986ee84b24ad7d97f6017c4 -> "1d4db69ce0785ff83cfa0336749127da4509381d"
	b3e6e7acbc16ce8a8986ee84b24ad7d97f6017c4 -> b67a603f6360051f174a00f8d10dc088dc7093be
	b3f05734c6457855f7db082e94438ef2125e973c -> bc2c65770dca70c1d4e151fad971bc7c7235a702
	b411ed60c7438eda3fd85a308050e88159f275fd -> "88dd321cfedc6ee190dfafe4670a83ea33cdf4a3"
	b4b322c6ff0279a61f4fc570f4d3aa51e92003b2 -> "9c273688ad0bb9d484da41aac6502afb8b31341c"
	b4c06f7c4d6c87091f138877b702489755fd59ef -> "0d4fe3047f98eaab927964d84ec114bfd504ab0f"
	b4c799f1606b7f911d5812832b86fb97fe3777f1 -> "900fdeb843063c1fddbddf9fcaffe3cf334f7195"
	b4cf68476a983ff063846b43cd46ee9805f2c0bb -> "7f9870794f743922aff6caa24e1991d5600b1b8a"
	b4eb8f2fc8057eba78fa54b9f5aa70e43ca04fb6 -> "6defb0235c6e7c46974d7d65de7530e559ddcf0c"
	b4eb8f2fc8057eba78fa54b9f5aa70e43ca04fb6 -> "7e88640cd1801b6fe0288f744da7310b4749c0c8"
	b5301d5386052381a1ef28b5fb5818b5b52b1aca -> d658653369e0a5573425c352c44d94447bbbff8d
	b537af720ec22c0283923afcdbbc1df306907542 -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	b569cbf2c6e024a877e5da14343a2c649f040058 -> "6a0ee54f9a3ebf667e86f7110c36b2240df96166"
	b569cbf2c6e024a877e5da14343a2c649f040058 -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	b5c54fea6a6a4c2cba774466a76c40d0348f7a2b -> "38ca78d9da8179a7f5e1b69ec9f05ecd2000295e"
	b5c54fea6a6a4c2cba774466a76c40d0348f7a2b -> "4cd33545ba4fa82324b454aa5bf2748b40a572fb"
	b6b6757d77288d542bbb20ed40ec5a0aabfedb71 -> d062ccf4c3af1e5153ed5064d4d05b05e0fdd4d5
	b6b6757d77288d542bbb20ed40ec5a0aabfedb71 -> e01db872e420197aa9a61f1130d27ebf0594d9eb
	b6c66824c156363e934b3d989fb123efb1a9c63d -> "10b9e8227ba16077c96bdf1bca1d6d65e9eb7929"
	b6c66824c156363e934b3d989fb123efb1a9c63d -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	b6e37a70b033824f389746e747eae4f8fdbcc5eb -> "31c747e0be7828de7d391fb927d069302b7f3816"
	b748ddb7a470b952b8a5596649f7433278d7f2c4 -> e7ac344d7018d4537eda29d5a09c047a35f27364
	b74ff38af58464688b211140b90ec90598d340c6 -> ee0e3bbc8dbd6efff2cbab71c3678ba5d412cbe6
	b7a42309b25632b0c63e8f189fd6f4d85dea293e -> "149585079facfbdb5713bb8852caea2068cd4f28"
	b7a42309b25632b0c63e8f189fd6f4d85dea293e -> "41875498b7944e2c73e7a8ed9b6a91c9d7001b12"
	b81f8c8dd3ec81a8d622e2d3d6b2af426ca53f05 -> "60c208db584c5a1558acaef9c2ba2fdf15999bc9"
	b821c999ca5cb472160a2ebb33aeeac5efc2fddc -> "0148fd836a9b1954833471f61b4d2e058797af55"
	b838bf1938926a7a900166136d995d86f8a00e24 -> "4a6cc6a20eeb593f1ad0f60475a9867532d7c5d5"
	b838bf1938926a7a900166136d995d86f8a00e24 -> a554262210b4a2ee6fa2d594e1f09f5830888c56
	b83a2f9006cdf5293370b1254f4f4cb2770c1b9f -> "8705c9bd139028aae148251420da27c9bf1c4745"
	b83a2f9006cdf5293370b1254f4f4cb2770c1b9f -> f49905d47d42cf6ea4c34b5a8301e84149e7aeba
	b88540045c3d70dbf4138c8f32209fea32e40d90 -> "2a8bd34c5576e02fed38d85dc5c90ffb9d4ecfb3"
	b8902a53d16bf955bcebb9601b7f5c32f7027fae -> "21e1b4486586d3a15d2d7bf0479e77636359b816"
	b8902a53d16bf955bcebb9601b7f5c32f7027fae -> "8b4d916cbf5f85685bcaa75648f6034b008a017a"
	b987f159e3e44bdc068614a0c09f5b64df514096 -> "40fdd46b7f90b40f58a2b9f4bba5735c29dc82a8"
	b987f159e3e44bdc068614a0c09f5b64df514096 -> "8ddca35c13898d9698973d48fb71ac6b35f54c9b"
	b9a6830836efd2090eab32c18027b089e8b42db9 -> "3902b083e7bfe3824fc070ea2081c74f19236509"
	b9a6830836efd2090eab32c18027b089e8b42db9 -> "866ea877036ce581e0d3c130f527631cd8b36bdf"
	b9a9df93a3f5580c7f7b8cc099aad1c204ced8a4 -> "8d24d56ce1da13caff82cfa8950413309e08da13"
	b9d6f64393275b505937a8621a6cc4875adde8e0 -> "9170c03fd7f970d594cbf8510515f6eb855d25a9"
	ba5df28904d1d3c6a60c03fd8a79dc1d632904ef -> "69666e6746e4e87535ebf89c463980a9c655bae7"
	ba5df28904d1d3c6a60c03fd8a79dc1d632904ef -> "737049d33235a7e1b5395cfdde28e09eb0c8b565"
	baaa9d6d8688ac1787e4be6087173c9e4341b162 -> "5eb02dd8f08fc3b7ff22320c3311cd1da6a5ab4d"
	bac67e13700714f949ce3dcebd50396bc1c625e6 -> "1b4e9a5f8b5f048972c21fe8acafe0404096f694"
	bac67e13700714f949ce3dcebd50396bc1c625e6 -> ae6336b6173bf5303fad53e0a52a16f92c47b6b7
	bad79103998cd329584e844a315e85c3e1ac3839 -> cb0ae672aeabefca9704477ea8018ac94f523970
	bb5d35c1a871cb1d8e4301e7b9b04e3266aec7f6 -> a2dcb6999837c762b85735174eb16f941830a2e7
	bb5f4b8547d367ae6876d9df03298f25579b9b80 -> "8705c9bd139028aae148251420da27c9bf1c4745"
	bb5f4b8547d367ae6876d9df03298f25579b9b80 -> c7c317a06fc6b667a0f3458473faf2a2fb45fde8
	bba59f58a4eeda6fafaa3d41e14f3d00a179923f -> "7f17900b5ba2569d9d07352be51ce90a249a0b46"
	bba9dd6a96c464e2b32226be81cb1f30257c78c0 -> d062ccf4c3af1e5153ed5064d4d05b05e0fdd4d5
	bbca240cbffbffce1a3b28470f4d42d911b3852f -> "5a526e5e18ddb9a7dfc5a2967d21d6154df64a4f"
	bbca240cbffbffce1a3b28470f4d42d911b3852f -> "975fc0471abf12cd3fdf8ce3220d2388aca7f759"
	bbd6174b2501a3523d778dbd479e85119c86840f -> e8015223c74938548dfd8d6099b1ea5eb6ab9231
	bbda434d749918587a6d97ccdc237ed577d51268 -> "708d69bd9454e83486c3889e282559ba03f80ed0"
	bc024b7a45c902c3915fa7ee78b25b0c0cf2284b -> "0b4f8afef6b744d5aa92883c5a6c1985be67cc7c"
	bc024b7a45c902c3915fa7ee78b25b0c0cf2284b -> "1d584ee42d368be2b9599562ee3d1d4c8cac4018"
	bc0f5939a58fda328bdba70eb64a19c969b9f8d8 -> "12ad6b8feaf9dbbe8f040ce8620700cae793708b"
	bc204b742735ae06f65bb20291c95985c9633b7f -> "1f124f30244654fdf3e87efe1b70948fbfeab4b0"
	bc26f7690a318fd0a875bfd8d56c70e1ccb79ccb -> "7f420a6bda9704684ccc924070e8404dac55ffdf"
	bc2c65770dca70c1d4e151fad971bc7c7235a702 -> e1d34f36ead7daf68fac21902bceaa30db7f4444
	bc86ef104acd8e7c0ee7eb25de981ed5a3255615 -> "62c58891e177bb3860ab19d2dc2e23909759c6ed"
	bc86ef104acd8e7c0ee7eb25de981ed5a3255615 -> "92f8da8de36decbfcc4e30dc069b2c9ea28e3f6a"
	bc9342771b7438ddf785960cd418ab8c6a7aebef -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	bcb5e21e0b4b0b03c003c5ec8f26de9a9ff9e85a -> "76baf97fa13c4109c335180b121140c8ba1bf97b"
	bcb5e21e0b4b0b03c003c5ec8f26de9a9ff9e85a -> afa46543182269e615998c970dd16742d63d692f
	bcf7edee09e8f9c1779fafa953832f63e9a23545 -> "8922506cb2c34527f8b2321b4f7a4b454a325a07"
	bd262d07b65af894b1014cd8cc2d02aaee65800b -> "72f1ddfbc95b47c6011bb423e6947418d1d72709"
	bd52d9a0583a2d12f584fdf6b47d2c2f51c0d791 -> f93ff170b93a1782659637824b25923245ac9dd1
	bdd1988eb335830fc8602f589e04d56348596abd -> "77b2d29e91c568dc3b08adbfc48fea641d4e39f7"
	bdd1988eb335830fc8602f589e04d56348596abd -> ecba2c181c556c1e44c5e3ff58af912c85ec33b2
	bdfc07bfdf3f4f4ef94580c0cb46eef5977bb810 -> "70a16ff8a162ad0b6a39d17a1699a2949e2a2674"
	be0905fed1cdc9a2269f19569c518f00d54d2dbe -> "230d022fe3ba67465e867ac1fa4da3bcf0d31630"
	be2ea674ccb2492de9cb9a5d55b88396001eda2d -> "757161efcca150a9a96b312d9e780a071e601a03"
	bef28948e261285f7f15ecba9b6395489f88683e -> "44732094fb8d221b28438b928866e03148476a74"
	bf1f004a4abf2e01ffff8257b3d85971346078f1 -> "4e746b1a31f9f0036032b6f94279cf16fb363203"
	bf1f004a4abf2e01ffff8257b3d85971346078f1 -> "60017ef61a148b814867f3ca8f89f15a80916aaa"
	bf225248c988bc547241cbe91dd883d4bf06f1e4 -> acc4fb302b8c5eecf127b1cd91e2fa1ff477bf87
	bf225248c988bc547241cbe91dd883d4bf06f1e4 -> e2b37c2c7745b98d13ef129ce09f19e2b0ea2c7d
	bf4a16b84a437336abfe633dbeeb29748c80c14d -> b4c799f1606b7f911d5812832b86fb97fe3777f1
	bf5f394be8f5b245b73758b02b3dc81e036a3245 -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	bf5f394be8f5b245b73758b02b3dc81e036a3245 -> e490587933d87764fc4e7888e06a826c4aedcdfb
	bfe548d87ed7786f06c2d9519f69c38ed47176e6 -> b08a0c8e23af8c65bb9c83f4247785d23c2f8379
	bfe548d87ed7786f06c2d9519f69c38ed47176e6 -> df2faf1a65fc821384e618b3c291a184fbed039e
	bff455576750bd013a3c87b15cc7086cb8c1eab0 -> "6840fe9ee29ab51ffd7d924c624dc62da22c50bf"
	c0086e901505c59d6f9714f961c0d48cd86ef36b -> da898a5c645ce9b6d72c2d39abe1bc3d48cb0fdb
	c0086e901505c59d6f9714f961c0d48cd86ef36b -> e70c392ca208d04b3b8c750e233ff4c0c007b51d
	c032b1d8bc29de4fb1322d841d8216ca961dcb53 -> "780f7fdaa36b70d08fb26191904c3103207cc40d"
	c032b1d8bc29de4fb1322d841d8216ca961dcb53 -> "8776470cf379f31d483d8512d28a0eaa47d2e3f2"
	c09c29b43046373a0ace268c6de6266b5817dbc3 -> "3936e95a7f056877425c6faa6994d9f3712a6fb0"
	c143dfa7ed4115d1fd7d23150a0314768377f108 -> aae2b431b003e7c55a1e359062c8547e6521098f
	c1acf1a31761d0cfddc3ea6d39c92a6528cd9c5c -> "0ad3d656521aa16a6496aa855bbde97160a2b2bc"
	c1cf918d3adbe832fdaf278a23151502be255bb2 -> e1c9548eae406a7aa7274685f8bdbc353827bf16
	c1d6628c9433c09ff62f916f2b933ee12995e9d8 -> e9e924e581c8b6d07ab6429eba4684e35c108666
	c24783e99dcae41be907bb765432e6c0e10288b4 -> "599a63409bed67d61c359d316da5a10bcddc954b"
	c24783e99dcae41be907bb765432e6c0e10288b4 -> "900c79808fbd0ccd17e0aaa37c1f93f60af13aa6"
	c2b83ec2e7b6a02d6c8f4756b4aa5e47010deac7 -> "1773f2a2ff8b122452da2c1a080abadd92d3d4a6"
	c2b83ec2e7b6a02d6c8f4756b4aa5e47010deac7 -> "3306edb3805aac7baf77c4916b5495ff278353e5"
	c2d96bc42cfc358178078d8c2c65d550671d3ed0 -> e2067b49ecaef9b7f51a17ce251f9207f72ef52d
	c2f2af1d09f6c7f50a40ed51e6d9f834b73f5533 -> "6f4f191fd104d28584edf39c3394f11b8b8c72e3"
	c364310f83e726ab108cbaa7e5c1f508320e229e -> bc204b742735ae06f65bb20291c95985c9633b7f
	c3fffcfe8e6c3bfbe358366c973a6109fb95d4e6 -> "09e74b06ea68d4cac8f08b51bf4db2daf1987ae2"
	c3fffcfe8e6c3bfbe358366c973a6109fb95d4e6 -> "93dc16483a312b77c0b6533a6c2705d1df3e3687"
	c402e09d08eb8f4fd70279979f5a20753df8948d -> "89be7d2774f81f3d8663999975a6ab64d46bf42e"
	c402e09d08eb8f4fd70279979f5a20753df8948d -> "8a9f3a5cdca8beda7b0ba5c019d652683327a923"
	c43136d67b7c6a9ecfa988004eb4a87bfbe957a0 -> "6979bf6f8f5e831ef38214edb158c7fb493540f7"
	c43136d67b7c6a9ecfa988004eb4a87bfbe957a0 -> caf17423d375e97919ace904cd527b4d26cc3e43
	c4ad516cd7fc4e722ab73f2fbbd245aaf181b2c9 -> "782243c5383dd40d26d75dc97d7fc39900fb60a7"
	c4ad516cd7fc4e722ab73f2fbbd245aaf181b2c9 -> f1cc562b77053ced18eebaae2febe5ff6d5e2690
	c4cfc42d605a2b75c802dafdff4ee0014344f5d0 -> "9597182d1d407a71dc51f81a32bc53721a6f9b8d"
	c4cfc42d605a2b75c802dafdff4ee0014344f5d0 -> bc204b742735ae06f65bb20291c95985c9633b7f
	c50fbb2dd225e7e82abba4380423ae105089f4d7 -> d40da0bd4b3c9c591fe36d4772d44209fbd70504
	c51a0b47c91106ff50a2a9dca302e80bc7049aba -> "3c0f4abaf5b3e47d9426bb2bffb06d5ee47b1c95"
	c51a0b47c91106ff50a2a9dca302e80bc7049aba -> af8fc7be10fa486c93acfb177af4dd1fa7757deb
	c5216a1bc68745ee81ba869adc6052ed892ebac1 -> "2fd367cf63cd5f94368340cc6fe1cd0a3fb021df"
	c5216a1bc68745ee81ba869adc6052ed892ebac1 -> d205f06ae07928b0c8b74930d76927a7e9b04781
	c5490ce9d1b625516b17253d1d2d0352730b7b84 -> "7ee4fd18ace71d187ee3ea5ba745a6a3493e0e0a"
	c5823641a6769a727d890a55160346d92808bc0c -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	c5895dc4401fa7f204025d460ea2419f0bf62a77 -> dc9f4f4abb6960a53f00ec67a669becef283d851
	c6d896bcfde1cfb626c8bc25c71d00662ef7f22c -> bc204b742735ae06f65bb20291c95985c9633b7f
	c7acdd02db4782c56c49d6e87c4037c4073fcf92 -> bef28948e261285f7f15ecba9b6395489f88683e
	c7acdd02db4782c56c49d6e87c4037c4073fcf92 -> f21a56e69073f7eed50985d1b62712075a5c8bea
	c7c317a06fc6b667a0f3458473faf2a2fb45fde8 -> "2196ecadc4142e7f7f07ea9176571bbd7c6076f1"
	c7c317a06fc6b667a0f3458473faf2a2fb45fde8 -> "7304bd2bc390aa6cf27f7a2527d7806dd3fad53e"
	c84209a8fda86dd1c7647f52bf0fd6eb8aaaaad2 -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	c869f76c1da498c41f2eeb3e553b9d46495ea300 -> "169ee10209f7a46e2aebf802c5f4c3f5bff4443d"
	c8a8e04099a99d6eafbe6e9bb1db3b50996836f8 -> "7c67d2a07055150b76e81efa8850221d52705305"
	c92e7e156e6b406e7555fb5df058d18758a0b3f0 -> "515579756c8d23ea2f3c6386a9333ecbe84d8a08"
	ca1e4435de9266b87cadd5e2d6851dfaab2c8f5a -> "38ca78d9da8179a7f5e1b69ec9f05ecd2000295e"
	ca1e4435de9266b87cadd5e2d6851dfaab2c8f5a -> "70ef27a53fad21da39345973258be23bc3d80dcb"
	ca39da6997dbc4eb295219d7764fd68ecd80361e -> "63a597dd94079887a1b5ad72f64a8b0ee822dc27"
	ca39da6997dbc4eb295219d7764fd68ecd80361e -> "85e342adbdea3adbd70d607c0748c8a036d26c34"
	ca3abe41d71c4789ca00cba0ca2b6c22d67f08a3 -> "30f7414ca17bc675105d3d731a827778d7367b11"
	ca7158076f9f6e0ee1c84595aaf44194a9880a72 -> bc2c65770dca70c1d4e151fad971bc7c7235a702
	ca9d60f2460c296b32b3da97eb953bbc4d292197 -> d601aee6056a0afc6df7f77e15cdc155ff402dee
	cade724b527d753def6b2cd169df62ef03bdbfe2 -> "306ab352f4e98f6809ce52fc4e5d63fb947d0635"
	cade724b527d753def6b2cd169df62ef03bdbfe2 -> "599a63409bed67d61c359d316da5a10bcddc954b"
	caf17423d375e97919ace904cd527b4d26cc3e43 -> "04292c3796bb92664f6111326215d9c060ef71c8"
	caf17423d375e97919ace904cd527b4d26cc3e43 -> "58b5801aa94ad5031978f8e42c1be1230b3d352f"
	cb0ae672aeabefca9704477ea8018ac94f523970 -> "9f280bea9878d7c7f5ee18ee5c316468da5072ed"
	cb3e368b6913a2446f245e7ae7a7e4ae4a2e6794 -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	cb441e1ec3f3cf475d9037a4ce74e8fccd6be7d8 -> "0b4f8afef6b744d5aa92883c5a6c1985be67cc7c"
	cb441e1ec3f3cf475d9037a4ce74e8fccd6be7d8 -> "57ebdd5af4031ddd0e012e68c5e423fd0671ed8c"
	cbcc2f79117ded0161b012dc5107f181b5d87b09 -> cfa1f2ae96f4c6bcc0d3acdbd9a2734a8f33a351
	cce5ed7397fb35440002d8bfbdc11f0999ddd8ba -> "3010ffb1eaaede91bd20a3e8adfd76b1531f95c4"
	cce5ed7397fb35440002d8bfbdc11f0999ddd8ba -> "45c0897204cfb5d0d88370a4907e41b0eb717b6c"
	cd96b0ac826c35f0ec819a7e522a0ae27b38e18f -> "866ea877036ce581e0d3c130f527631cd8b36bdf"
	cd96b0ac826c35f0ec819a7e522a0ae27b38e18f -> "9ec6785566993ea05d28010e7a742dc2d8f0daae"
	cdf458c60eaaced338990f2aad96341a05836236 -> "6dff5de1da7157de20310b10e5a0c09953dbb4bb"
	cdf458c60eaaced338990f2aad96341a05836236 -> e2334d2f358216728d2241ee9a4bf5ec6133769a
	cdfd081df6fa42e6cd0da1d978d41b836c1f292b -> "0c124cba5435c59591da7c91e16bbd901a518bd4"
	ce9432889c4720345e4e1985db1b18db6add64ce -> "6128301075c90ac1d25badcc29771d1547fdf80f"
	ce961135ccf5bc008b8160404cc7c995789b942e -> "928ef41dd879a1e12373842e865477e9e1167621"
	cef3d4a89f8d21fae6669822cbb540927020d93b -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	cf15095ec52f1e997ec9eef42bdf275d2a68fe66 -> "5bd10b2adcf3a080169574dd08c5529de81eecb1"
	cf5b8276dcfdad44f02c082a934be5589ff14586 -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	cf7ee481902df64b26ac8b1741eca861a8d2f7cc -> "15ff206863a77e3396f5a1e1ed4910b7b70c9f8d"
	cf8ba1cde5a673dd7f2354ddd2148f31e4c4e033 -> "42c0ae87b126c6787791d005ec559bf3f6bc5de7"
	cf8ba1cde5a673dd7f2354ddd2148f31e4c4e033 -> ce9886320447440ab5dc8011072ecf331fd77c6a
	cfa1f2ae96f4c6bcc0d3acdbd9a2734a8f33a351 -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	cfae50e40eb72d6116ad56c616b3322474df4a75 -> c1acf1a31761d0cfddc3ea6d39c92a6528cd9c5c
	cfea2f2da8d418edd7984e5b5073825834099a27 -> fdf3820b7ef69dcf887bd86565e2442f89edc7c0
	d02c37c3e6baf1515e7d1372afa5941b9518ca5b -> "1e781209284eb5952e153339f45bf0c1555e78bb"
	d02f3c8a9c26bae5436580124cbd175cff4a56d1 -> "43464adc45b4c749ca1136f2e500b0c0cb201603"
	d02f3c8a9c26bae5436580124cbd175cff4a56d1 -> "77b2d29e91c568dc3b08adbfc48fea641d4e39f7"
	d062ccf4c3af1e5153ed5064d4d05b05e0fdd4d5 -> d893741e025a3408c7616a35db91b819327c078f
	d08b30fd7886b87dcf8fcd58d3ab1b1eb135af9c -> bc024b7a45c902c3915fa7ee78b25b0c0cf2284b
	d08b30fd7886b87dcf8fcd58d3ab1b1eb135af9c -> ca7158076f9f6e0ee1c84595aaf44194a9880a72
	d11d003ba5e98c036fb94204df6dcef28aafe2f8 -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	d138188f984f79202e08697c5ada0c394d3ad697 -> "219877e46581872adb47141cf85371f174f484ac"
	d13b5baf06b301c3b4297930003759edc1f2edc9 -> "59d26bd9619c1bb37b1ccb4a93a71221bec46e12"
	d13b5baf06b301c3b4297930003759edc1f2edc9 -> c4ad516cd7fc4e722ab73f2fbbd245aaf181b2c9
	d1e8f30d0d36c6c806dffb4747c282590e69edd0 -> "6311e1aa59fd9d7949ef622bc27aa8399ae1f76a"
	d205f06ae07928b0c8b74930d76927a7e9b04781 -> "3519492430ba26cadcdb215730a6c8e1bcf5b9cf"
	d205f06ae07928b0c8b74930d76927a7e9b04781 -> "8d6240d4c68e2d2aa372a116bdab8bcf3ff6d66b"
	d2521b5b2190845117d8aa901d598f5f96d12f26 -> "58f577ccc8ff870063da604b7c4e69b11425f8a0"
	d2c0b6a86cb0f1a73d9ad5fcffda45497cd7ad42 -> "12068bd4de03c7769f50cd8321f792477692d0ea"
	d3603152ad074a50ed6022133a71b91a16cc7baf -> e4c4bf6b44f8f420d2c51d7b91b10ed4b15f7447
	d3603152ad074a50ed6022133a71b91a16cc7baf -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	d3f24d3204fbb2f1912b6f835462db82fff33c18 -> b4b322c6ff0279a61f4fc570f4d3aa51e92003b2
	d40da0bd4b3c9c591fe36d4772d44209fbd70504 -> "7d90a272ac4f9a2755d7b4f5807d670e0212e70f"
	d460267613da14eba959eb225e2cbf6a1e132eb1 -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	d4cd75f6bd592e733c3e5b1607aaed991e93902f -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	d4e8288c9b136a078a53c228b9fbad96f5850eea -> "5ffbd7fcf84b313bb07e91246eb9419ebd94a7e7"
	d4e8288c9b136a078a53c228b9fbad96f5850eea -> "62898b8f5e86b67dbc8f9092ae9ee0819823a0be"
	d533c1069724d39153f5ae78f2c3a3f2b6a5a6e2 -> be2ea674ccb2492de9cb9a5d55b88396001eda2d
	d549b6c9ff44d3ccb32b9bfe1816d3cfb1d7052a -> "7b24a170d2c36c83c3669d194af46a09ccdeec43"
	d601aee6056a0afc6df7f77e15cdc155ff402dee -> "306ab352f4e98f6809ce52fc4e5d63fb947d0635"
	d6348c9f60fe5507e03be9a59896af2607e522a7 -> "30ceb7b040fb0d98a6c17a39c106f6eb9a112b24"
	d6348c9f60fe5507e03be9a59896af2607e522a7 -> "85127bcdeab5ab34f9c738da3fcc88d637f39089"
	d658653369e0a5573425c352c44d94447bbbff8d -> fae4c40e90f10851a15b8fd4a77e90e3977968ed
	d6787d975147a74f1560fffc09dcb2a1f92460bb -> "31eb6d7cf09c3fa668c1839d8c5759ab7cdf280c"
	d67b50d35cdbdf01c455d6c630128780fbe81b33 -> "337855629f59a3f435dabef900e22202ce8e00e1"
	d67b50d35cdbdf01c455d6c630128780fbe81b33 -> "74a3c43834882219aa12aa1815d441a1762ba558"
	d6a7cace21e689dbbc6a4135d21a1ff6bdc04ce7 -> ca7158076f9f6e0ee1c84595aaf44194a9880a72
	d6a7cace21e689dbbc6a4135d21a1ff6bdc04ce7 -> cb441e1ec3f3cf475d9037a4ce74e8fccd6be7d8
	d6b67cefb5c27d1479d41a8fae1a03b8aece82f6 -> ee00ef41f269bda33370acbacb41f5ca9a200a9b
	d6d4e05ad1951a7d1fe988bfbab23e1f3c8997d5 -> bb60c5213134cda73c31940ec0fb33c361a064eb
	d6d4e05ad1951a7d1fe988bfbab23e1f3c8997d5 -> c402e09d08eb8f4fd70279979f5a20753df8948d
	d76eb0dcccb19d2f85924a4be177ae76126bf5d3 -> e7f8bf125c078004232e254e71b97226c4fed81b
	d795c65b3a29dca33991c441a9951fb9dd14eead -> "97350e18e2fc2e753e34df4ee8c1107457aa0a91"
	d7fcbe2c56468ac780c689b02c6a9e056ce39c12 -> cfae50e40eb72d6116ad56c616b3322474df4a75
	d8093fd6c192d900082eb8d78a385ca1e13effa8 -> "4771501c0a125dd3560391cbd716c63a281e8244"
	d8093fd6c192d900082eb8d78a385ca1e13effa8 -> "7e3cb2e515ea2e2bc11d80bdb9a20f0daebc19a2"
	d838d821c9687a789673b2ac9dff707fdc599e1e -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	d83bc700a7f348931b07f668680dce2675ffff77 -> b4cf68476a983ff063846b43cd46ee9805f2c0bb
	d83bc700a7f348931b07f668680dce2675ffff77 -> c4cfc42d605a2b75c802dafdff4ee0014344f5d0
	d874d378379f4a2e7fa0a8ab52ff6e407f4da343 -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	d893741e025a3408c7616a35db91b819327c078f -> "7a8d9efc26f194eb20114d1f639ec9fa48d70bff"
	d893741e025a3408c7616a35db91b819327c078f -> "98422943f013b56352dd1a2f8823368b27267e57"
	d8af27d309c3637d05bd6b4957b3667c04dc861e -> "7a3136e5c713c4a5ed2af51ccb8abb5cfa3d98bf"
	d8baf083c5a1a3e8dd27fe73e6000c5f6dddf1ca -> a5c4e31af9b8b8fb362472ce3a1ec404df0da032
	d9213e4716ec8d0ac543d32a52a39c79818cb8ca -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	d963ac98ec94fd2003722a794f0168a70ea1b815 -> cbcc2f79117ded0161b012dc5107f181b5d87b09
	d9c5cfb18f4dff87db7d28846bd754c009f6043d -> "72fe8bfac832a1f1b9b7cdc4efa793c48e13933e"
	d9dce89192504c63787b98961ee514937af88e61 -> d9c5cfb18f4dff87db7d28846bd754c009f6043d
	da898a5c645ce9b6d72c2d39abe1bc3d48cb0fdb -> b09b10ad2660f6ad8c513f09a7e50ae7d7fffb7b
	db58d5a351031ec51817c1a6566ec5672ba17138 -> "43a839197795a7f0582efd66bc249dac89f86b68"
	db91954e18654eeebc54c900f44c704002e1866d -> aa0ba82319d0e6a5ccc7a5004dc0a6d3eaabe6b3
	dc657d56254d335016c02fb14bb257e37b8cde89 -> "458f8b0eab9af7b770a25e9277f70bb4df3c8d90"
	dc7e61c2226941726f46625696a26f19a1fffc11 -> "973ca677824b432c480923f150f92fd3bd2d280e"
	dc9f4f4abb6960a53f00ec67a669becef283d851 -> "7b9397e6b1db991107f91c762642d064adc990e3"
	dccd9c5cf2314b4150d7aaf21ad0a45d8c77acc1 -> "3b0d05c4a79d0e441283680a864529b02dca5f08"
	dccd9c5cf2314b4150d7aaf21ad0a45d8c77acc1 -> "69666e6746e4e87535ebf89c463980a9c655bae7"
	dd19c245e9baf5d5c7bf7f6b54330a0689278283 -> "1b0fc3be4253a69878b6ea6687cb867091bf59ae"
	dd19c245e9baf5d5c7bf7f6b54330a0689278283 -> dd1eb665efaaabe4984f51248817d676e6765386
	dd1eb665efaaabe4984f51248817d676e6765386 -> bc204b742735ae06f65bb20291c95985c9633b7f
	dd69a12e6a6a4c55b7827238d7267fc2e75684d1 -> "2329b6b461d8290f4706658ff080a888b74e9aef"
	dd98f54f30606a2afc05892bbd0185648311963e -> "1f010d6bdf756129db13d1367c888aa4153f6d87"
	de56e1d746cb940b6947186ac389490693308ed0 -> "2a137451012657aa06d702c5b01c06c15ddae17a"
	de56e1d746cb940b6947186ac389490693308ed0 -> f046ab2dd4c59aed786da0067f1af68ea1b003eb
	df2faf1a65fc821384e618b3c291a184fbed039e -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	df2faf1a65fc821384e618b3c291a184fbed039e -> b59358100c203b104e53523e1a4e3c2ad426334c
	dfc88bd6477bc6c1d2a9eb29a859ebf11a0a351d -> ebb35369f1aea0e829a2e13531316a34d8f2e354
	e01db872e420197aa9a61f1130d27ebf0594d9eb -> "41c78cf69092b6975ed9512a7c42575c7a2dfcc8"
	e01db872e420197aa9a61f1130d27ebf0594d9eb -> "6a0ee54f9a3ebf667e86f7110c36b2240df96166"
	e05e111feb8b551706a6e0ca54d5bbd3d8e44a50 -> "14650065b76b28d3cfa9453356ac5669b19e706e"
	e05e111feb8b551706a6e0ca54d5bbd3d8e44a50 -> "45c0897204cfb5d0d88370a4907e41b0eb717b6c"
	e075d609ae7c11cefa915a4670c8743e06b5c828 -> "08032fa30fefa3101bec4b774e79f4d091b516a6"
	e075d609ae7c11cefa915a4670c8743e06b5c828 -> ac1fefbba15ae94724da9af846d1c43a07092dd9
	e083ea31547c4f126b39ba1c140cee7c4122ffa7 -> "0ad3d656521aa16a6496aa855bbde97160a2b2bc"
	e083ea31547c4f126b39ba1c140cee7c4122ffa7 -> c24783e99dcae41be907bb765432e6c0e10288b4
	e0ea342c0ead6eb558dfe93bd555cce754fbd489 -> d1e8f30d0d36c6c806dffb4747c282590e69edd0
	e0f807bdad096ef6a4d9f29de333d65d8282aeb1 -> "38b066ee7685d0074d3430284f975addda934c17"
	e13861b9f18e0a3644d159aba6621b29e0505143 -> "2b1e0f8cd5058c7e0b85760e54706b9e74cb4766"
	e13861b9f18e0a3644d159aba6621b29e0505143 -> b5c54fea6a6a4c2cba774466a76c40d0348f7a2b
	e1c9548eae406a7aa7274685f8bdbc353827bf16 -> e6ba4c07b85a0a8fee84b6ac7ab414d47a5351f2
	e1d34f36ead7daf68fac21902bceaa30db7f4444 -> "306ab352f4e98f6809ce52fc4e5d63fb947d0635"
	e1d34f36ead7daf68fac21902bceaa30db7f4444 -> cef3d4a89f8d21fae6669822cbb540927020d93b
	e2067b49ecaef9b7f51a17ce251f9207f72ef52d -> "2d7a874493df07d76d7f1294e72b807ff936cd55"
	e21bf2c4314840dba4f45c6e7bbc96a6fc0a8f61 -> a0fc18f0427fa9e4bd04cae60bee346b6ae78663
	e22cc108b684920a6e46f924893279c821135d13 -> "7c2f2919434b0b9d8df79f469903d0bca815557b"
	e22cc108b684920a6e46f924893279c821135d13 -> "88955fe5b4b1dc7505854d9ee138915a27e8210d"
	e2334d2f358216728d2241ee9a4bf5ec6133769a -> "3334de6494363af27393f468c2e7f32f02654f47"
	e2334d2f358216728d2241ee9a4bf5ec6133769a -> c268e3285d4eafeec048d98672faa43f21857990
	e24570b0a3d987e2dfeddb8c3a7cfb9a7a7cf726 -> bb60c5213134cda73c31940ec0fb33c361a064eb
	e24570b0a3d987e2dfeddb8c3a7cfb9a7a7cf726 -> bbca240cbffbffce1a3b28470f4d42d911b3852f
	e2b37c2c7745b98d13ef129ce09f19e2b0ea2c7d -> a206058fdaab6274ae7b9bdca274011efba74e11
	e2b37c2c7745b98d13ef129ce09f19e2b0ea2c7d -> b4eb8f2fc8057eba78fa54b9f5aa70e43ca04fb6
	e2f6f7658559246ea03015fc7b999af2cd20c122 -> "8244d01de6402606c9fb588ce2143aa629aa7d0e"
	e31db89558b7f1d622e5a64cf37779b721099814 -> cb3e368b6913a2446f245e7ae7a7e4ae4a2e6794
	e39e332e5043d7e8f48fbfc91c3bd6d45a52cb7b -> "6bc06e8f20a8cd67d6e49d31472d5bc8c048cae0"
	e3fc411f907fa0fdb78ae63f0b28d2eff8c18265 -> b27710019bdb95530e7c7a2659767cbd15f87f22
	e40622a60b7473b7a5feac4a9330239863e1352d -> b569cbf2c6e024a877e5da14343a2c649f040058
	e42a29c4b39962e03c43b7ee6e32fd81ce8315a3 -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	e4542d8b35788c355164794457d46667378e9354 -> e21bf2c4314840dba4f45c6e7bbc96a6fc0a8f61
	e490587933d87764fc4e7888e06a826c4aedcdfb -> "4d2f9d7f18c5060a49537fa0f263be1b7fa775b8"
	e490587933d87764fc4e7888e06a826c4aedcdfb -> "9a84794ad8ad1bc8ec6b2c4e1592a1f63765e753"
	e4981ed1e72d3f25da901b9415d2c4805bed0dbc -> "2cca185e85171c462166839cfd6ee57c09573160"
	e4c0a1499cace0c375b90d2d2d7b9baf1af12b76 -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	e4c4bf6b44f8f420d2c51d7b91b10ed4b15f7447 -> "64f3ff3ffcfed10b8b5bf42cda3fc19776fb29f2"
	e4c4bf6b44f8f420d2c51d7b91b10ed4b15f7447 -> "9b8f84ebe292b53ceed1cee81e83a9c53b1d8480"
	e4d79ca0f902dfa36d9fcb87bde049eb00bfb285 -> bf4a16b84a437336abfe633dbeeb29748c80c14d
	e4f6ab008522c5ad386485720770b8d03b4fb880 -> "5f8f7081f7761acdf83d0a4c6819fe3d724f01d7"
	e565f3755342caf1d21e22359eaf09ec11d8c0ae -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	e565f3755342caf1d21e22359eaf09ec11d8c0ae -> "85127bcdeab5ab34f9c738da3fcc88d637f39089"
	e5a0d5d8bbeed7d0cb21533f9727591e110f50b8 -> "0cb454c0727efc1e7ef3ea23d7d6391a80769118"
	e5a0d5d8bbeed7d0cb21533f9727591e110f50b8 -> bc204b742735ae06f65bb20291c95985c9633b7f
	e63e62171b489dad8ae9d8bd4675b1938bff92c8 -> bac67e13700714f949ce3dcebd50396bc1c625e6
	e63e62171b489dad8ae9d8bd4675b1938bff92c8 -> e76b53ef23871ff81ab305822eb605baf0cc5bd3
	e676694298c4a8d9f6fdf3844cbfb03bbee552cc -> "6e3ea71639a3541523f2be8f950325c8a0aa6768"
	e680c625424e153580e8f2d78ae2ffaa42335221 -> "9f04cd7c61d35a9afc81d0625dc914c5221d22ab"
	e6ba4c07b85a0a8fee84b6ac7ab414d47a5351f2 -> "5637d5542021294e81cf0d8344fe140368117296"
	e70c392ca208d04b3b8c750e233ff4c0c007b51d -> bb5f4b8547d367ae6876d9df03298f25579b9b80
	e70c392ca208d04b3b8c750e233ff4c0c007b51d -> f11f0a5a2db955f68776ea95aec42df7fcb8ce1b
	e73b24fa32d4a367fd706f509241234cc17591a1 -> "0d97b85b106a06c0c2838b62ae163ba389228703"
	e73b24fa32d4a367fd706f509241234cc17591a1 -> ffdfcab88c2194b66b024a21e75b855d801653a9
	e7ac344d7018d4537eda29d5a09c047a35f27364 -> "03e7c454e9bc15f4fa046bd3a5f6147bbd0480e6"
	e7c1b9f1231e49f5e0c5250ec84c68376619f415 -> af47976cc044ecfd52105bb45f6a9085b3c8a772
	e7f8bf125c078004232e254e71b97226c4fed81b -> "3f8f2abe05c0aeb0ea60768d44a99261ed456d44"
	e7fb2ca94556e6aadfc3038afaa1c8cc3525258c -> "1fbb8d7ecb7bd78ac55d226b6b073372a5ea2c2d"
	e8008110cebf5cac71ae1722e4e2bf9b6b6369e2 -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	e8008110cebf5cac71ae1722e4e2bf9b6b6369e2 -> "2feabab25ac114bf8c527464543c96d97ac1f8bb"
	e8015223c74938548dfd8d6099b1ea5eb6ab9231 -> "08ce333d361890714829897e9f3b9fc9ec06eb4f"
	e969bc875963a10890d61ba84eab3a460bd9e535 -> "3dea2ad17d01ea0595abdaa738bee3806683752d"
	e9e924e581c8b6d07ab6429eba4684e35c108666 -> "1cee22ebff9621c849afa8d766d7627b291ec9d0"
	ea5b86dd3fa3a73809e2f8a58318a2a07e059347 -> "08bdfd453584e489d5a551aecbdcb77584e1b958"
	eb8728d88ab92d866f454a5b981b7bbfe4e2235b -> fbe8d3079d4a96aeb4e4529cc93cc0043b759a05
	ebb35369f1aea0e829a2e13531316a34d8f2e354 -> ce9432889c4720345e4e1985db1b18db6add64ce
	ebc3ae6ffc90852f148c4266dc5e6566588ad51b -> "6a9ae8101525360b8f79ed20d2f483616bd39c90"
	ebc3ae6ffc90852f148c4266dc5e6566588ad51b -> ee145da188a359b4d38e17c1f864f0521f36187e
	ebc9625a4c005c126f025455d3404d00e13d7faf -> "090c455a1db7ab808fbbf172d104e871bf8cdf1c"
	ebc9625a4c005c126f025455d3404d00e13d7faf -> "1e781209284eb5952e153339f45bf0c1555e78bb"
	ecac596c7b3492e75cae44aed47f222c198deaea -> bbda434d749918587a6d97ccdc237ed577d51268
	ecba2c181c556c1e44c5e3ff58af912c85ec33b2 -> d11d003ba5e98c036fb94204df6dcef28aafe2f8
	ecba2c181c556c1e44c5e3ff58af912c85ec33b2 -> dccd9c5cf2314b4150d7aaf21ad0a45d8c77acc1
	ecf8e8bbeff2edddfeebe7213b294c22ced1e8e8 -> "78cdeed4c79d165c915e8de0355cc3fb7f5797c5"
	ecf8e8bbeff2edddfeebe7213b294c22ced1e8e8 -> bf5f394be8f5b245b73758b02b3dc81e036a3245
	ed4cf6e8e29bebb9324ba1a400a6c07513f2d642 -> "97343c8c2f6e63fd0889b422ab65126448e68619"
	ee00ef41f269bda33370acbacb41f5ca9a200a9b -> "15db9a895d36a29eac2061ec31eba5e9628b4a5b"
	ee0e3bbc8dbd6efff2cbab71c3678ba5d412cbe6 -> "1fa37a06082584d4087937467ad3f3b0f0f31905"
	ee0e3bbc8dbd6efff2cbab71c3678ba5d412cbe6 -> b67a603f6360051f174a00f8d10dc088dc7093be
	ee109848cf18df772b0f5f8e70fa7c7f4bfb2e92 -> "64156589d9fc24afbc872a4dffb709926d67262f"
	ee109848cf18df772b0f5f8e70fa7c7f4bfb2e92 -> "7304bd2bc390aa6cf27f7a2527d7806dd3fad53e"
	ee145da188a359b4d38e17c1f864f0521f36187e -> "85d8a43baa5b4d93dce18f8c2261cb001571779a"
	ee145da188a359b4d38e17c1f864f0521f36187e -> c2d96bc42cfc358178078d8c2c65d550671d3ed0
	ee8020ff40dd3b9b472b482bfa7b6674747800cc -> "62898b8f5e86b67dbc8f9092ae9ee0819823a0be"
	ee8020ff40dd3b9b472b482bfa7b6674747800cc -> b838bf1938926a7a900166136d995d86f8a00e24
	eee25bbd84e2c3c00ea75080133374c48eeb3240 -> f5fac42e07cc7152ee29d656c8af6dbfb10e92e4
	ef18273a2d933b31529ea336161a70ddb8738b34 -> "63a597dd94079887a1b5ad72f64a8b0ee822dc27"
	ef18273a2d933b31529ea336161a70ddb8738b34 -> "839741ad40b010b4c8ac49a53117562b062e906f"
	ef8c3a1b8aa04e09a00dffcfda24daec6908615c -> "28911f7dcad1ccc6ac4f6939036de76bb4f4c09b"
	efba7d534cef8489a24f9d55811fbabdf82cfb10 -> "8776470cf379f31d483d8512d28a0eaa47d2e3f2"
	efba7d534cef8489a24f9d55811fbabdf82cfb10 -> b8902a53d16bf955bcebb9601b7f5c32f7027fae
	effbef2bebed87b1ce46d449862fb5121dba9d34 -> b119a687d411864433aed92017c144d311b53a4c
	effbef2bebed87b1ce46d449862fb5121dba9d34 -> d062ccf4c3af1e5153ed5064d4d05b05e0fdd4d5
	efff4a85a4fce58b2aa850c6fbf4d8828329f51d -> b9a6830836efd2090eab32c18027b089e8b42db9
	f00a07596a82911b16550fb1d50858818f9a7459 -> "083a756ca5e325e15259616bf64e62b49bac6b63"
	f00a07596a82911b16550fb1d50858818f9a7459 -> "7d4212b8f376ddf1aa403e51b46c92106d079b2d"
	f046ab2dd4c59aed786da0067f1af68ea1b003eb -> b224e8e36cf22df3c058990cfdd8c1d5c51fc5ae
	f046ab2dd4c59aed786da0067f1af68ea1b003eb -> da898a5c645ce9b6d72c2d39abe1bc3d48cb0fdb
	f0a328589fec56e039115150352cdc3aaf00bbc9 -> "759d2a534a2ca290f3dce24a29b1e5390781706c"
	f0a371a39d8b9945b2e0a414a32aa861614e5352 -> "5f8f7081f7761acdf83d0a4c6819fe3d724f01d7"
	f0a371a39d8b9945b2e0a414a32aa861614e5352 -> f66d1423f528403a33e8984f765801deb1b9cb97
	f0c266af4ea7e4d9b84955f8fed8ee8cb009cbd8 -> "7b081d2f70feb7eadd1e93f52146e5d68371451d"
	f11f0a5a2db955f68776ea95aec42df7fcb8ce1b -> bc67b4ab5f8bc268ecd2d9bb7dc1b7bf26884a8e
	f1299bff26a20b70bb5b8440526a2bd3c6de298a -> "4f02f4d68d8eefe728008974640839ef6e1b2182"
	f1cc562b77053ced18eebaae2febe5ff6d5e2690 -> f93ff170b93a1782659637824b25923245ac9dd1
	f1ce861c34bffbc02998173016b0bca0f6d9f6c4 -> "6f3fbed8eda577703426d77dacc71ce0ba46634e"
	f21a56e69073f7eed50985d1b62712075a5c8bea -> "746ef86a415990beed959ab8f5adb54c4a1ebc90"
	f21a56e69073f7eed50985d1b62712075a5c8bea -> "98d6370d2e4569f69a6496f984225c74caaa73b8"
	f21ea69d945f958704f2fe143c2638ecae6e0d12 -> bc204b742735ae06f65bb20291c95985c9633b7f
	f23179924bf4ee0e888cfbe911d9bd472918bcb4 -> "78cdeed4c79d165c915e8de0355cc3fb7f5797c5"
	f29f1990b5605f8dbed65324d8e92b67d4dd1713 -> e969bc875963a10890d61ba84eab3a460bd9e535
	f2cfb42f2267455c78077bd5f34518da5af5177c -> "6f8ae955bda8ad246cc1f5f7a15f1c3b1c04696a"
	f49905d47d42cf6ea4c34b5a8301e84149e7aeba -> "7304bd2bc390aa6cf27f7a2527d7806dd3fad53e"
	f49905d47d42cf6ea4c34b5a8301e84149e7aeba -> "803b5acaa7cb979b5d623270af18d6d8354fce9b"
	f52abcda959c2fa83243be21041d289735379b7c -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	f52abcda959c2fa83243be21041d289735379b7c -> a3b56f5f431d2421b575f329d401361e3196b467
	f5c714e2a7d6239548b94c37ae906484e94b5bc7 -> f9467895d884908d5588fc920997b2e53dfb3302
	f5fac42e07cc7152ee29d656c8af6dbfb10e92e4 -> dfc88bd6477bc6c1d2a9eb29a859ebf11a0a351d
	f65d9cfd3fc5a729bf3b4af471861805766d0701 -> "0bf8d1b3954920eb6d9304d187af18fea5f318fd"
	f65d9cfd3fc5a729bf3b4af471861805766d0701 -> "2ebbe2b2dbe67fcde41d0717a0ab27d2fd24566a"
	f66d1423f528403a33e8984f765801deb1b9cb97 -> a36a822d7d42f36baf0b3d7a0af5691ce692ce20
	f6a2efdc9b24a14f294fdbedfae3df4ce55faa9f -> e40622a60b7473b7a5feac4a9330239863e1352d
	f6dcf4099927beaea0e4a3231f442bd78beb1814 -> "2d2a71ce85026edcc40f469678a1035df0dfcf57"
	f705b3209ce9f624048d39a62745ce582d01df2c -> "8fd74ceeed3d1ed2e0e1e085f8ba944d9f57e816"
	f705b3209ce9f624048d39a62745ce582d01df2c -> a554262210b4a2ee6fa2d594e1f09f5830888c56
	f74eae3e475f7d043fd0d4c9ce21f661125b630a -> f074cdea467524afd355766c6cdb27d6d94d1e4e
	f8b9821f7d4f5239911794d03ac74edf27d711e6 -> "3ddeb7f3373ae0e309d9df62ada24375afa456c7"
	f8b9821f7d4f5239911794d03ac74edf27d711e6 -> "98046591b96a213e05d17569b1645e772df91b90"
	f8d95a323a088d88b5db1dd1cb2d554ac73caa10 -> fd21e6e447516421c5abdba21b483187a5637ba2
	f8ed12dec459df9ea0d43ccacc93cb2c32702c0e -> "10f2935c7f2070368dadde582f94c9c76e2fe991"
	f8f5af2952e76b4293f1cf0ff09d0e80697f6734 -> "5b34dd08d0ffc967b92abe187cc890d52ade5ac7"
	f8f5af2952e76b4293f1cf0ff09d0e80697f6734 -> "637fb902283a2244f4c910fee179d46c1fe9e867"
	f93b2a04243ee1a95920ae02a9423accbe1c3719 -> f8ed12dec459df9ea0d43ccacc93cb2c32702c0e
	f93ff170b93a1782659637824b25923245ac9dd1 -> "65faad6d841c29d4545e9cf3676d75f4e6e4872c"
	f9467895d884908d5588fc920997b2e53dfb3302 -> "93a8cfaf3c24f8c1f999b2ca5532ff8f46e0808d"
	f9d4bb7b9ae14a740f6c074149e7948bf6dcc3fb -> e39e332e5043d7e8f48fbfc91c3bd6d45a52cb7b
	f9d4bb7b9ae14a740f6c074149e7948bf6dcc3fb -> f93ff170b93a1782659637824b25923245ac9dd1
	f9f51594f226f52022ca7a78d35f499524387cfe -> "50d91206465b8dd42e275810dc78572fc35935b8"
	fa247cfd4e00fafd7c8d3566ee69b6269d42c977 -> "627208d89dea747b35cb848eb5e2c8eddf878dfd"
	fa247cfd4e00fafd7c8d3566ee69b6269d42c977 -> c84209a8fda86dd1c7647f52bf0fd6eb8aaaaad2
	fa6416bf7099adfa1924e2ffa2316a00cfdbc6ef -> "0d03fda6a5db0b56df7e629ce856d2d38c89a4de"
	fa6416bf7099adfa1924e2ffa2316a00cfdbc6ef -> a295b89dcccaaae03aa7396c91c0e45ed9025b6a
	fa779fa88d18f550421ae777f7e048dd08ad0006 -> "41c793eae900e632dbc73ec7f900ea1e7d38aa92"
	fae4c40e90f10851a15b8fd4a77e90e3977968ed -> "8765508c349a7c225a96d7c7a8bd2045945e5ff0"
	fb8899337a87ff32ae4e9d08803c1a7c4fc0df0a -> "5d6b46764e6cf7bd048645875c580452f8a9835e"
	fbe8d3079d4a96aeb4e4529cc93cc0043b759a05 -> b28fb93e51a94907eca9cc08eb1a2db51fe1ddc8
	fc07f73f2459f53f1ea784ea984af9403f4b4439 -> f6dcf4099927beaea0e4a3231f442bd78beb1814
	fc613c01d45b034290e7fb69977a2cc2715b1259 -> "10fd0e120317de28002e510d6becc049b81b851f"
	fc613c01d45b034290e7fb69977a2cc2715b1259 -> "56610beac248f698ea312d129ef8f1fbe6a0039e"
	fc62e033cd93ff6b93e312d89bfb5683a4c6f90c -> dca924b4508e3147e82be5bba10cfc8aefa7ecf0
	fc89d14c639faec779956b4e3cd873c07bd4327b -> "7a8d9efc26f194eb20114d1f639ec9fa48d70bff"
	fd21e6e447516421c5abdba21b483187a5637ba2 -> c5823641a6769a727d890a55160346d92808bc0c
	fd3038fefdd56ccacb01f807da193b6b6bbb9e7a -> "3444b4bf367e16f70d77ec0fc00e0cc3b587195e"
	fd3038fefdd56ccacb01f807da193b6b6bbb9e7a -> "87eccc3a81d133e636150268c24d2220cad70fe5"
	fdeca639b8c4d83fe6c16d2a5bc65ef08af0adcb -> e4d79ca0f902dfa36d9fcb87bde049eb00bfb285
	fdf3820b7ef69dcf887bd86565e2442f89edc7c0 -> "320f2061b63b0157ea8b21362ed12e4ce90258e2"
	fe4e60a33197d0b3e003cdc5ca1e94e6d092da89 -> "6d872e6042484f8883c097f9ee8cef34dc4c0629"
	fe4e60a33197d0b3e003cdc5ca1e94e6d092da89 -> "8454b42f947e185a65b2950123493928558f2f5e"
	fea214e48d5f406a20433da975a52d9d0e472aec -> a265e7f00ac6a30899bcb2b60535824bc4776a7c
	feffb34257ee8eef18cc6a3a5a4f01d40720bda1 -> "028f618658e34230e1d65678f14b6876e0f9856d"
	feffb34257ee8eef18cc6a3a5a4f01d40720bda1 -> "6a64ac7b014fa2cfa7a69af3c253bcd53a94b428"
	ff9fcf71b758c504e9ecc82cc8ec07acd674097b -> "03944513488db4a81fdb4c21c3b515e4cb260b05"
	ff9fcf71b758c504e9ecc82cc8ec07acd674097b -> "4767266eb4cedeaf40e4bda87fb9c8b6ae1ef127"
	ffbd3f98f999102cab47fda4c992d7fa07e1d912 -> "8b702f93dd4d239acd07f9a4991be3297ef333c9"
	ffbd89cbb7933081446e1dbde736d5dfce983383 -> "76cf4f61c87855ebf0784b88aaf737d6b09f504b"
	ffdfcab88c2194b66b024a21e75b855d801653a9 -> "80b09099f88bb73430e785a6ff4272a616a129e3"
	ffe664366890f252ad14e87c987c57e080182bca -> "57adf71b93efa9f9b4db5147e9fa1235f0a1d5ba"
	"local-branch-master" -> a36e024e989f4d35f35987a60e3af8022cac3420
	"origin/HEAD" -> "remote-branch-origin/master"
	"remote-branch-origin/maint" -> f93ff170b93a1782659637824b25923245ac9dd1
	"remote-branch-origin/master" -> a36e024e989f4d35f35987a60e3af8022cac3420
	"remote-branch-origin/next" -> "01f2b845292a11ef1d0a77a705fb003137259cb0"
	"remote-branch-origin/seen" -> e73b24fa32d4a367fd706f509241234cc17591a1
	"remote-branch-origin/todo" -> "72749cdeaf475612deb2ca4a959a59b0e9425c0e"
}
